--------------------------------------------------


--------------------------------------------------
6 November 2016

----------
In principle, use D3 to create DOM elements that associate with data or change with data.
Create all other elements within the HTML.

----------
Set dimensions of DOM elements (especially view div and svg) proportional to dimensions of the viewport or window.
The styles for the views' div elements set these elements dimensions proportionally using the relative units "vw" and "vh" for width and height attributes.
Since I set the dimensions of those parent elements proportionally, I can access their dimensions to set those of the child svg elements.
I can use "Element.getBoundingClientRect()".
Alternatively I could use "window.innerWidth" and "window.innerHeight" to access the dimensions of the viewport.
References
"Window.innerWidth"
https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth
"Window.innerHeight"
https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight

----------
Determine dimensions of elements in order to scale child elements properly.
Element.getBoundingClientRect() and Element.getClientRects() essentially return the same values but in a different format.
Element.clientWidth and Element.clientHeight might actually account for margin and border, though maybe not padding.
console.log(self.queryDiv.node().getBoundingClientRect());
console.log(self.queryDiv.node().getClientRects());
console.log(self.queryDiv.node().clientWidth);
console.log(self.queryDiv.node().clientHeight);
self.bounds = self.queryDiv.node().getBoundingClientRect();
self.svgWidth = self.bounds.width - (self.margin.left + self.margin.right);
self.svgHeight = self.bounds.height - (self.margin.top + self.margin.bottom);
References
"Determining the dimensions of elements"
https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements
"Element.getClientRects()"
https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects

----------
I decided to use sequential creation of class instances.
If a class needs to access or influence another class, it creates an instance of that class.
I suppose this method could be problematic if subsequent iterations create multiple conflicting instances.
An alternative that I might consider is creating class instances initially and then passing those instances around as
arguments or parameters.
That method might ensure that subsequent modifications influence the existing instance.
