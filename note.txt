--------------------------------------------------
Notes
Research With Alexander Lex
--------------------------------------------------

--------------------------------------------------
13 February 2018

----------
Progress

I changed the names of several state variables for consistency.
I changed the organization of subordinate views within control view for greater efficiency.

----------
Plan

Place the detail view at the top of the control view.
Activate this view by default.
Show in detail view a summary in bar charts of the nodes in network and subnetwork.
Export information about metabolites and reactions from the detail view.
Consider making the detail view a permanent window of a fixed size above the control view.

--------------------------------------------------
12 February 2018

----------
Progress

View.createReferenceContainer is not behaving properly.
The intent is for this function to create a new container for a view if such a container does not exist already.
Instead, the function creates a new container with every update to the application's state.

The function works properly for all views except those within the control view.
The problem is probably in the control view.

The problem is probably actually in General.filterRemoveDocumentElements.
Correct this problem for the sake of efficiency.

Consider letting the control view determine which sub views to create.

--------------------------------------------------
10 February 2018

----------
Progress

I created a preliminary prompt view for the network's diagram.
Activate buttons within this prompt view.
Also create a simple interface to select and add a single node.

--------------------------------------------------
9 February 2018

----------
Progress

I began implementing behavior for tip and prompt views on nodes.
I began implementing a function in View utility class to determine positions of proximal corners of tip and prompt.
That function will need to adjust for whether it's a tip or a prompt, since I need to display both simultaneously.

The tip and prompt views themselves will need to determine the positions of their top left corners according to the contents and dimensions of their containers.

After completing tip and prompt views for nodes, I want to implement the drag and lock features for direct interaction with nodes.

----------
Progress Report

Hi Jared and Alex,

Here's a progress report.

Our last meeting happened on 8 January.

On 18 January I presented the project to Jared's team. Members of the team shared some helpful critique and advice, which I'm applying in my plans for the project.

Even in my initial proposal of the project in 2016, topological traversal of the metabolic network was an essential priority. Relations within the network constitute the basic information that analysts need. Even with various filters and simplifications, the metabolic network remains sufficiently large and complex that manual traversals are laborious. In multiple conversations, both Casey Hughes and Adam Hughes have emphasized their need for information about relations in proximity (breadth traversal) around a single metabolite of interest. Their output is a simple list of reactions that relate. Similarly, in multiple conversations, Kevin Hicks has emphasized his need for information about sometimes long-range relations (shortest simple paths traversal) between multiple metabolites of interest. His output is basic information about the metabolites and reactions, perhaps including relevant categories of processes and compartments, in these paths. Indeed, whereas previous tools (KEGG, various other databases) offer information about metabolites and reactions and static depictions of conventional pathways (Glycolysis, Pentose Phosphate, Citrate Cycle), the main advantage of our project is the customizable definition of a metabolic network that is suitable for automatic traversal.

I implemented and optimized functionality for traversals by breadth about a single node, and multiple shortest simple paths between two nodes. I did so such that the application does not depend on external libraries, partly because neither JSNetworkX nor CytoScapeJS provided the necessary functionality anyway. The performance is satisfactory, and I plan for these traversals to be useful for building custom subnetworks.

My current focus is on development of the interactive interface, and I have a clear plan. We discussed multiple aspects of this interface in our last meeting. Among other things, I plan for interaction with nodes in the network's diagram to build subnetworks and manually optimize the layout. I'm confident that my progress on the interface will be rapid since the foundational data structure and functionality is in order, and I know what to do.

I also have a plan for a basic interface to input custom data for representation on nodes in the network's diagram. I think that'll be pretty simple as well.

Overall, I have a clear goal and plan for the tool for its initial submission for publication. I'm eager to reach that stage of prototype in the next month or so and then begin writing a manuscript.

I recommend we meet near the end of February, perhaps our normal time of 5:00 on 26 February. Does that work?

Please find as attachments to this message screen shots that depict some aspects of the current interface that are relevant to traversals.

Please also find as an attachment to this message a draft of an abstract that I plan to submit for a poster to RECOMB 2018 (https://recomb2018.fr/). The abstract is due on 15 February.

Cheers,

Cameron

--------------------------------------------------
8 February 2018

----------
Progress

I corrected multiple discrepancies in traversal algorithms.
I implemented collection of records for elements from subnetwork or network with preference to preserve mutable information from subnetwork.
Mutable information within records for subnetwork's elements includes positions of nodes in network's diagram.

----------
Persistence of positions in network's diagram

Restoration to entire application's state also restores all of interface's views.
Restorations to interface's views are expensive.
Views with greater complexity, such as the candiday view, are more expensive.
These restorations delay response of interface to actions.

Only restore the entire application's state and all interface's views for actions that create major changes.

Actions that restore entire application's immutable state and all interface's views...
-add or remove nodes from subnetwork's elements
-select nodes from network's diagram for display in detail view

Actions that modify mutable records of subnetwork's elements...
-change positions of subnetwork's elements in network's diagram
-lock or unlock positions of subnetwork's elements in network's diagram
-appearance and disappearance of tip and prompt views

--------------------------------------------------
7 February 2018

----------
Progress

Implement Traversal.collectNetworkSubnetworkElements()
I need to preserve or persist information from previous records of subnetwork's elements.

----------
Plan

Compilation of plans, especially from notes on 8-17 January 2018

-mutation and persistence of positions within network's diagram
--records for subnetwork's elements are mutable
--records for subnetwork's elements include information about nodes' positions
--topology view needs to initiate force simulations for position with every change to positions or subnetwork
--novel records for subnetwork's elements should initiate positions at center of view

-interaction with nodes in network's diagram
--tip
--prompt
--default click and drag to lock to new position
--display information in detail view

-prompt for network's nodes
--hover on a node should display a promt in addition to tip
--user clicks the prompt to open small menu of controls for actions on the individual node
--lock or unlock node's position in network's diagram
--remove node from subnetwork
--expand subnetwork by proximity from node to depth of 1 link

-prompt for network's diagram view
--click on blank portion of network's diagram view should also display prompt
--lock or unlock all nodes' positions
--remove all nodes and links from subnetwork
--add a single node to the network (rogue)

-representation of replicate nodes for metabolites
--distinct bubbles on periphery of reaction's node
--reaction's node needs information about replicate metabolites
--reaction might also need some representation of whether or not all of its metabolites are in the subnetwork

-representation of reaction's nodes
--visual mark for reactions without all metabolites in network (only those omitted)
--when preparing reactions' nodes, determine whether all of the reaction's participants have explict representations in nodes and links
--if not all of reactions' participants have representations, include indicator on reaction's node
--maybe an asterisk or something
--re-determine and re-draw directional markers for reactions at conclusion of simulations for layout
--drag of node should initiate simulation and re-draw of reactions' directions

-tips for network's nodes
--make local tips concise
--include only name of metabolite or reaction
--include more information in detail view within side panel
--determine horizontal and vertical center points of view
--if cursor is on right side of view, then draw tip to left of cursor
--if cursor is on left side of view, then draw tip to right of cursor
--similar for top and bottom

-labels on nodes in network's diagram
--draw labels initially and always on nodes
--color contrast for visibility of nodes' labels

-detail view
--include comprehensive information in detail about metabolite or reaction of current selection from network's diagram
--make information from selections of multiple entities persistent within view
--include control to clear the view

-representation of hierarchy of selection of entities for network
--representations of selections by filters, simplifications, and traversals
--representations of network's elements
--representations of subnetwork's elements
--consider bar graphs within traversal view or within summary view (when no network's diagram)

-association and representation of custom data with network's elements
--menu to create table of associations between data values and entities
--state variable array of objects with identifiers of entities and data values

----------

----------

----------
Performance of Traversal Procedures

Test algorithms' performance
shortest simple paths and bidirectional shortest path
compartmentalization: true
defaultSimplifications: true
source: "glc_D_c"
target: "trp_L_c"
count: 5

Algorithm 1: Immutable Recursion...
nodes and links for omission in arrays
immutable recursive algorithm for shortest simple paths
immutable recursive algorithm for bidirectional shortest path
process durations (milliseconds):
21376, 21685, 21421

Algorithm 2: Mutable Iteration
nodes and links for omission in arrays
mutable iterative algorithm for shortest simple paths
mutable iterative algorithm for bidirectional shortest path
process durations (milliseconds):
22544, 22921, 22743

Test performed both algorithms directly after each other.
Test confirmed that both algorithms produced identical counts of identical paths.

Interpretation...

Plan...
Use the immutable recursive algorithm.

----------
Script for Performance Test of Traversal Procedures

    ////////////////////////////////////////////////////////////////////////////

    console.log("Algorithm 1... Immutable Recursion...");
    // Initiate process timer.
    //console.time("timer");
    var startTime = window.performance.now();
    // Execute process.

    var pathsOne = Network.collectShortestSimplePathsImmutableRecursion({
      source: "glc_D_c",
      target: "trp_L_c",
      direction: true,
      count: 5,
      links: state.networkLinksRecords
    });

    // Terminate process timer.
    //console.timeEnd("timer");
    var endTime = window.performance.now();
    var duration = Math.round(endTime - startTime);
    console.log("process duration: " + duration + " milliseconds");
    //console.log(pathsOne);

    ////////////////////////////////////////////////////////////////////////////

    console.log("Algorithm 2... Mutable Iteration...");
    // Initiate process timer.
    //console.time("timer");
    var startTime = window.performance.now();
    // Execute process.

    var pathsTwo = Network.collectShortestSimplePathsMutableIteration({
      source: "glc_D_c",
      target: "trp_L_c",
      direction: true,
      count: 5,
      links: state.networkLinksRecords
    });

    // Terminate process timer.
    //console.timeEnd("timer");
    var endTime = window.performance.now();
    var duration = Math.round(endTime - startTime);
    console.log("process duration: " + duration + " milliseconds");
    //console.log(pathsTwo);

    ////////////////////////////////////////////////////////////////////////////

    // Compare results of both algorithms.
    var paths = pathsOne.length === pathsTwo.length;
    console.log("both algorithms give same counts paths: " + paths);
    // Iterate on paths.
    var matches = [];
    for (
      var index = 0;
      index < pathsOne.length;
      index++
    ) {
      var pathOne = pathsOne[index].slice();
      var pathTwo = pathsTwo[index].slice();
      var match = General.compareArraysByMutualValuesIndices(pathOne, pathTwo);
      matches.push(match);
    }
    var allMatch = matches.every(function (match) {
      return match;
    });
    console.log("all paths match from both algorithms: " + allMatch);

    ////////////////////////////////////////////////////////////////////////////

--------------------------------------------------
6 February 2018

----------
Performance of Traversal Procedures

Bench mark algorithm's efficiency.
Recursive algorithms for shoretest simple paths and bidirectional shortest path.
compartmentalization: true
defaultSimplifications: true
source: "glc_D_c"
target: "trp_L_c"
count: 5

Version 1: nodes and links for omission in arrays
Process durations (milliseconds):
21893, 22945, 22282, 22180, 22177

Version 2: nodes and links for omission in objects
Process durations (milliseconds):
35897, 36205, 34226

Interpretation...
Objects are more efficient than arrays for frequent, specific look-ups.
In the case of omission nodes and links within the procedure for shortest simple paths, it seems that the cost of frequent creation of objects, including copying changes to new objects, overcomes any benefit.
Also worth mention, finding neighbors for basic traversal is more or less satisfactory with records for nodes and links in arrays.
It is necessary to consider both links' sources and targets anyway, and it is necessary to visit records for all links.

Plan...
Revert to nodes and links for omission in arrays.
Implement a simple shortest paths algorithm for mutable iteration and compare efficiencies of algorithms for mutable iteration to immutable recursion.

--------------------------------------------------
5 February 2018

----------
Multiple shortest simple paths

Yen's Algorithm
https://en.wikipedia.org/wiki/Yen%27s_algorithm
Yen's algorithm uses any appropriate algorithm to find the shortest path between source and target.

Shortest Path Algorithm
As the metabolic network of interest is weightless, a bidirectional breadth-first search is the preferrable algorithm.
The metabolic network of interest is also directional.

https://networkx.github.io/documentation/stable/reference/algorithms/traversal.html
https://networkx.github.io/documentation/stable/reference/algorithms/simple_paths.html

networkx.algorithms.simple_paths.shortest_simple_paths

----------
Traversal

I activated interface's controls for rogue, proximity, and path traversals.

I need to implement procedure for multiple simple shortest paths, using the procedure for single shortest path.

--------------------------------------------------
4 February 2018

----------
Traversal

I implemented an algorithm to find the shortest, directional, weightless path between two nodes.
I implemented this algorithm both iteratively and recursively.
Iterative and recursive implmentations have comparable efficiency.

I need implement appropriate response if there is no path between nodes.

I also need to include this algorithm in a larger algorithm for simple shortest paths.

----------
Candidates and Simplifications

The application needs a simple way to replicate common metabolites that otherwise dominate traversals.
Examples include water, proton, oxygen, and carbon dioxide.

I implemented default simplifications for candidate entities.

--------------------------------------------------
30 January 2018

----------
Literature

"Metabolic network segmentation: A probabilistic graphical modeling approach to identify the sites and sequential order of metabolic regulation from non-targeted metabolomics data"
https://www.ncbi.nlm.nih.gov/pubmed/28598965

The article acknowledges the limitation of arbitrarily-defined metabolic pathways.
Topology is the most important factor.

--------------------------------------------------
28 January 2018

----------
Topological Traversal

Yen's Algorithm
https://en.wikipedia.org/wiki/Yen%27s_algorithm
Yen's algorithm uses any appropriate algorithm to find the shortest path between source and target.

Shortest Path Algorithm
As the metabolic network of interest is weightless, a bidirectional breadth-first search is the preferrable algorithm.
The metabolic network of interest is also directional.

https://networkx.github.io/documentation/stable/reference/algorithms/traversal.html
https://networkx.github.io/documentation/stable/reference/algorithms/simple_paths.html

networkx.algorithms.simple_paths.shortest_simple_paths

--------------------------------------------------
27 January 2018

----------
Topological Traversal

1. breadth-first search

networkx.algorithms.traversal.breadth_first_search.bfs_edges
I will need to keep track of paths.

2. bidirectional shortest path by breadth first search

-weightless graph
-accommodate directional or undirectional
-bidirectional breadth-first search

3. shortest simple paths

networkx.algorithms.simple_paths.shortest_simple_paths
https://networkx.github.io/documentation/stable/reference/algorithms/generated/networkx.algorithms.simple_paths.shortest_simple_paths.html#networkx.algorithms.simple_paths.shortest_simple_paths

Multiple simple, shortest paths in an unweighted, directed graph
Yen 1971; Lawler 1972

----------
Plan

Maybe include graphical (bar chart) representations of nodes and links within network and subnetwork within the traversal view.

--------------------------------------------------
24 January 2018

----------
Plan

1. Complete implementation of process and interface controls for proximity traversal.

2. Implement controls and process for path traversal.
3. Implement path traversal algorithm.
4. Implement other refinements to interface, as planned since meet with Jared P. Rutter and Alexander Lex on 8 January 2018.
5. Introduce basic data-association. Use auto-complete search menus to associate data with entity identifiers in a user-built table.

--------------------------------------------------
23 January 2018

----------

Restore the traversal view's controls to default with every change to the network or subnetwork.

Complete controls for rogue, proximity, and path.

--------------------------------------------------
22 January 2018

----------
Plan

Topological traversals can modify the subnetwork in multiple ways.
Traversals can select new subnetwork to replace any previous subnetwork.
Traversals can add to (union) or subtract from (difference) any previous subnetwork.

Start from subnetwork copy of network or start from empty subnetwork.

Create a radio button control in Traversal view for whether to combine traversal selections by union or difference.

--------------------------------------------------
21 January 2018

----------
Plan

Create new control view, network or traversal view.
This view needs a restore button to remove any traversals and set subnetwork to copy of network.
This view also needs an export button to export information about all nodes' entities, similar to the export from the set view.
This view also needs a search menu with automatic completion and other controls for proximity traversal.

Create new action to manage the proximity traversal.
The code is mostly within the executeTemporaryProcedure action.

----------
Network traversal

Create novel state variables for subnetwork's elements.
Topology view will only represent subnetwork's elements.
Without traversal, subnetwork will be copy of network.
With traversal, subnetwork will be result of traversal.

----------
Simplification

Consider introducing a default and customizable list of metabolites to simplify.

--------------------------------------------------
18 January 2018

----------
Bidirectional breadth first search

I will need to keep track of paths.

----------
Topological Traversal
Breadth First Search

Iterative Deepening Depth First Search
https://en.wikipedia.org/wiki/Iterative_deepening_depth-first_search

For generation of ego graphs, I do not need to evaluate nodes or preserve information about paths.
I only need to collect nodes in a breadth first traversal to a specific depth.
Follow a similar algorith as that from NetworkX's single source shortest path length.
networkx.algorithms.shortest_paths.unweighted._single_shortest_path_length
https://networkx.github.io/documentation/stable/_modules/networkx/algorithms/shortest_paths/unweighted.html#single_source_shortest_path_length

--------------------------------------------------
18 January 2018

----------
Topological Traversal

1. neighbors, predecessors, or successors

2. breadth-first search

networkx.algorithms.traversal.breadth_first_search.bfs_edges

3. bidirectional shortest path

4. shortest simple paths

networkx.algorithms.simple_paths.shortest_simple_paths
https://networkx.github.io/documentation/stable/reference/algorithms/generated/networkx.algorithms.simple_paths.shortest_simple_paths.html#networkx.algorithms.simple_paths.shortest_simple_paths

Multiple simple, shortest paths in an unweighted, directed graph
Yen 1971; Lawler 1972

1. Implement bidirectional shortest path
-weightless graph
-accommodate directional or undirectional
-bidirectional breadth-first search

----------
Notes from meet with team of Jared P. Rutter

Sara Nowinski recommended including default layouts for pathways of common interest, such as glycolysis and the citrate cycle.
I could include some sort of default, static coordinates for these pathways.
Currently available tools, such as KEGG, already take this approach.

A new, temporary member of the team recommended that I provide information about the sets (processes, and compartments) to which individual metabolites belong.
That way the user can select filters with some basic information.
Currently available tools, such as KEGG and MetaboAnalyst already make this information accessible.

With Kevin G. Hicks, I discussed the priority functionality of the application.
Currently-available tools such as KEGG and MetaboAnalyst support evaluation of cannonical pathways and properties of individual metabolites or reactions.
The strength of my data source and application is the information about the network's topology.
The priority for my application is topological traversal.
Shortest simple paths between 2 or more metabolites will be the most important functionality for users such as Kevin.
The user may want to know the 5 shortest simple paths between 2 metabolites and then export information about the metabolites and reactions in each of these paths.
The user may also want a subnetwork consisting of the union of shortest paths between 2 or more metabolites or reactions.

Topological traversal is the priority functionality for the application.
This functionality is a greater priority than representation of experimental measurements on the network.
I recognized the importance of this functionality in my own work in metabolomics and included it in the original proposal for the project.
Kevin G. Hicks has emphasized his interest in this functionality multiple times.
To my knowledge there are not any tools that provide ready access to this sort of traversal of the metabolic network.
Also, I introduced extensive logic in my evaluation of candidacy and definition of the network.

----------
Presentation to team of Jared P. Rutter

-demonstration of application's current state
--automatic load of information about metabolic entities and sets
--control view with collapsible sub-views
--set view's controls, search menus, summaries, and filters
--set view's export of information about entities that pass filters
--candidacy view's controls, search menus, summaries, and simplifications
--summary view's brief summary and control to draw network
--topology view's visual representation of network
--tip view's summary information about sets, candidates, and network's elements

-plans and goals for next efforts on application
--optimize network's diagram by direct interaction
--access descriptive information in detail view and export
--construct or narrow subnetwork by topological traversal
--integrate custom data about entities

--------------------------------------------------
17 January 2018

----------
Meet with Alexander Lex

Make local tool tips concise.
Include only names of metabolites and reactions in tool tips for network's nodes.

Detail views.
Include comprehensive details about metabolites and reactions in a detail view upon selection of the node.
Maybe persist information about multiple nodes in the detail view for reference.
Also include a button to clear the detail view.
Initially, only include details about the currently-selected node.

Hover on a node should display both a tip and a prompt.
The user will click the prompt to display options for direct interaction.

For now, keep both options to omit or replicate nodes for metabolites.
Represent replicate nodes for metabolites explicitly by individual blobs on periphery of reaction's node.
The reaction's node needs information about these replicate metabolites.
I do not actually want nodes for the replicate metabolites.

...

----------
Goals for application

-simplification of metabolites
--the only reason to include replicate nodes on the network's diagram is to represent data values visually on these nodes
--otherwise replicate nodes are not of interest
--it is unlikely that a user would want to represent data visually on a replicate node
--hence replicate nodes are useless clutter on the network's diagram
--do not replicate nodes for metabolites
--simplify the simplification to only support omission even for metabolites
--replication is not useful anyway
--continue to organize simplifications in entries within an object
--each simplification's entry still needs information about identifier and dependency

-representation of reactions' metabolites
--include visual mark on reactions' nodes to designate that not all metabolites have explicit nodes in the subnetwork
--handle the situation identically for filter and simplification of metabolites
--when preparing reactions' nodes, determine whether all of the reaction's participants have explict representations in nodes and links
--if not all of reactions' participants have representations, include indicator on reaction's node
--create a little half circle at bottom center of reaction's node to indicate incomplete representation

-include control (within network control view) to add a single node along with any links to all other current nodes in the subnetwork
--only draw links from the network (consider filters and candidacy)
--only include access to nodes and links within the total network

-direct interaction with individual nodes
--menu with options
---unlock node's position or drag to lock in new position (default upon click and drag)
---remove node from subnetwork
---expand subnetwork by proximity from node to depth of 1

-persist network's diagram
--store information about layout positions of nodes and links within mutable subnetwork's records for nodes and links
--with each restore of topology view, consider whether to initiate the force simulation, starting from the nodes' and links' current positions
--or maybe initialize the simulations with every restoration of the topology view
--interactions with application should not initiate redraw unless necessary

-tip position
--determine horizontal and vertical center points of view
--if cursor is on right side of view, then draw tip to left of cursor
--if cursor is on left side of view, then draw tip to right of cursor
--similar for top and bottom

-decrease count of simulation's iterations for node-link layout

-draw labels initially on nodes in network's diagram

--------------------------------------------------
12 January 2018

----------
Direct interaction with nodes in network's diagram

Options for pop-up menu upon clicking node
1. lock/unlock node's position
2. remove node from subnetwork
3. expand subnetwork by proximity from node to depth of 1

Also drag node to new position to which it locks by default

All of those actions should re-initialize simulations to determine layout

--------------------------------------------------
11 January 2018

----------
Progress

-decreased count of simulation's iterations for node-link layout

----------
Plan

-tip position
--determine horizontal and vertical center points of view
--if cursor is on right side of view, then draw tip to left of cursor
--if cursor is on left side of view, then draw tip to right of cursor
--similar for top and bottom

-draw labels initially on nodes in network's diagram

-simplification of metabolites
--the only reason to include replicate nodes on the network's diagram is to represent data values visually on these nodes
--otherwise replicate nodes are not of interest
--it is unlikely that a user would want to represent data visually on a replicate node
--hence replicate nodes are useless clutter on the network's diagram
--do not replicate nodes for metabolites
--simplify the simplification to only support omission even for metabolites
--replication is not useful anyway
--continue to organize simplifications in entries within an object
--each simplification's entry still needs information about identifier and dependency

-representation of reactions' metabolites
--include visual mark on reactions' nodes to designate that not all metabolites have explicit nodes
--handle the situation identically for filter and simplification of metabolites
--when preparing candidate reactions, determine whether all of the reaction's metabolites are also candidates
--if not all of reactions' metabolites are candidates, indicate in reaction's node
--create a little half circle at bottom center of reaction's node to indicate incomplete metabolites

-include functionality to add single node with links to all other current nodes in the subnetwork
--only include access to nodes and links within the total network

-persist network's diagram
--store information about layout positions of nodes and links within mutable subnetwork's records for nodes and links
--with each restore of topology view, consider whether to initiate the force simulation, starting from the nodes' and links' current positions
--interactions with application should not initiate redraw unless necessary

----------
Goals for next meet with Jared P. Rutter and Alexander Lex on 29 January 2018

1. network's visual representation
-controls for manual optimization of layout
--drag and anchor individual nodes
--select individual nodes to expand by ego or proximity to depth of 1 link
--select individual nodes to omit or replicate
-interactivity
--reduce count of simulation's iterations
--preserve layout across interaction without requirement for repeat draw
--draw labels initially
--do not repeat draw upon interaction with control view's tabs
-node label font color contrast
-represent replicate nodes with smaller nodes and shorter links or as bumps on reactions

2. integration of custom data
--input or import custom data with association to metabolic entities
--represent quantitative values on matching network's elements

3. selections by topological traversal
-we decided this goal is not a priority, but just to keep it in mind
-ego or proximity graph at various depths
-pairwise simple shortest paths, a potential challenge

----------
Hierarchy of information

Filters, compartmentalization, and simplifications determine which entities and relations are available in the total network.

Selections of individual nodes and traversals determine which nodes and links from the total network are in the sub network.
The nodes and links of the sub network are what actually get displayed in the topology view.

----------
Observation

The model includes metabolites with names NAD(1-) and NADH(2-).
Are those charges correct?

--------------------------------------------------
8 January 2018

tip
-determine horizontal and vertical center points of view
-if cursor is on right side of view, then draw tip to left of cursor
-if cursor is on left side of view, then draw tip to right of cursor
-similar for top and bottom

----------
Goals for next meet with Jared P. Rutter and Alexander Lex on 29 January 2018

1. network's visual representation
-controls for manual optimization of layout
--drag and anchor individual nodes
--select individual nodes to expand by ego or proximity to depth of 1 link
--select individual nodes to omit or replicate
-interactivity
--reduce count of simulation's iterations
--preserve layout across interaction without requirement for repeat draw
--draw labels initially
-node label font color contrast
-represent replicate nodes with smaller nodes and shorter links or as bumps on reactions

2. integration of custom data
--input or import custom data with association to metabolic entities
--represent quantitative values on matching network's elements

3. selections by topological traversal
-we decided this goal is not a priority, but just to keep it in mind
-ego or proximity graph at various depths
-pairwise simple shortest paths, a potential challenge

----------
Meet with Jared P. Rutter and Alexander Lex

-review of goals from meeting on 4 December 2017

-demonstration of application's current state
--automatic load of information about metabolic entities and sets
--control view with collapsible sub-views
--set view's controls, search menus, summaries, and filters
--set view's export of information about entities that pass filters
--candidacy view's controls, search menus, summaries, and simplifications
--summary view's brief summary and control to draw network
--topology view's visual representation of network
--tip view's summary information about sets, candidates, and network's elements

-plans and goals for next efforts on application
--integrate custom data about entities
--select portions of network by topological traversal
---proximity or ego graph
---connect shortest paths between multiple targets
--export information about the selection from the network
--gather feedback from users

-plans and goals for career development
--application to Computational Biology at University of Washington, 15 January 2018
--application to visit at National Cancer Institute, 31 January 2018
--applications to individual labs
--learning about data science, observing Jeff Phillips' Data Mining course

----------
Progress

-core functionality
--loads information about metabolic entities and sets
--filters entities by properties
--determines relevance of candidate entities by compartmentalization and simplification
--defines network's elements from candidates

-interface
--controls within various views on side panel
--control views are collapsible to save screen space
--state view
---save or load persistent representations of application's state
--set view
---summarize entities properties in sets
---searchable, scrollable menus
---visual representations of cardinalities
---custom tips with more information about sets
---select filters against entities
--candidacy view
---searchable, scrollable menus
---visual representations of degrees for each individual candidate entity
---custom tips with more information about candidates
---select simplifications of entities
--summary view
---brief summary of network's elements
---control to draw visual representation of network's elements
--topology view
---visual representation of network's elements
---custom tips with more information about nodes

----------
Search for data sets

"Metabolomics and transcriptomics identify pathway differences between visceral and subcutaneous adipose tissue in colorectal cancer patients: the ColoCare study"
American Journal of Clinical Nutrition
2015
https://www.ncbi.nlm.nih.gov/pubmed/26156741
ColoCare Study Cohort
59 people
visceral and subcutaneous adipose tissue
abundance of 333 identifiable metabolites
abundance of transcripts

Proteomics
"A Golden Age for Working with Public Proteomics Data"
Trends in Biochemical Sciences
2017
http://www.cell.com/trends/biochemical-sciences/fulltext/S0968-0004(17)30001-4

Metabolomics and Transcriptomics

"Multi-omic profiles of human non-alcoholic fatty liver disease tissue highlight heterogenic phenotypes"
Scientific Data
2015

"The Human Blood Metabolome-Transcriptome Interface"
PLOS Genetics
2015
https://www.ncbi.nlm.nih.gov/pubmed/26086077
Data from German KORA F4 cohort
-712 people
-abundance of 16,780 unique transcripts
-abundance of 440 - 186 unique, identifiable metabolites

"MYC-driven accumulation of 2-hydroxyglutarate is associated with breast cancer prognosis"
Journal of Clinical Investigations
2014
https://www.ncbi.nlm.nih.gov/pubmed/24316975

Transcriptomics
"Transcriptomics resources of human tissues and organs"
http://onlinelibrary.wiley.com/doi/10.15252/msb.20155865/full
GTEx, Human Protein Atlas


--------------------------------------------------
7 January 2018

Access file from JavaScript in same directory...
https://codepen.io/KryptoniteDove/post/load-json-file-locally-using-pure-javascript

----------
Progress

Adjusted styles of views in control panel.

Changed activation of control's views to allow multiple views to be active simultaneously.

Established persistence of layout in visual representation of network's topology.
Created a new state variable to determine whether the network's topology is novel and requires new creation of layout.
Now the TopologyView only redraws the network from scratch when it needs to.

Changed model and actions extensively to load information about metabolic entities and sets and initialize application automatically on start up.

--------------------------------------------------
5 January 2018

----------
Plan

Reset state variable of whether to draw network with each change to state that changes the network.

Topology View
Make tips position themselves according to their proximity to edges of view.

Load information for application's default state automatically upon initiation of the application.
Preserve the ability to save and load custom states of the application.

Restore buttons in each control view need to restore only aspects of that view.

Determine priority candidate reaction in Candidacy procedure in the same way that I do in the consensus procedure.

--------------------------------------------------
4 January 2018

----------
Plan

Implement topology view.
Draw network's elements in topology view.
Complete summaries for tips for nodes for metabolites and reactions.

Determine priority candidate reaction in Candidacy procedure in the same way that I do in the consensus procedure.

Load information for application's default state automatically upon initiation of the application.
Preserve the ability to save and load custom states of the application.

Restore buttons in each control view need to restore only aspects of that view.

Organize styles of control view.

Support multiple active views within control view.
Consider using an array for state's variable for active views.

--------------------------------------------------
3 January 2018

----------
Progress

I wrote function "Evaluation.summarizeMetaboliteReactionsParticipation" to summarize information about all reactions in which a single metabolite participates.

I also wrote functions "General.convertRecordsStringTabSeparateTable" and "General.saveString" to export information to text files with tab separation.
I introduced an export button to export information about all entities, reactions and metabolites, that pass filters from the set menu.
I export this information in a text file with tab-separate-values (tsv).

I implemented a table summary for the tool tip for nodes for metabolites.

----------
Message to Casey Hughes

"
Hi Casey,

Thanks for our chat today! You gave me some great ideas for my application.

After we talked I wrote a custom procedure to summarize L-cysteine's participation in reactions. It has 82 reactions in my model, a derivation of Recon 2.2. Here are details about the information for each reaction.

name (name of reaction)
reactants (names of metabolites that participate in reaction as reactants)
products (names of metabolites that participate in reaction as products)
reversibility (whether reaction is reversible)
conversion (whether reaction catalyzes chemical conversion between reactants and products)
transport (whether reaction transports any metabolites between compartments)
dispersal (whether reaction involves participation from metabolites in multiple compartments)
genes (identifiers of genes in HUGO Gene Nomenclature Committee, https://www.genenames.org/)
processes (names of metabolic processes or pathways in which reaction has a role)
compartments (names of cellular compartments in which L-cysteine participates in reaction)

The attachment is an export of this information in a text file with tab separation, thanks to a new converter I wrote today. It should be simple to import the information into a spreadsheet program like Microsoft Excel. Hopefully the information will be more convenient for you in this format.

I hope this information helps. Please let me know if you have any questions, problems, or suggestions. I plan to complete a prototype of the application soon that will hopefully enable you to access this sort of information conveniently.

Ciao,

Cameron
"

----------

    // "L-cysteine"

    var summary = Evaluation.summarizeMetaboliteReactionsParticipation({
      metaboliteIdentifier: "cys_L",
      reactions: state.reactions,
      metabolites: state.metabolites,
      reactionsSets: state.totalReactionsSets,
      metabolitesSets: state.totalMetabolitesSets,
      compartments: state.compartments,
      processes: state.processes
    });
    console.log(summary);
    var summaryString = General.convertRecordsStringTabSeparateTable(summary);
    General.saveString("cysteine_reactions.txt", summaryString);

----------
Meet with Casey Hughes

For his research project, Casey needs to know information about all reactions in which cysteine participates, especially in the cytosol.
He prefers to have this information in a list or table-like format.
If this information is exportable, then he can explore and sort it himself in a program such as Microsoft Excel.

----------
Plan

Load information for application's default state automatically upon initiation of the application.
Preserve the ability to save and load custom states of the application.

Introduce functionality to export information about all entities, reactions and metabolites, that pass filters from the set menu.
Export this information in a common, convenient format for users, such as comma-separate-values (csv) or tab-separate-values (tsv).
Format tsv might be preferrable since reactions participate in multiple compartments and processes.
These lists of compartments and processes have commas within them.

Windows line ending is "\r\n".
Linux line ending is "\n".

Implement topology view.
Draw network's elements in topology view.
Complete summaries for tips for nodes for metabolites and reactions.

Restore buttons in each control view need to restore only aspects of that view.

Organize styles of control view.

Support multiple active views within control view.
Consider using an array for state's variable for active views.

--------------------------------------------------
2 January 2018

----------
Plan

Implement topology view.
Draw network's elements in topology view.
Complete summaries for tips for nodes for metabolites and reactions.

Restore buttons in each control view need to restore only aspects of that view.

Organize styles of control view.

Support multiple active views within control view.
Consider using an array for state's variable for active views.

--------------------------------------------------
1 January 2018

----------
Plan

Implement summary and topology views.
Give brief summary about network's elements in summary view.
Give button in summary view to draw network.
Draw network's elements in topology view.

Restore buttons in each control view need to restore only aspects of that view.

Organize styles of control view.

Support multiple active views within control view.
Consider using an array for state's variable for active views.

--------------------------------------------------
29 December 2017

----------
Plan

I need to support multiple active views within the control view.
Consider using an array for active views instead of individual variables.

I need to implement the summary and topology views.
I need to draw the network's elements.

I need to organize the styles for the control view, the tabs, panels, and summary menus.
Make the views look orderly and aesthetic.

----------
Progress

I condensed code for menu views.
I organized views within control view.

----------
Control for representation of application's state in interface's views

The application's state variables change with interaction.
The application's interface needs to respond to these changes to represent the application's state appropriately.
There needs to be control between the application's state and the interface's views.
The purpose of the Model is to provide this control and to organize and separate this functionality from the rest of the application.
The goal is separation and specialization of interests for modularity.

Options to control representations in interface's views...
1. Always create every view but only display (display: none) those views that are both relevant and active.
The problem with this option is that render is expensive so excessive renders are inefficient.
2. Create all views and let the views themselves determine whether they are both relevant and active.
The problem with this option is that the control of representation scatters within all the various views.
There is not good separation of interests.
3. Create all relevant views and let the views themselves determine whether they are active.
The problem with this option is the messy mix of functionality between the Model and the View.
4. Control all high-level representation, such as which views are both relevant and active, in the Model.
Views create and control themselves whenever they receive the command to do so.

--------------------------------------------------
28 December 2017

----------
Browser Support

The initial procedure to clean and extract information from Recon 2.2 and initialize state variables takes a few minutes.

Mozilla's FireFox browser throws errors during this procedure.

https://support.mozilla.org/en-US/questions/1138132
https://support.mozilla.org/en-US/kb/warning-unresponsive-script

It is necessary to configure FireFox to allow scripts to run for more time.
The default allowance is 10 seconds.
The procedure requires about 2.5 minutes.

----------
Progress

I implemented the procedure to define network's elements within arrays for metabolites' nodes, reactions' nodes, and links, respectively.

This procedure with arrays is very expensive and slow because it is necessary to check the collection regularly to avoid creating redundant nodes, especially for metabolites.
The procedure with arrays requires 120.336 seconds for the entire network with compartmentalization.

Change the procedure to collect network's elements within objects instead of arrays.
It will be simple and convenient to extract information from the objects into arrays for creation of elements.

I changed the procedure to collect network's elements within objects instead of arrays.
The procedure with objects requires 0.847 seconds for the entire network with compartmentalization.

--------------------------------------------------
27 December 2017

----------
Plan

Define network's elements according to context, candidates, and simplifications.
Complete the implementation of procedure to define network's elements.

Display a summary of network, counts of its nodes and links.
Require user to select button to draw network.

--------------------------------------------------
23 December 2017

----------
Plan

Implement controls for simplifications within candidates' summaries.

Define network's elements according to context, candidates, and simplifications.

Display network unless it is too large.

--------------------------------------------------
21 December 2017

----------
Plan

Complete implementation of procedures and interfaces for sets' filters and candidates' simplifications.
Define network's elements.
Implement procedure and interface for proximity traversal.

Implement algorithms for shortest paths and small, inclusive subnetworks.

Also, consider including more information about metabolites and reactions from databases.
Do not worry too much about maintaining proximity to Recon 2.2.

----------
Meet with Jared P Rutter and Kevin G Hicks

Jared and Kevin recommended that I prioritize specific functions of the application for use by investigators of metabolism.

User will begin with a list of a single or multiple target entities, either metabolites or enzymes.
User will need to match target entities to entities within the metabolic network.
Tool needs to determine minimal subnetwork that contains and connects by reasonably short paths all targets.
Alternatively, tool needs to determine proximity or ego subnetworks around a single target.
Tool needs to represent this subnetwork visually.
Tool needs to represent sets, compartments and/or processes, on this subnetwork for context.
User needs to narrow this subnetwork futher by filters by compartments or processes.
Tool needs to represent experimental measurements visually on the subnetwork.
User needs to recognize clusters and relations from this visual representation of the network.
For example, many metabolites might accumulate in a single compartment.
User needs to generate hypotheses.
User might need to export summaries of information about entities in the subnetwork.

Initial or default representation of the metabolic network should ignore compartmentalization for simplicity.
Users will likely tend to want information that is not specific to compartmental versions of metabolites.

It would be neat if the tool could algorithmically and statistically recognize clusters in the network on the basis of trends in experimental measurements.

Representation of flux in the metabolic network is impractical.
Flux is condition dependent, so the user would need her or his own experimental data about flux anyway.

--------------------------------------------------
20 December 2017

----------
Progress

Complete scales in sets' menus.

--------------------------------------------------
14 December 2017

----------
Progress

Create state variables "setsSearch" and "candidatesSearch".
These variables will store strings from text input search menus.
Apply the "filterSetsSummaries" with every preparation of setsSummary.
That way any current search strings will apply with updates to state.
It will also be necessary to assign the values of the text input search menus from the respective state variable.
If the state variables are empty "", then display the place holder message.

Implement very similar strategy for the candidatesSummaries.

--------------------------------------------------
13 December 2017

----------
Progress

Complete implementation of sort procedures for sets' summaries and candidates' summaries.

Complete implementation of actions to change sort specifications for sets' summaries and candidates' summaries.

Implement novel method to filter summaries by strings in search text fields.
Include novel search tools for sets' summaries and candidates' summaries.

Create menus for candidates' summaries.

Define and represent network's elements from candidate entities.

----------
Meet with Alexander Lex

Develop a custom search method.
Typing the name of an item will dynamically filter the items in the table.
Use a simple text field.
As the field changes, filter just the setsSummary to include only those items whose name includes the string from the text field.
This strategy will make it simpler to access summaries within the table, especially for tables with many candidates.
Use this strategy both for the sets menus and for the candidates menus.
Treat the search's results as a selection rather than a filter.
Store the search string in a state attribute.

Implement the definition and representation of network's elements as soon as possible.

----------
Summaries for candidate entities

candidatesSummaries
-metabolites
--array of records
---record
----entities: "metabolites"
----count (of candidate reactions in which participates)
----maximum (for bars' scale)
----identifier (of candidate metabolite... candidate metabolite needs name)
-reactions
--array of records
---record
----entities: "reactions"
----count (of candidate metabolites that participate)
----maximum (for bars' scale)
----identifier (of candidate reaction... candidate reaction needs name)

Sort candidatesSummaries by either count or name.
Also create state variable for candidatesSorts.

--------------------------------------------------
12 December 2017

----------
Progress

Implement a novel state's attribute to organize and sort information about candidate entities.

Implement a table for candidate metabolites and another table for candidate reactions.
Give each row the name of the entity, its degree, and controls for its simplification.

I implemented the set view.
Functionality of the view includes selection of type of entities, selection of filter, restore, searchable list of sets, sortable summaries of sets by name or cardinalities, and selection of sets for filters.

closes #76, closes #73, closes #71, closes #70, 

--------------------------------------------------
10 December 2017

----------
Progress

Prepare an organization of candidate entities within an array.
This structure will be necessary for sorts.
Follow the pattern of the setsCardinalities and setsSummary.

--------------------------------------------------
8 December 2017

----------
Progress

The application data are in order.
The application's actions to manipulate data are in order.

Develop the application's interface to filter and simplify entities.

----------
Actions

Complete implementation of procedure for candidate entities.
Include this procedure in appropriate actions.

Restore procedures for all interactions with the sets' summary.
Manage the split between sets' cardinalities and sets' summaries.

initializeApplicationTotalState
-source
-entities
-sets
-totalEntitiesSets
-setsFilters
-currentEntitiesSets
-setsEntities
-setsFilter
-setsCardinalities
-setsSorts
-setsSummaries
-context
-candidateEntities

restoreApplicationInitialState
-setsFilters
-currentEntitiesSets
-setsEntities
-setsFilter
-setsCardinalities
-setsSorts
-setsSummaries
-context
-candidateEntities

changeSetsFilters
-setsFilters
-currentEntitiesSets
-setsCardinalities
-setsSummaries
-candidateEntities

changeSetsEntities
-setsEntities
-setsCardinalities
-setsSummaries

changeSetsFilter
-setsFilter
-setsCardinalities
-setsSummaries

changeSetsSorts
-setsSorts
-setsSummaries

changeCompartmentalization
-context
-candidateEntities

changeSimplification
-context

--------------------------------------------------
5 December 2017

----------
Progress

Implement the action to change specifications to sort sets' summaries.

----------
Technical terminology

A record is an object within an array.
An entry is an object or any key-value pair within an object.

----------
Data Structure

Consider the most efficient way to organize, store, and access information relevant to the sets' menu.

--------------------------------------------------
4 December 2017

----------
Meeting with Jared P Rutter and Alexander Lex

30 October 2017
-previous meeting with Jared P Rutter and Alexander Lex

6 November 2017
-meeting with thesis committee
-feedback from trials with prospective users

Plan
-prototype
-trials with prospective users

----------
Goals by 8 January 2018

1. move sets menu to side panel
-table
-column for set's name
-column for set's cardinality with bars and scale
-scrollable
-search menus
-sortable by cardinality or by alphabetical name
-selections control filters on entities

2. include table of candidate entities (metabolites and reactions)
-entity name
-entity degree with constraint of simplification (ie how many candidate reactions for each metabolite etc)
-entity simplification by replication or omission (replication only applies to metabolites)

3. include visual representation of network
-filters and simplifications control definition of network's elements
-represent network's elements according to simplifications

4. improve usability
-color scheme with light background
-data management and persistence of user's selections (raw data ~ 3 MB... clean and extraction of raw data is slow > 1 minute... clean extracted data ~ 10 MB... maybe use URL settings for persistence instead/in addition to downloadable file)
-aesthetics
-TBD...

5. summarize filters and current selection(s)... low priority right now...
-in main panel if network too large to draw automatically
-information about counts of entities in current selection? ... possibly redundant with entities table
-override button to draw anyway (drawing large networks can require up to 15 minutes)

6. select data sets for development and demonstration
-coordinate data for metabolites, proteins, and transcripts
-evaluate identifier mapping
-wrangle data separately, maybe in Python

7. include custom data in application... maybe to preliminary extent
-import data from file
-represent data in table
-user can select between multiple quantities to represent on the network
-only represent one set of values at a time for each entity or node type (metabolites or reactions)

8. feedback from users/application on real data... be thinking about it at this point

9. opportunities for post-doctoral work
-watch for near-term applications
-search for individual teams to which to apply

----------
Goals beyond 8 January 2018

1. aggregation of network's elements by sets?

2. publication March 2018

--------------------------------------------------
2 December 2017

----------
State View

The restore button needs to call a single action.

That single action needs to evaluate the application's state and perform the appropriate action.

1. clean raw model
2. extract information from clean model
3. restore application to a previous state

I also need some sort of flag to indicate whether the model is raw or clean.

--------------------------------------------------
22 November 2017

----------
Candidacy

I am in the process of reorganizing the procedure to collect candidate entities and implicit simplifications.

I currently need to update the Candidacy.collectCandidateReactionsMetabolites() function.
I need to make it convenient to separate the collection of implicit simplifications for actions that only require changes to simplifications.

--------------------------------------------------
21 November 2017

----------
Candidate Entities

I completed implementation of procedures to create candidate reactions and candidate metabolites.
Of special interest is the interdependence of reactions and metabolites for their respective candidacies.
Both reactions and metabolites can inherit simplification by dependency on their metabolites or reactions respectively.

I confirmed that the procedure for inheritance of simplification by dependency works both for reactions and metabolites.

Metabolite "agm_m" depends on reactions "AGMTm" and "ARGDCm".

Reactions "ACS", "ADK1", "ADPT", "COAtg" and others depend on metabolites "coa_c", "accoa_c", "amp_c", "ppi_c", "atp_c", and "ac_c".

--------------------------------------------------
8 November 2017

----------
Meet with Alexander Lex

Alex recommends that I pursue the goal to implement a functional prototype of the application with interface as soon as possible.
Once a prototype is available, Alex recommends that I consult with several prospective users of the tool.
Alex recommends that I prepare some type of formal structure for an interview.
I will plan about 30 minutes of the meeting to discuss use cases and tasks with the user.
I will plan about 30 minutes of the meeting to allow the user to try the application.
I will record notes on suggestions.

--------------------------------------------------
5 November 2017

----------
Computational performance of array versus object

Creation of records (keys, values) within an object might be less efficient than creation of records within an array.

Iteration on an object requires a pattern using the object's keys.
This code transfers an object's values to an array.
var keys = Object.keys(object);
var array = keys.map(function (key) {
  return object[key];
});

Iteration on records of an object might be less efficient than iteration on records of an array.
Filtraton of reactions' sets required 1 second with records in arrays, but the procedure required 38 seconds with records in objects.

Access to specific records of an object is much more efficient that access to specific records of an array.
Access to records of an array requires sequential, iterative search by a method such as the array's method for find.
Storing information in records within an object is more efficient if it is necessary to access records from the object frequently.
Filtration of metabolites' sets, which involves many accesses of information about reactions, required 19 seconds with records in arrays, but the procedure required 5 seconds with records in objects.

----------
Computational performance of mutation versus copy

In my application, I have tried to copy information rather than mutate it as much as is practical.
I mutate values of attributes that define the application's state.
Otherwise I copy values of variables.
I use pure functions that avoid side effects.

Copy is computationally much more expensive than mutation.

I learned a valuable lesson today.
I misunderstood the most effective use of JavaScript's array methods, such as map, filter, and reduce.
I use these methods extensively to avoid mutation.
Previously I copied values that I returned from array methods to avoid mutation.
I learned that these copies are unnecessary and extremely inefficient.

Previous pattern...

function collectRecords(records) {
  // Parameter "records" is an array of objects.
  // Collect records that pass some filter.
  var recordsIdentifiers = Object.keys(records);
  return recordsIdentifiers.reduce(function (collection, recordIdentifier) {
    var record = records[recordIdentifier];
    if (filter(record)) {
      // Record passes filter.
      // Create new record.
      var newRecord = {
        [record.identifier]: record
      };
      // Include record in collection.
      return Object.assign({}, collection, newRecord);
    } else {
      // Record does not pass filter.
      // Omit record from collection.
      return collection;
    }
  }, {});
}

JavaScript's array methods avoid mutation inherently such that it is unnecessary to copy values.

Current pattern...

function collectRecords(records) {
  // Parameter "records" is an array of objects.
  // Collect records that pass some filter.
  var recordsIdentifiers = Object.keys(records);
  return recordsIdentifiers.reduce(function (collection, recordIdentifier) {
    var record = records[recordIdentifier];
    if (filter(record)) {
      // Record passes filter.
      // Create new record.
      var newRecord = {
        [record.identifier]: record
      };
      // Include record in collection.
      return Object.assign(collection, newRecord);
      // Same as...
      //return collection[record.identifier] = record;
    } else {
      // Record does not pass filter.
      // Omit record from collection.
      return collection;
    }
  }, {});
}

JavaScript's Object.assign copies properties from source objects to the target object.
Properties in source objects replace properties in target object with same key.

This statement copies properties from source object to a new target object.
Object.assign({}, object);

These statements both include new properties from the source object in the target object.
Object.assign(collection, record);
collection[record.identifier] = record;

A helpful example of using mutation within an array's reduce method comes from the documentation for this method.

"
var names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];

var countedNames = names.reduce(function (allNames, name) { 
  if (name in allNames) {
    allNames[name]++;
  }
  else {
    allNames[name] = 1;
  }
  return allNames;
}, {});
// countedNames is:
// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }
"
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce?v=a

Using unnecessary copies within an array's reduce method, my procedure to filter reactions' and metabolites' sets required about 43 seconds.
Using mutations within an array's reduce method, my procedure to filter reactions' and metabolites' sets required about 0.25 seconds.

--------------------------------------------------
4 November 2017

----------
Optimization of efficiency of procedure for filtration

Accessing records within arrays involves expensive iteration.
Accessing records within objects involves simple look-up.

Metabolites inherit values of attributes from the reactions in which they participate.
The procedure for filtration of metabolites' sets requires very many repetitive accesses of information about reactions' sets.

Current information about reactions' s sets is in arrays, so these accesses are very expensive.

The current procedure for filtration of metabolites' sets by the cytosolic compartment requires about 18-20 seconds.

Organize information about entities' sets within objects to make access more efficient.

--------------------------------------------------
1 November 2017

----------
On 30 October 2017 I met with Jared P Rutter and Alexander Lex and discussed the project.
We considered goals for the project.

----------
Goals by 4 December 2017...

1. table of individual entities (metabolites and reactions)
-entity name
-entity degree (ie how many reactions for each metabolite etc)
-entity degree independent of selections for simplification (needs further consideration...)
-entity simplification by replication or omission (replication only applies to metabolites)
-selections for simplification control representation of network

2. move sets menu to side panel
-scrollable (and searchable?) lists of sets of entities
-labels for names of processes or compartments
-bars to represent sets' cardinalities
-sortable by cardinality or by alphabetical name
-selections control filters on entities, affecting entities table and network (downstream selections/filters)

3. summary of filters and current selection(s) ... ?
-in main panel if network too large to draw automatically
-information about counts of entities in current selection? ... possibly redundant with entities table
-override button to draw anyway (drawing large networks can require up to 15 minutes)

4. future ambitions
-get ideas/plans for post-doctoral work

----------
Goals beyond 4 December 2017...

1. import/representation of custom user's data

2. aggregation of network's elements by sets

3. HCI usability issues (originally in goals for 4 December, but I'm not sure if they'll all make it by then, especially the TBD)
-light background (dark for now for the sake of presentations... changing soon)
-data management and persistence of user's selections (raw data ~ 3 MB... clean and extraction of raw data is slow > 2 minutes... clean extracted data ~ 10 MB... maybe use URL settings for persistence instead/in addition to downloadable file)
-aesthetics
-TBD...

4. feedback from users/application on real data
-we could do our own case demonstration on some public data set

5. publication March 2018

--------------------------------------------------
24 October 2017

----------
Interdependence of Entities' Relevance

Reactions and metabolites derive their relevance from each other.
Selections of metabolites for simplification influence the relevance of dependent reactions and vice versa.
I need to preserve accessibility of entities to change these selections.
Selection of a metabolite for simplification will also select any dependent reactions for simplification.
Canceling a metabolite's selection for simplification will also cancel the simplification of any dependent reactions.
Maintenance of accurate references for relations between entities will be important.

----------
Entities' Contextual Relevance

A major task of the application is to select entities (metabolites and reactions) according to specific interest.
The application supports multiple layers for this selection of entities.

1. Filtration by values of attributes
Reactions and metabolites associate with specific values of attributes for processes and compartments.
Selections of values of these attributes inform filters.

2. Simplfication of individual entities
Entities that pass filters and maintain relevance in context are accessible for selections for simplification.
Simplification can involve omission from the network for reactions, or either omission or replication for metabolites.
While selections for simplification influence entities' relevance for representation in the network, these selections do not omit any entities from accessibility for further selections.

3. Topological traversal of network


--------------------------------------------------
19 October 2017

----------
Data Organization

Copying information is computationally expensive.
The process of copying information by value (deep copy) rather than by reference is itself expensive.
Also replicate information is inefficient in memory and is also difficult to maintain.
Replicate information is comparable to replicate code in its difficulty to maintain.

In an application, avoid replicate code and replicate information!

Separate different types of information.
It is beneficial to avoid excessive copy or mutation of data.
Separating different types of information can make it possible to change only specific types of information as the application changes.

--------------------------------------------------
18 October 2017

----------
Meet with Alexander Lex

Alex made several recommendations to improve the interface.

1. Sets' Summary Menu
The horizontal, stacked bar chart gives a nice representation of distribution between sets for processes and compartments.
The count of processes is a problem.
In the stacked bar chart, many processes have bars that are too small to accommodate informative labels.
A potential solution is to represent sets' cardinalities in horizontal bars that are not stacked.
Use a vertical list of bars and labels within a vertically scrollable window.
Sort the list of sets by cardinality.
Create separate, scrollable windows for processes and compartments.
Place these components of the Sets' Summary Menu within a collapsible panel on the left of the screen.
This same collapsible panel can also contain the controls for compartmentalization, replication, omission, and topological traversals.
Collapsing the side panel will give more room for representing the network.

2. Interactivity in Sets' Summary Menu
Even without activating the filter option, a selection of a process or compartment should somehow highlight all compartments or processes respectively that would be in the filtered selection.

3. Live Feedback on Network
Give some sort of live feedback to the user on the selection's influence on the network.
If the network is too large to draw interactively, show some sort of report instead of the topology view.
This report should specify the counts of nodes and links or something.
This view should also have an over-ride button to go ahead and draw the network.

4. Light Color Scheme
A color scheme with a light background will be better for printing.

5. Controls for Simplification
Implement controls for simplification of individual metabolites and reactions.

--------------------------------------------------
17 October 2017

----------
Hierarchies in filters and selections of entities

Data: "metabolites", "reactions" ... complete information about all entities

Values of attributes assign entities to sets.
Selections of sets filter entities by their values of attributes.

Data: "currentMetabolites", "currentReactions" ... complete information about entities that pass filters

Entities that pass these filters by attributes are available for individual representation.
Selections can designate individual entities for omission from the network.

Data: "currentMetabolites", "currentReactions" ... complete information about entities that pass filters along with designations for omission from network ("omission" attribute for each entity)

The network only represents entities that both pass filters by attributes and pass omission.
The network also represents nodes for metabolites according to their designation for replication.

Data: "networkNodes", "networkLinks"

Topological traversals of the network (ignoring omissions) select portions of the network for final representation.
Topological traversal depends on replication and omission of nodes within the network.

Data: "subNetworkNodes", "subNetworkLinks"

--------------------------------------------------
9 October 2017

----------

An indication of compartment for metabolites in multi-compartmental networks will be nice.

--------------------------------------------------
4 October 2017

----------
Procedure Performance

I tested the process' duration of the procedure for filtration of entities by their values of attributes.
I intentionally applied an empty set of filters against all entities, requiring iterative collection of all entities and their attributes.
These parameters require a much more expensive procedure than is likely to occur in normal interactive use.
Normal interactive use is likely to involve a few filters, reducing the counts of entities to collect.
I tested this duration with several variations on the procedure.

Trial 1
copy method: recursive agnostic
metabolite attribute method: original method with excessive iterations to collect unique values
process' duration: 304003 milliseconds

Trial 2
copy method: conversion to JSON
metabolite attribute method: original method with excessive iterations to collect unique values
process' duration: 230385 milliseconds

Trial 3
copy method: conversion to JSON
metabolite attribute method: method with minimal iterations to collect unique values
process' duration: 42201 milliseconds

Image screen_2017-10-04_1.png captures the output to the console from these trials.

Results of the trials indicate that the method of conversion to JavaScript Object Notation (JSON) format for copy is the most efficient.
Results of the trials also indicate that elimination of unnecessary iterations to collect unique values improves efficiency.

--------------------------------------------------
3 October 2017

----------
Plan, Improve Performance

Procedure to copy information about metabolic entities is computationally expensive.
Use optimal methods to copy information about metabolic entities.
Procedures of special interest include filtration of entities by selections in sets' summary menu.
Procedures of special interest include also definition of network's elements.

----------
Algorithms to Copy Values

The proper methods to copy values depends on their types and mutability.
Evaluating a value's type is computationally expensive.
Evaluating conditional expressions is also computationally expensive.

Algorithms to copy values of known types can be efficient.
Algorithms to copy values of unkown types are inefficient.
If values have unknown type, then the method by conversion to JavaScript Object Notation is probably the most efficient.

Experiment

I measured the durations of processes to copy information about metabolites and reactions.

1.
Method: conversion to JSON format
Duration (milliseconds): 514, 358, 359

2.
Method: full recursion, agnostic of values' types, without assumption of pattern
Duration (milliseconds): 41835, 42180, 42800

3.
Method: full recursion, agnostic of values' types, with assumption of pattern
Duration (milliseconds): 41472, 42217, 42465

4.
Method: specific to top-level structure, agnostic of values' types, without assumption of pattern
Duration (milliseconds): 42528, 41903, 42004

5.
Method: specific to top-level structure, agnostic of values' types, with assumption of pattern
Duration (milliseconds): 41723, 42729, 42419

6.
Method: specific to top-level structure, specific to types in entities' records
Duration (milliseconds): 41944, 42352, 42326

--------------------------------------------------
2 October 2017

----------
Efficiency of procedure to copy records for entities

1. Custom
Iterate on records for all entities.
For each entity's record, consider the types of all attributes.
Copy the attributes' records according to their types.
Process duration: 42407 milliseconds

2. JSON
Convert object containing records for all entities to JavaScript Object Notation (JSON).
Parse the information from JSON.
Process duration: 363 milliseconds.

----------
Efficiency of Procedure to Filter Entites and their Values of Attributes

The procedure to determine sets' cardinalities and prepare a summary of sets does not require much resource.
The latency time for this procedure is about 1 second.
The action method "Action.determineEntitiesSetsCardinalititesAttributes" controls this procedure.

The procedure to filter entities and their values of attributes does require much resource.
The latency time for this procedure is about 45 seconds.
The action method "Action.selectSetsValue" controls this procedure.
Within this procedure, the process of copying records for metabolites and reactions requires much resource.
The latency time for this process is about 30-45 seconds.

Using JSON.parse(JSON.stringify(data)) might be a more efficient method to copy records for entities and their values of attributes.
Alternatively, perhaps I could copy records for entities within the procedure for filtering them and their attributes.
The idea is to minimize the count of iterations.
Perform the entire procedure within as few iterations as possible.

--------------------------------------------------
27 September 2017

----------
Capability of Metabolic Models

https://www.ncbi.nlm.nih.gov/pubmed/28878380
"An in-silico approach to predict and exploit synthetic lethality in cancer metabolism"
Nature Communications
2017

https://www.ncbi.nlm.nih.gov/pubmed/28254760
"Personal model-assisted identification of NAD+ and glutathione metabolism as intervention target in NAFLD"
Mol Sys Biol
2017

https://www.ncbi.nlm.nih.gov/pubmed/27239044
"In Silico Modeling of Liver Metabolism in a Human Disease Reveals a Key Enzyme for Histidine and Histamine Homeostasis"
Cell Reports
2016

https://www.ncbi.nlm.nih.gov/pubmed/26813959
"Generation of 2,000 breast cancer metabolic landscapes reveals a poor prognosis group with active serotonin production"
Science Reports
2016

https://www.ncbi.nlm.nih.gov/pubmed/25937284
"Proteome- and transcriptome-driven reconstruction of the human myocyte metabolic network and its use for identification of markers for diabetes"
Cell Reports
2015

https://www.ncbi.nlm.nih.gov/pubmed/26434764
"Extensive weight loss reveals distinct gene expression changes in human subcutaneous and visceral adipose tissue"
Science Reports
2015

----------
Modularity and Continuity in Metabolic Networks

https://www.ncbi.nlm.nih.gov/pubmed/28912490
"The interdependent network of gene regulation and metabolism is robust where it needs to be"
Nature Communications
2017
Relations between metabolic network and genetic regulatory network.

https://www.ncbi.nlm.nih.gov/pubmed/28751865
"Breakdown of Modularity in Complex Networks"
Frontiers in Physiology
2017
Modularity is important in evolution of metabolism.
In more complex systems, there is an efficient benefit to losing modularity and favoring cooperativity.

https://www.ncbi.nlm.nih.gov/pubmed/28469242
"Glassy nature of hierarchical organizations"
Science Reports
2017

https://www.ncbi.nlm.nih.gov/pubmed/27958395
"Multi-resolution community detection in massive networks"
Science Reports
2016

https://www.ncbi.nlm.nih.gov/pubmed/12202830
"Hierarchical organization of modularity in metabolic networks"
Science
2002
This article describes modularity in metabolic networks.
https://www.ncbi.nlm.nih.gov/pubmed?linkname=pubmed_pubmed_citedin&from_uid=12202830
Many relevant articles cite this article.

----------
Small World Metabolic Networks

https://www.ncbi.nlm.nih.gov/pubmed/14735121
"Network biology: understanding the cell's functional organization"
Nature Reviews Genetics
2004

https://www.ncbi.nlm.nih.gov/pubmed/11522199
"The small world inside large metabolic networks"
Proceedings in Biological Science
2001

https://www.ncbi.nlm.nih.gov/pubmed/11034217
"The large-scale organization of metabolic networks"
Nature
2000

----------
Relations between Multi-Omics Entities

https://www.ncbi.nlm.nih.gov/pubmed/28476144
"Multi-omics approaches to disease"
Genome Biology
2017

--------------------------------------------------
24 September 2017

----------
Metabolite Degrees

On 23 September 2017 I considered metabolite's participation in reactions in all compartments.
I did not distinguish between compartments.
For the purpose of simplification of nodes for metabolites, I should probably be able to determine degrees of metabolites' nodes in a compartmental context.
I will need to consider how to store this information.
I could potentially include filters against metabolites' reactions in the procedure for definition of network's elements.

Yes.
I think that a metabolite's record, whether or not for a node, should have a reference to the reactions in which it participates in its current context.
Records for metabolites' nodes should reference their reactions in the current definition of the network.
I will then use the information from these records to determine metabolites' degrees in their current contexts.

--------------------------------------------------
23 September 2017

----------
Metabolite Degrees

The model of human metabolism includes records for 2652 unique metabolites.
I created summary records of metabolites with information about their identifiers, names, and counts of reactions in which they participate.
I also calculated frequencies of metabolites with each count of reactions.
I sorted these records by the counts of reactions.
I saved this information in JSON format.
I converted this information from JSON format to CSV format using an online tool (https://json-csv.com/).
I used Microsoft Excel to draw charts representing the distribution of metabolites' participation in reactions.

--------------------------------------------------
22 September 2017

----------
Visual Representations of the Metabolic Network

screen_2017-09-22_3.png
Reconstruction 2.2 of human metabolism
Compartmental representation of network
5322 metabolites
7007 reactions
12329 nodes
42932 links
alpha = 1
alphaMinimum = 0.001
alphaDecay = 0.005
velocityDecay = 0.2
simulation iterations = 1379
nodeDimension = 1
linkDimension = 0.05

screen_2017-09-22_2.png
Reconstruction 2.2 of human metabolism
General representation of network
2626 metabolites
3417 reactions
6043 nodes
28671 links
alpha = 1
alphaMinimum = 0.001
alphaDecay = 0.005
velocityDecay = 0.2
simulation iterations = 1379
nodeDimension = 1
linkDimension = 0.05

screen_2017-09-22_1.png
Reconstruction 2.2 of human metabolism
General representation of network
2626 metabolites
3417 reactions
6043 nodes
28671 links
alpha = 1
alphaMinimum = 0.001
alphaDecay = 0.005
velocityDecay = 0.2
simulation iterations = 1379
nodeDimension = 1
linkDimension = 0.03

--------------------------------------------------
21 September 2017

----------
Visual Representations of the Metabolic Network

screen_2017-09-21_1.png
Reconstruction 2.2 of human metabolism
Compartmental representation of network
5322 metabolites
7007 reactions
12329 nodes
42932 links
alpha = 1
alphaMinimum = 0.001
alphaDecay = 0.005
velocityDecay = 0.2
simulation iterations = 1379
nodeDimension = 1
linkDimension = 0.03

screen_2017-09-21_2.png
Reconstruction 2.2 of human metabolism
General representation of network
2626 metabolites
3417 reactions
6043 nodes
28671 links
alpha = 1
alphaMinimum = 0.001
alphaDecay = 0.005
velocityDecay = 0.2
simulation iterations = 1379
nodeDimension = 3
linkDimension = 0.05

----------
Save Image in High Quality from SVG Graphics in Browser

http://nytimes.github.io/svg-crowbar/
https://bl.ocks.org/mbostock/6466603
http://techslides.com/save-svg-as-an-image

--------------------------------------------------
20 September 2017

----------
Nodes' Marks and Labels

I realized that the collision force avoids overlap between nodes.
As a result, occlusion of nodes' labels should not be a problem.
It would be an option to contain nodes' labels within the same layer as nodes' marks.

--------------------------------------------------
15 September 2017

----------
Nodes' Marks and Labels

https://stackoverflow.com/questions/11102795/d3-node-labeling
https://bl.ocks.org/mbostock/950642
http://bl.ocks.org/mbostock/1153292
Mike Bostock's reply to a question on Stack Overflow gives useful information about managing groups of marks and labels for nodes in a node-link diagram.
Placing nodes' marks and labels in separate groups can keep the labels in the plane above all marks.
Using groups for nodes is also convenient for using different types of marks for different types of nodes, dependent on nodes' data.

Contain visual representations of all nodes (marks for their entities and directions) within a group.
Contain annotations of all nodes (labels) within a separate group.
These groups will keep marks and labels in separate layers to prevent occlusion of lables by marks.

Group elements in scalable vector graphics (SVG) do not have direct attributes for position, x and y.
Group elements instead have transform attributes.
Transforms of position of a group element also apply to children of the group element.
Set positions of nodes' groups using a transform attribute.
Assign any shfits, such as for directional markers, using dx and dy attributes.

At least, I tink that transform attributes are necessary for positions of elements other than circles, ellipses, and text.
Is that correct?

--------------------------------------------------
15 September 2017

----------
Directional markers on reactions' nodes

----------
Directional markers on links' lines

I think that placing markers in the centers of lines will avoid occlusion behind reaction's nodes.
Links to reactions' nodes pass behind variable areas of the node dependent on angle.

Append polylines instead of lines.
Determine coordinates of points for polylines.
Attach marker to middle vertices of polylines.

https://stackoverflow.com/questions/15729856/display-an-arrow-head-in-the-middle-of-d3-force-layout-link
https://stackoverflow.com/questions/35083285/how-to-place-marker-head-in-the-middle-of-the-links

--------------------------------------------------
13 September 2017

----------
Plan

Organize TopologyView's function refineNodesLinksRepresentations.

Include arrows on links to indicate links' directionalities.
Format (color, width, pattern) links according to role.
Include indicators on reactions' nodes of directionality.

Position labels on nodes after positions are still.

--------------------------------------------------
8 September 2017

----------
Mean of Circular Quantities

Measurements of angles about an origin, 0-360 degrees, are circular quantities.
Calculation of means of circular quantities is problematic.

For example, the mean of 290 and 10 is 150; however, the mean angle between 290 degrees and 10 degrees is closer to 330 degrees.
Calculation of means of multiple angles is even more problematic.
For example, what is the mean of 10 degrees, 120 degrees, and 290 degrees?

It is possible to approximate the mean of multiple angles.
Calculate the points at which each angle's ray intersects the unit circle at a radius of 1 unit from the origin.
The reason to calculate points at a radius of 1 unit is to avoid any influences from differences in radius.
Otherwise, points at greater radii from the origin would dominate.
Calculate separately the means of x and y coordinates for all points.
If mean coordinates are 0, 0, then there is no mean.
Otherwise, find angle of point with mean coordinates.

In my situation, I will begin with multiple points with coordinates.
Coordinates in the Scalable Vector Graphics (SVG) element are different than the typical coordinate plane.
Convert points' coordinates to reasonable points on a coordinate plane.
Treat coordinates of central reaction's node as the origin.
Subtract all y-coordinates from the maximal y-coordinate to invert the y-axis.
Subtract the origin's coordinates from all other coordinates to set the origin to (0, 0) and all others to be relative to the origin.

Convert all of these coordinates to coordinates at a radius of 1 unit from the origin of the coordinate plane.
Calculate positive angles in either degrees (0-360) or radians (0-2pi) of each point.
Use atan2 function, and convert any negative values to appropriate positive values (if necessary).
Determine coordinates of points at which each angle's ray intersects with unit circle at radius of 1 unit from origin.
Use sine of angle for y-coordinate.
Use cosine of angle for x-coordinate.
Calculate means of x-coordinates.
There is no need to calculate means of y-coordinates or to calculate the angle of the point with mean coordinates.
If mean x-coordinate is positive, then prefer the right side.
If mean x-coordinate is negative, then prefer the left side.

The procedure to determine the optimal side of a reaction for one type of metabolite's role, either reactant or product, is clear.
How will I resolve conflicts between reactants and products?
What will I do if both reactants and products prefer the left side, for example?
Should I consider the extent to which reactants and products each prefer the side?

I will need to consider and assign sides of reactants and products together.
If reactants have no preference, then I will determine the preference from products.
If neither reactants nor products have a preference, then I will choose the default of reactants on left and products on right.
If both reactants and products prefer the same side, then I will give the side to the role with the stronger preference (greater absolute value of the x coordinate).

Functions

determineReactionSide

convertCoordinates
-accept coordinates for 1 point at a time
-accept coordinates of desired origin
-accept height of SVG element
-call invertOrdinate
-call shiftOrigin
-call Math.atan2
-call Math.sin
-call Math.cos
-call computeElementsMean

invertOrdinate
-accept coordinates for 1 point at a time
-accept height of SVG element

shiftOrigin
-accept coordinates for 1 point at a time
-accept coordinates of desired origin

References
https://en.wikipedia.org/wiki/Mean_of_circular_quantities
https://en.wikipedia.org/wiki/Atan2
https://math.stackexchange.com/questions/211074/calculate-average-angle-after-crossing-360-degrees

--------------------------------------------------
7 September 2017

----------
Determination of sides of reactions' nodes for attachment of links for reactants and products.

theta = arctan(y/x)

The arc tangent function will return 2 values.
1 value is for rotation in the positive direction.
1 value is for rotation in the negative direction.
Always take the positive value for the angle.
Convert the value from radians to degrees.

360 degrees = 2 * pi radians
180 degrees = pi radians
degrees = radians * (180 degrees / pi radians)

Use Math.atan2(y, x)

----------
Visualizations for Systems Biology
https://github.com/zakandrewking/escher/wiki/Systems-biology-visualizations

----------
MetDraw
www.metdraw.com

MetDraw accepts models in SBML format and then represents those models as networks.
MetDraw supports several customizable options, including replication of minor metabolites for each reaction.

MetDraw does not support dynamic querying or exploration of the metabolic network.
These queries could potentially happen with some other tool.
Queries by attributes or topological traversals could filter the model and return a subset of the model in SBML format.
MetDraw then draws the information from the SBML file.

----------
D3Flux

D3Flux is a tool that uses D3 to visualize flux networks from metabolic models in COBRApy.

https://pstjohn.github.io/Metabolic-Network-Visualization/
https://github.com/pstjohn/d3flux

----------
Orient Rotate Nodes in D3

https://stackoverflow.com/questions/30486614/d3-force-layout-how-to-dynamically-orient-teardrop-shaped-nodes

----------
Zoom Graph in D3

http://bl.ocks.org/TWiStErRob/b1c62730e01fe33baa2dea0d0aa29359
http://jsfiddle.net/Nivaldo/46nBm/

--------------------------------------------------
6 September 2017

----------
Determining Angles in Coordinate System by Trigonometry

http://www.dummies.com/education/math/trigonometry/use-coordinates-of-points-to-find-values-of-trigonometry-functions/
https://math.stackexchange.com/questions/1327253/how-do-we-find-out-angle-from-x-y-coordinates
http://www.montereyinstitute.org/courses/DevelopmentalMath/COURSE_TEXT2_RESOURCE/U19_L1_T3_text_final.html

----------
Progress

Preliminary custom visual representation of reactions in network's node-link diagram...
Reaction's representation is an elliptical node (eventually to have a label) at the center of a special, directional link.

Advantages:
-reaction directionality and reversibility
-distinction between reactants and products
-reaction position and orientation fit within layout

----------
D3 Force Layout with Multiple Foci
https://bl.ocks.org/mbostock/1021841
https://bl.ocks.org/mbostock/1804919

----------
D3 Append Different Types of Elements According to Data
D3's append method can accept a function that returns a type of SVG element according to the data.
It is necessary to use document.createElementNS() with a reference to an element in the www.w3.org name space.
    var dataNodesMarks = nodesMarksGroup
    .selectAll("circle, ellipse").data(self.nodesPositionRecords);
    dataNodesMarks.exit().remove();
    var novelNodesMarks = dataNodesMarks.enter().append(function (data) {
      // Append different types of markers for different types of entities.
      if (data.entity === "metabolite") {
        // Node is for a metabolite.
        return self
        .document.createElementNS("http://www.w3.org/2000/svg", "circle");
      } else if (data.entity === "reaction") {
        // Node is for a reaction.
        return self
        .document.createElementNS("http://www.w3.org/2000/svg", "ellipse");
      }
    });

--------------------------------------------------
5 September 2017

----------
Ideas for Presentation

Introduction

Metabolism
Metabolic Regulation
Metabolic Network
-Abstraction
-Reactions between metabolites
--Reactions involve genes, transcripts, proteins
-Compartments
-Pathways
Holistic Characteristics of Metabolic Network
-Small-World?
-Scale-Free?
-Modularity
-Implications for evolution
Modularity in Metabolic Network
-Prominent in simpler metabolisms?
-Necessary for evolution?
-Modular simplification
--Abstraction
---Sets of reactions
---Gene Set Enrichment Analysis
---Metabolite Set Enrichment Analysis
---Reduction in scale
--Representations
---Distinct pathways
---Examples
----Janet Lindsley's Map
----ReconMap 2017
----KEGG Atlas
Continuity in Metabolic Network
-Reality
-Prominent in complex metabolisms?
-Implications for evolution?
-Examples
--Human metabolic abnormalities across pathways
--Examples from Janet Lindsley (include these and acknowledge Janet)
--Metabolic perturbations in cancer
---Strong support for metabolic perspective across pathways
--Pervasive enzymatic inhibition by metabolites
-Challenge
--Scale of the network
--Show an example of an entire metabolic network for illustration
-Representations
--Requirement for computational methods and interactive exploration
--Examples
---Escher... a step in the right direction

Method

Recon 2.2 Model of Human Metabolism
-Information in the model

Tell a story
Create a line graph
Plot dates on the horizontal axis
Plot both commits and lines of code on the vertical axis
Acknowledge that lines of code do not necessarily increase linearly with changes to the application.
Changes to the application replace and even condense lines of code.
Maybe also plot the changes in from each commit?
Show progress for each prototype on the chart.

Prototype 1
-How many commits?
-How many lines of code?
-Manual curation, filtration, organization of data for Citrate Cycle
-Representation of metabolic network
-Simplification of network's interconnectivity (technical word?) by replication

Prototype 2
-How many commits?
-How many lines of code?
-Full-scale data from Recon 2.2
--Organization of data
--Extraction of information for network
--Filtration of data
-Show image of humongous proximity network around pyruvate
-Emphasize challenge of scale

Show XKCD comic about solving a domain problem with algorithms
Hope that people laugh

Prototype 3 (current)
-How many commits?
-How many lines of code?
-More organization, filtration, extraction of data
-Emphasize cool aspects
--Summary of full-scale data (sets' cardinalities)
--Filtration of entities by attributes
--Compartmental or general representation of network
--Simplification of custom metabolites (replication, omission) in network
--Topological traversal of network (at least proximity)
--Visual representation

Goals...

----------
Meet with Janet Lindsley

My original intention in meeting with Janet was to ask for examples of reactions with roles in multiple metabolic pathways.
Jared P Rutter advised me to consult with Janet about this subject.

A general subject of interest involves the definition of pathways in metabolism.
Metabolism is fairly cooperative and continuous.
Definitions of distinct pathways is difficult and risks being arbitrary.

In conceptualizing and understanding metabolism, there is a balance between principles of modularity and continuity or cooperativity.
Biological, metabolic networks have properties of modularity and continuity.
Evolution of complex networks seems to lose modularity in favor of efficiency or something.

Janet Shared with me a map of human metabolism that she helped produce along with a team at Stanford University.
This map of human metabolism is static and divides human metabolism into major pathways or modules.
The major goal of this representation of metabolism is educational and also to give an overview of metabolic processes.
Modular representations of metabolism in discreet pathways is conceptually simple.
These representations are especially useful for static representations.

There are benefits to both modular and continuous representations.
Continuous representations require computational methods and interactivity.

Janet shared some examples of correlation across pathways in human metabolism.

1. Carbamoyl Phosphate
Carbamoyl phosphate is part of the urea cycle that takes place in the mitochondrion.
Ornithine transcarbamoylase catalyzes a reaction with carbamoyl phosphate in the mitochondrion.
A deficiency in ornithine transcarbamoylase causes carbamoyl phosphate to accumulate in the cytosol.
In the cytosol, carbamoyl phosphate synthetase II catalyzes a reaction with carbamoyl phosphate as part of the Pyrimidine Synthesis Pathway.
The excess productivity of pyrimidine synthesis causes physiological problems.
I think the problem is a type of acidosis.

2. Steroid Hormone Synthesis
Steroid Hormone Synthesis pathway occurs in the adrenal gland and in the gonads.
Deficient activity in multiple enzymes (17 alpha hydroxylase, 21 hydroxylase, 11 beta hydroxylase) of Steroid Hormone Synthesis interfere with normal production in the adrenal gland.
The situation causes congenital adrenal hyperplasia and also causes morphological differences in the genitalia of females.
The condition is life-threatening, and infant screens check for the condition.

3. PRPP Synthetase
Phosphoribosyl Pyrophosphate (PRPP) Synthetase arguably has a role in both the Pentose Phosphate Pathway and in Purine Synthesis.
PRPP Synthetase's role in purine synthesis somehow relates to a disease condition of gout as a result of accumulation of uric acid.

4. Glucose-6-Phosphatase
Deficiency in Glucose-6-Phosphatase traps glucose-6-phosphate from gluconeogenesis in cells, interfering with glucose release from the liver into the blood stream.
The condition causes hypoglycemia.
Somehow the condition also causes elevation in uric acid.
An hypothesis is that accumulation of glucose-6-phosphate drives the Pentose Phosphate Pathway, which drives Nucleotide Synthesis specifically Purine Synthesis.
Degradation of Purines produces uric acid.

5. Folate Metabolism
Folate metabolism influences Nucleotide Metabolism and Amino Acid Metabolism.
Folate metabolism also relates somehow to Vitamin B12 Metabolism.

6. Gluconeogenesis from Fat
Eukaryotes such as Saccharomyces cerevisiae and even Caenorhabditis elegans can produce glucose from fat.
This process probably requires the Glyoxylate Cycle or Shunt.
It seems that it would be very beneficial for humans to be able to produce glucose from fat, but humans cannot.
Janet is curious how humans evolved the inability to produce glucose from fat.
The human brain requires glucose to survive, even though some parts of the brain can metabolize ketones.
Humans can produce some glucose from the glycerol backbone of triglycerides.
Fasting humans cannot produce glucose from fat.
Instead, humans must degrade muscle to produce glucose from amino acids.

----------
Pathway Annotation in Metabolic Networks

https://www.ncbi.nlm.nih.gov/pubmed/28751865
"Breakdown of Modularity in Complex Networks"
Frontiers in Physiology
2017
Modularity is important in evolution of metabolism.
In more complex systems, there is an efficient benefit to losing modularity and favoring cooperativity.

https://www.ncbi.nlm.nih.gov/pubmed/12202830
"Hierarchical organization of modularity in metabolic networks"
Science
2002
This article describes modularity in metabolic networks.
https://www.ncbi.nlm.nih.gov/pubmed?linkname=pubmed_pubmed_citedin&from_uid=12202830
Many relevant articles cite this article.

https://www.ncbi.nlm.nih.gov/pubmed/28555623
"Redesigning metabolism based on orthogonality principles"
Nature Communications
2017
This article describes the inter-connectedness of natural metabolic networks.
This article cites other articles that describe modularity in metabolic networks.

https://www.ncbi.nlm.nih.gov/pubmed/25887214
"PathwayBooster: a tool to support the curation of metabolic pathways"
BMC Bioinformatics
2015
This article describing a software tool might be a helpful comparison for publication in the biotechnological field.

--------------------------------------------------
30 August 2017

----------
Progress
Dates reference entries in notes with more details.

-----
17 August 2017
Reactions have annotations for single subsystems or processes.
Examples: "Citric acid cycle", "Fatty acid oxidation", "Fatty acid synthesis", "Glycine, serine, alanine and threonine metabolism", "Glycolysis/gluconeogenesis", "Pentose phosphate pathway", "Transport, extracellular", "Valine, leucine, and isoleucine metabolism"
It seems that annotations of processes for reactions avoid conflicts by grouping overlapping processes together.

-----
18 August 2017
Many genes have roles in multiple reactions.

-----
24 August 2017
Many reactions are replicates with identical reactants and products.
Vast majority of reaction replication is for different compartments.
Examples:
profondeur/design/screen/screen_2017-08-24_1.png

-----
29 August 2017
With inclusion of transport reactions, subnetworks for processes are usually continuous.
Subnetworks for compartments can be discontinuous.
Examples:
profondeur/design/screen/screen_2017-08-29_1.png
profondeur/design/screen/screen_2017-08-29_2.png
profondeur/design/screen/screen_2017-08-29_3.png
profondeur/design/screen/screen_2017-08-29_4.png
profondeur/design/screen/screen_2017-08-29_5.png
profondeur/design/screen/screen_2017-08-29_6.png
profondeur/design/screen/screen_2017-08-29_7.png
profondeur/design/screen/screen_2017-08-29_8.png
profondeur/design/screen/screen_2017-08-29_9.png
profondeur/design/screen/screen_2017-08-29_10.png
Distinction between nodes for metabolites and reactions.
Labels for nodes.
Examples:
profondeur/design/screen/screen_2017-08-29_11.png
profondeur/design/screen/screen_2017-08-29_12.png

-----
30 August 2017
Omission of nodes for reactions without reactants and products simplifies subnetworks dramatically.
Examples:
profondeur/design/screen/screen_2017-08-29_6.png
profondeur/design/screen/screen_2017-08-30_1.png
profondeur/design/screen/screen_2017-08-29_12.png
profondeur/design/screen/screen_2017-08-30_2.png

----------
Plan

Alternative visual representations for reactions.
Interface controls for network assembly and visual representation.

----------
Documentation

Metabolites derive their attributes from their reactions.
It is important to consider co-occurrence of context.
A metabolite's participation in a reaction associates it with the reaction's processes and compartments.
Since metabolites gain attributes from multiple reactions in which they participate, it is impossible to summarize a metabolite's attributes in isolation from its reactions.
It is important to preserve the concept of co-occurrence of attributes.
Otherwise, a metabolite can persist against filters even when its reactions that gave it an attribute do not.

--------------------------------------------------
29 August 2017

----------
Node Marks and Labels

https://stackoverflow.com/questions/11102795/d3-node-labeling
https://bl.ocks.org/mbostock/950642
http://bl.ocks.org/mbostock/1153292
Mike Bostock's reply to a question on Stack Overflow gives useful information about managing groups of marks and labels for nodes in a node-link diagram.
Placing nodes' marks and labels in separate groups can keep the labels in the plane above all marks.
Using groups for nodes is also convenient for using different types of marks for different types of nodes, dependent on nodes' data.

Link arrow markers...
http://jsfiddle.net/dzorz/uWtSk/

----------
Node Clusters

http://bl.ocks.org/GerHobbelt/3071239
This demonstration allows the user to click to group or ungroup compound nodes.
The spatial segregation of nodes by attributes is useful.

http://www.puzzlr.org/force-directed-graph-custom-forces/
Custom Forces might be useful for grouping nodes.

----------
Continuity of Subnetworks for Processes and Compartments

Samples of networks with representation of compartmentalization and without any simplification of metabolites, either by replication or omission.

3 Processes
Subnetworks for all 3 processes were continuous.

3 Compartments
Subnetwork for 1 compartment was continuous.
Subnetwork for 1 compartment was mostly continuous.
Subnetwork for 1 compartment was very discontinuous.

4 Processes in Combination with 1 Compartment Each
Subnetwork for 1 combination was continuous.
Subnetworks for 3 combinations were discontinuous.

It is reasonable that subnetworks for processes are mostly continuous.
Processes cross between compartments.
Processes are conceptually continuous and cooperative.

It is reasonable that subnetworks for compartments can be discontinuous.
Parts of processes can cross temporarily into a compartment without involving other aspects of the compartment.
Conceptually, compartments do not contain discrete parts of metabolism.
Rather, all compartments cooperate together to offer favorable environments for reactions.
Consider the publication below about compartmental mitigation of self-inhibition in metabolism.

"The self-inhibitory nature of metabolic networks and its alleviation through compartmentalization"
https://www.ncbi.nlm.nih.gov/pubmed/28691704

In the metabolic network, subnetworks for both processes and compartments can be discontinuous.
Topological traversals within the entire network or these subnetworks will be continuous.

--------------------------------------------------
25 August 2017

----------
Pathways

At this point, I think it will be beneficial to evaluate the current status of annotations of reaction's pathways in the model of human metabolism.
I wonder if inclusion of transport reactions is sufficient to render the pathways continuous.

----------
Annotation of Reactions' Pathways in Metabolic Models

"Systems Biology: Constraint-Based Reconstruction and Analysis"
Bernhard O Palsson

http://systemsbiology.ucsd.edu/sites/default/files/Attachments/Images/InSilicoOrganisms/human_flyer4.pdf

----------
Summary of Reactions' Replication

It is important to recognize that my summary of reactions' replication on 24 August used data for which I included transport reactions in matching processes.
That is, I had modified the original data to include transport reactions.

--------------------------------------------------
24 August 2017

----------
Summary of Reactions' Replication

I implemented functionality to summarize the replication of reactions.

If replicate reactions existed for roles in different processes, then extensive replication would be apparent for different combinations of processes independently of different combinations of compartments.
Only 1 reaction is in this category.
It appears that replicate reactions do not exist for roles in different processes.

For the purposes of the application, it is important for selection of processes to provide a continuous subnetwork of metabolites and reactions relevant to the processes.
I need to determine if annotations of reactions allow for continuous subnetworks of processes.
The hypothesis is that many reactions have roles in multiple processes.
Since each reaction only has annotation for a single process, the concern is that there will be discontinuities in subnetworks for processes.

--------------------------------------------------
--------------------------------------------------
--------------------------------------------------

summary of reactions' replication...
sets of reactions by common reactants and products...
total sets:
(6088) [{}, ]
count total sets: 6088

multiple reactions:
(1359) [{}, ]
count multiple reactions: 1359
count multiple reactions, multiple compartments: 1195
count multiple reactions, multiple processes: 388
count multiple reactions, single process, multiple compartments: 808
count multiple reactions, single compartment, multiple processes: 1
count replicate reactions: 3056
count replicate conversion reactions: 1783

count replicate dispersal reactions: 1276
count replicate transport reactions: 1264--------------------------------------------------
--------------------------------------------------
--------------------------------------------------

--------------------------------------------------
23 August 2017

----------
Code Editor, IDE

Atom
https://atom.io/
https://opensource.com/article/17/3/code-editors-javascript
https://medium.com/@satya164/supercharged-javascript-development-in-atom-ea034e22eabc

Atom's Packages
https://atom.io/packages/atom-live-server

--------------------------------------------------
18 August 2017

----------
Genes with Roles in Multiple Reactions

ATP Binding Cassette Family Members

Acetyl-CoA Acyltransferase 1 (HGNC:82)
106 reactions
ACACT4p
ACACT5p
ACACT6p
ACACT7p
ACACT8p
ACACT9p
FAOXC180x
FAOXC183806x
...
The single gene's product participates in multiple reactions, in multiple cases as the only gene for those reactions.

----------
Reaction Annotation for Replicative Function

A single gene can have a role in multiple reactions.
A single reaction can require the function of multiple genes.

Reactions in metabolic reconstructions have annotations of genes that participate in the reaction.
A single gene can participate in multiple reactions.
I think that this assignment of genes to reactions could account for reactions' roles in multiple pathways.

Search reactions for genes that have a role in multiple reactions.

Search reactions for reactions with identical reactants and products.

----------
Enzymatic Promiscuity in Metabolism

("2013"[Date - Publication] : "3000"[Date - Publication]) AND "metabolism" AND "human" AND "enzyme" AND "promiscuity"

Specific Examples of Enzymatic Promiscuity in Human Metabolism

cytosolic 5'-Nucleotidase III-Like Protein (cN-IIIB)
https://www.ncbi.nlm.nih.gov/pubmed/25210039

Cytochrome P450 3A4 (CYP3A4)
https://www.ncbi.nlm.nih.gov/pubmed/23018626
https://www.ncbi.nlm.nih.gov/pubmed/24571781

Cytochrome P450 17A1 (CYP17A1)
https://www.ncbi.nlm.nih.gov/pubmed/25482340

Ghrelin O-acyltransferase (GOAT)
https://www.ncbi.nlm.nih.gov/pubmed/25562443

General Subject of Enzymatic Promiscuity in Metabolism

"Network context and selection in the evolution to enzyme specificity"
Nam... Palsson
2012
Science
https://www.ncbi.nlm.nih.gov/pubmed/22936779

"Enzyme promiscuity: engine of evolutionary innovation"
Pandya... Allen
2014
Journal of Biological Chemistry
https://www.ncbi.nlm.nih.gov/pubmed/25210039

"Modeling cancer metabolism on a genome scale"
Yizhak... Ruppin
2015
Molecular Systems Biology
https://www.ncbi.nlm.nih.gov/pubmed/26130389

--------------------------------------------------
17 August 2017

----------
Evidence of Single Subsystem for each Reaction

H Scott Hinton
"Constraint-based Metabolic Recontructions and Analysis"
2015
Presentation
Constraint-based Modeling Course, Utah State University
Table representation of information for reactions shows a single subsystem annotation for each reaction.

Ines Thiele et al
"A community-driven global reconstruction of human metabolism"
2013
https://www.ncbi.nlm.nih.gov/pubmed/23455439
Download csv file from table of reactions on http://vmh.uni.lu has a single subsystem for each reaction.
Table for reactions from "Recon2_spreadsheet.xls" from publication's supplemental data has a single subsystem ("Pathway") for each reaction.
Metabolites are replicated for compartments, and records are not identical.
For example, citrate's name is different for the extracellular record.

"A protocol for generating a high-quality genome-scale metabolic reconstruction"
Nature Protocols
2010
https://www.ncbi.nlm.nih.gov/pubmed/20057383
The article describes the utility of annotating reactions according to their subsystem, or general metabolic process.
The description seems to suggest this annotation as being useful but not necessary.
The description also recommends an annotation for a reaction's primary function.
There is no recommendation of annotation for multiple functions.

----------
Inspection of Raw Information in Recon 2.2 in SBML Format

SBMLeditor
https://www.ncbi.nlm.nih.gov/pubmed/17341299
http://www.ebi.ac.uk/compneur-srv/SBMLeditor.html
I downloaded and ran SBMLeditor without difficulty.
The editor was unable to load the Recon 2.2 model, or at least the loading process consumed full CPU capacity for about 10 minutes without any results.

--------------------------------------------------
16 August 2017

----------
Community Need

Comment from a user on Biostars about the need for a dynamice viewer of metabolic models.
https://www.biostars.org/p/155803/

----------
Problem: How to handle replication of reactions?

I collapsed records for metabolites to eliminate replication of metabolites accross compartments.
The collapsed records for metabolites are more concise and versatile.

Is there replication in records for reactions?
Transport reactions that are otherwise identical have different records for different compartments.
Is there replication of reactions across processes/pathways?
In a representation of metabolism without compartmentalization (summary), I would need to eliminate replication of reactions across compartments.
I would also need to omit transport reactions.
To approach this issue, perhaps it will be beneficial to determine the extent (if any) of replication of reactions across compartments or processes.
Collect reactions by their combinations of reactants and products.
It might be less correct to collapse records for reactions that it is to collapse records for metabolites.
It certainly would be more difficult to collapse records for reactions, since reactions need to specify the compartments in which their metabolites participate.
Reactions in different compartments might also involve different combinations of genes.

----------
Editor for Metabolic Models in SBML Format

I feel confident that Recon 2.2 is the most up-to-date and useful model.
I want to inspect the information in the raw SBML version of this model.
I want to make sure that I do not lose any information in the JSON version.

My intention is to inspect the information in the original models.

SBMLeditor
https://www.ncbi.nlm.nih.gov/pubmed/17341299
http://www.ebi.ac.uk/compneur-srv/SBMLeditor.html

SBMLViewer
http://sv.insysbio.ru/

SemanticSBML
http://semanticsbml.org/semanticSBML/simple/index

MetExplore
http://www.metexplore.fr/
I don't think the application even interpreted Recon2 correctly.

----------
Recon 2.2 Model of Human Metabolism

----------
Recon 2 Model of Human Metabolism
Recon 2, 2013
https://www.ncbi.nlm.nih.gov/pubmed/23455439

http://www.ebi.ac.uk/biomodels-main/MODEL1109130000

http://vmh.uni.lu/#home
I inspected the tables for metabolites and reactions in the Excel spreadsheet from the supplemental data from the publication.
Metabolites are compartmental, and their records include information similar to the information that I have access to in the JSON version of Recon 2.2.
Reactions are also compartmental, and their records also include information similar to the information that I have access to in the JSON version of Recon 2.2.
Reactions have annotations for a single pathway.

----------

("2013"[Date - Publication] : "3000"[Date - Publication]) AND "metabolism" AND "human" AND "reconstruction" AND ("Recon 2" OR "RECON 2" or "Recon2" OR "RECON2")

----------
Descriptions of Metabolic Models, Reconstructions

"ReconMap: an interactive visualization of human metabolism"
Bioinformatics
2017
https://www.ncbi.nlm.nih.gov/pubmed/27993782

"Computational Modeling of Human Metabolism and Its Application to Systems Biomedicine"
Methods in Molecular Biology
2016
https://www.ncbi.nlm.nih.gov/pubmed/26677187/
I requested this article through the University of Utah Interlibrary Loan.

Constraint-based models predict metabolic and associated cellular functions
Nature Reviews Genetics
2014
https://www.ncbi.nlm.nih.gov/pubmed/24430943
The article defines metabolic pathways as those groups of reactions that result from computational analysis of the metabolic network.

"Constraining the metabolic genotype-phenotype relationship using a phylogeny of in silico methods"
Nature Reviews Microbiology
2012
https://www.ncbi.nlm.nih.gov/pubmed/22367118
The article describes pathways as "conceptual abstractions that group reactions".
It describes how traditional pathways sometimes fail to represent metabolic functions accurately in the context of the complete metabolic network.
Computational strategies such as Elementary Flux Mode (EFM) Analysis and Extreme Pathway (EXPa) Analysis seek to identifier groups of reactions that function in concert.
These computational methods were a challenge on larger models, at least in 2012.

"A protocol for generating a high-quality genome-scale metabolic reconstruction"
Nature Protocols
2010
https://www.ncbi.nlm.nih.gov/pubmed/20057383
The article describes the importance of including reactions for intracellular transport.
It also discusses the challenges that many transport are unknown and excessive transport events can impart futile cycles to the model.
The article describes the utility of annotating reactions according to their subsystem, or general metabolic process.
The description seems to suggest this annotation as being useful but not necessary.
The description also recommends an annotation for a reaction's primary function.
There is no recommendation of annotation for multiple functions.

--------------------------------------------------
15 August 2017

----------
Consider the possibility of replication of reactions.

The Recon 2.2 model might replicate reactions for processes and or compartments.

I inspected publications describing Recon 1, Recon 2, and Recon 2.2.
None of these publications offered clear information about annotation of subsystems or pathways for reactions.
A reference about creation of metabolic reconstructions seemed to suggest that annotations only represent the main subsystem of a reaction.

Inspect the data within original models in SBML format for both Recon 2 and Recon 2.2.
I want to inspect the original data.
It might be that COBRApy abbreviates the data when converting from SBML format to JSON format.
Try to figure out if there is any way to convert between SBML format and JSON format in a lossless way.

Tools to Explore Data from Models in SBML
COBRApy
CytoScape

----------
Confusing Commentary on Model of Human Metabolism

https://www.ncbi.nlm.nih.gov/pubmed/28691704
I think the article was referring to types of biochemical reactions.

----------
Models of Human Metabolism

Recon 2.2, 2016
https://www.ncbi.nlm.nih.gov/pubmed/27358602

Recon 2, 2013
https://www.ncbi.nlm.nih.gov/pubmed/23455439

Recon 1, 2007
https://www.ncbi.nlm.nih.gov/pubmed/17267599

Reference for Metabolic Reconstructions
https://www.ncbi.nlm.nih.gov/pubmed/20057383
"Add subsystem information to reaction. This will be of great help for the debugging and network evaluation work. The subsystem assignment can be done either based on biochemical textbooks or KEGG41 maps. Note that a reaction or an enzyme can appear in multiple KEGG41 maps; therefore, the subsystem should reflect its primary function."

--------------------------------------------------
8 August 2017

----------
Transport Reactions in Processes

I confirmed the match of transport reaction to processes for the transports below.

Metabolite: 10fthf5glu
Compartments: c, l
Processes: process_64, process_97

Metabolite: 2425dhvitd3
Compartments: m, c
Processes: process_2, process_85

Metabolites: akg
Compartments: m, c
Metabolites: L2aadp
Compartments: m, c
Processes: process_3, process_5, process_8, process_10, process_12, process_16, process_22, process_28, process_30, process_41, process_48, process_81, process_85, process_93

I confirmed the accuracy of the algorithm for determination and collection of transport metabolites and compartments from a reaction's metabolites.

--------------------------------------------------
7 August 2017

----------
Literature Search

"ReconMap: an interactive visualization of human metabolism"
https://www.ncbi.nlm.nih.gov/pubmed/27993782
15 February 2017
The tool uses a static layout of the entire metabolic network.
The tool's interactivity seems to be limited to searching for specific entities or maybe highlighting several entities from data.

"Recon2Neo4j: applying graph database technologies for managing comprehensive genome-scale networks"
https://www.ncbi.nlm.nih.gov/pubmed/27993779

"The self-inhibitory nature of metabolic networks and its alleviation through compartmentalization"
https://www.ncbi.nlm.nih.gov/pubmed/28691704

"Metabolic systems biology: a brief primer"
https://www.ncbi.nlm.nih.gov/pubmed/28028815
1 May 2017
Interesting brief review emphasizing the importance of systems-level analysis of metabolism.

--------------------------------------------------
4 August 2017

----------
Processes

Making processes continuous across multiple compartments is tricky.
I need to figure out when to fill in the missing transport reactions.
I think it will be helpful to include missing transport reactions after preparation of the reactions records otherwise.
That way I will at least have access to the information in my preference of format.

----------
Progress

I began working on characteristics of reactions---conversion, dispersal, transport, reversibility.

----------
Algorithm Efficiency

May I ask you a question about the efficiency of algorithms? Say I want to perform an operation on a subset of a collection of elements.
Option 1: Filter the elements, and then perform the operation on the filtered subset.
Option 2: Iterate on the elements, performing the operation only if each element passes the filter.
Either Option 1 or Option 2 might be more simple/readable/maintainable. It seems that Option 2 would be more efficient because it only involves a single iteration. Is that correct?

Many complex factors contribute to the efficiency of an algorithm.
JavaScript's Array.filter() method may be implemented in C or otherwise be very efficient.
Another consideration is the logic and criteria for categories.
Filtering to multiple categories with overlapping criteria would be difficult.
In that case using multiple conditions for treatment of each element would probably be preferrable.

Simplicity of implementation, readability of code, and maintainability of code are also factors that balance against the benefit of efficiency.

Since optimal efficiency depends on many factors, it is necessary to test the performance of specific algorithms.

Standard strategy
performance.now()

Non-standard strategy that automatically prints to the console.
console.time()
console.timeEnd()

Optimize algorithms that are extremely slow if the performance is a problem.

----------
Presentation Idea

In telling this project's story (oral presentation or textual article), consider describing the difference between communicative and exploratory data analysis.
Tools such as Escher or even KEGG are more appropriate for communicative data analysis since they involve custom content and custom layouts to present that content clearly.
The goal of my project is to support exploratory data analysis where the content and layouts are dynamic.

--------------------------------------------------
2 August 2017

----------
Plan

Assemble network's nodes and links for all entities both with and without compartmentalization upon initialization of the application for metabolic entities and sets.
This assembly will at least avoid the necessity for assembling these elements later.
Relevant attributes in application's state might be allGeneralNetworkNodes, allGeneralNetworkLinks, allCompartmentalNetworkNodes, allCompartmentalNetworkLinks.
These assemblies could use the default replications.
Any subsequent change to replications would necessitate preparing a new assembly of the network.

Maybe I should at least try filtering network's nodes and links to see how computationally expensive it is.
Also, I should play with the network assembly to see how computationally expensive it is in comparison.

Represent replications within a special attribute of nodes for reactions.

Deal appropriately with transport reactions for network without compartmentalization.

Make multi-compartmental processes continuous by including transport reactions.

Include some sort of feedback in the topology view before representing the network visually.
It might be helpful to represent the breadth and narrowness of the current filters and selections in terms of counts of entities or nodes and links.
It might also be helpful to provide instructions about the data flow (including assembly of network's elements if relevant).

----------
Meet with Alexander Lex

Alex recommended to change the major data transformations in the application.
Conceptually, a user begins with an entire network and then filters that network to progressive narrowness according to interest.
The necessity to assemble a network after filters is somewhat unintuitive.
I considered the option of using an assembled network as a primary data structure in the application.
I considered the option of filtering this network according to user selections.
Filtering the network's nodes and links will still be computationally expensive.
I think it will be beneficial to use the data structures and operations that are most reasonable, convenient, and efficient.
I can try to design the interface so that the user's experience is more intuitive.

Alex recommended to dismiss the option of assembling the network both with and without distinct nodes for compartmental metabolites.
He recommended only supporting the compartmental version of the network.
I think that the ability to represent the network with and without compartmentalization is useful and interesting.
I consider this functionality to be important in the application, and I do not intend to dismiss it.

Alex recommended to determine default metabolites for replication on the basis of the degrees of their nodes in the network.
This strategy might be more objective.
My previous strategy involved manual consideration of metabolites and selection on the basis of biological role.
I agree that an objective approach on the basis of degree might be beneficial.

Alex recommended to represent replicate metabolites as attributes of reactions rather than as distinct nodes.
This representation will abbreviate and simplify the network.
I agree that this representation might concisely convey essential information.
It will be a challenge to figure out how to represent these replicate metabolites as miniature nodes or glyphs on nodes for their reactions.

Alex recommended to provide information to the user about the current selection and the need to narrow it by filters by attributes and topology.
Some sort of progress menu will be helpful to the user.

Consider indicating the degrees of metabolites in the menu for new replications.

----------
Issues

-labels or tool tips for values of attributes in sets' summary
-search menus for values of attributes in sets' summary
-labels or tool tips for nodes in node-link diagram
-selection of nodes in node-link diagram for removal or proximity expansion
-representation of link directionality in node-link diagram
-representation in node-link diagram of node's degree in network or subnetwork
-control for compartmentalization and replication in network's assembly
-control for selection of subnetworks by topological traversal
-control for visual representation of attributes
-list of individual entities in network or subnetwork
-resolution of discontinuous networks for processes
-computational efficiency for interactivity

--------------------------------------------------
26 July 2017

----------
Meet with Alexander Lex

Alex expressed concern over the discontinuous networks for processes.
Even including all transport reactions for a process will be more biologically relevant than discontinuous processes.
Continuous networks will allow topological traversals.

This issue is only a problem in compartmental networks, not general networks.

Maybe I should solve the issue at the level of processes of reactions.
I might need to assign multiple processes to reactions.
I could do that when extracting information about metabolic entities and sets.
For every metabolite in a process, consider all of the transport (multi-compartmental) reactions in which it participates.
Include these transport reactions in the process if they involve the same metabolite in another compartment that is relevant to the process.

Alex advised me to prepare a list of features to implement for the minimal viable prototype.
-rename interfaces to be more concise--source, persistence, set, control, topology
-control for network's assembly (compartmentalization, replications)
-control for building sub-networks (topological traversal)
-control for visual representation of attributes
-link directionality in node-link diagram
-labels for nodes in node-link diagram
-node scale by degree in subnetwork or entire network
-search menus for values of attributes in sets' summary
-labels or tool tips for values of attributes in sets' summary
-resolve discontinuous networks for processes
-optimize computational efficiency for interactivity
-dark background for top interfaces--source and sets
-dark background for control interface
-selection of nodes in node-link diagram for removal or proximity expansion

----------
Control Interface

Network Assembly
-compartmentalization
-replications (editable)
--scrollable list of names
--selectable names
--auto-complete search menu to add new entities to list
-summary information about assembled network
-assemble
-reset

Subnetwork Selection
-entire network if sufficiently small (below threshold)

Traversal
-proximity traversal (append or remove)
-path traversal (append or remove)

Entity
-sort-able list of individual entities in network and/or subnetwork
-selecting entity in list highlights node in node-link diagram
-separate lists for metabolites and reactions
-designation for replicate or compartmental metabolites

Code
-colors for attributes
-positions for attributes

----------
Network View

It might be helpful to have a persistent control view alongside the view for network's nodes and links.
This control view could be useful to append or remove nodes and links from the subnetwork.
The user could use proximity and path traversals to construct a custom subnetwork.
The control view could also give control over representation of attributes spatially and by color.

--------------------------------------------------
25 July 2017

----------
Network Assembly

In entirety, there are 2652 general metabolites and 7785 reactions.
Assembly of a general network with standard replications from all entities requires about 3 minutes.

--------------------------------------------------
24 July 2017

----------
Plan

User selections in the set interface define filters to apply against entities, metabolites and reactions.
Filters modify the entities that remain in the collection of current entities' attributes.

The entity interface allows the user to define a network from the current selection of entities.
This interface provides options of compartmentalization and replication of nodes for common metabolites.
The user selects preferences for compartmentalization and replication and then initiates network assembly.
The only reason for an explicit submission for network assembly is that the process is computationally intensive.

--------------------------------------------------
20 July 2017

----------
Plan

Filter Selection
Introduce tool tips to give names of compartments and processes in the summary.
Introduce search menus to search for values of attributes by name.
Organize code for the summary table and its actions.

Network
Define network from selection of entities that pass filters, if this selection is sufficiently small and manageable.
Create interface to support topological queries against the network.

----------
Progress

At this point it is possible to make rudimentary selections of values of attributes and to apply these to filter metabolic entities.

----------
Meet with Alexander Lex

Alex recommended including information in URL to preserve state of the application.
It might be practical to preserve information about selections within URL.

It will still be necessary to preserve data derivation (clean raw data, extract information about metabolic entities and sets) within downloaded files.

--------------------------------------------------
11 July 2017

----------
Set Cardinalities

It is probably best to define 2 procedures for Set Cardinalities.

1. Determine Set Cardinalities
-Upon new entitiesAttributes (upon initial data load)
-Upon any filters against currentEntitiesAttributes

2. Prepare Summary of Set Cardinalities
-Upon any changes to Set Cardinalities
-Upon any change to entity of interest (entity determines magnitudes, sort order, and incremental counts)

--------------------------------------------------
7 July 2017

----------
Callback functions

--------------------------------------------------
4 July 2017

----------
Access to Files on Client's System

https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications
https://developer.mozilla.org/en-US/docs/Extensions/Using_the_DOM_File_API_in_chrome_code

--------------------------------------------------
28 June 2017

----------
Design Idea

Chemical formula and charge are interesting properties of metabolites.
I wonder if it might be interesting to represent aspects of formula or charge on nodes for metabolites.
For example, what if I set the color saturation of nodes by the count of carbon atoms in their formulas or by their formula masses?

--------------------------------------------------
27 June 2017

----------
Presentation

Data Figures
Order by priority

1. List of names and degrees of metabolites with greatest degrees
2. Ego network for pyruvate at depth 1, 2, 3
3. Visual representation of network for entire metabolic model

--------------------------------------------------
24 June 2017

----------
Presentation

I like the idea of nonlinear presentation style.
I like the idea of using Sozi together with InkScape.

http://sozi.baierouge.fr/

--------------------------------------------------
22 June 2017

----------
Meet with Ethan Kerzner

Ethan recommended establishing a strategy for persistence of the model of application state.
This capability will be very useful during development.
It will be possible to load a specific application state to save time.
This capability might also be useful to the user.

Organize all attributes of the model of the application's state within an object.
Save this object in JavaScript Object Notation (JSON).

Include functionality to load a representation of the model of the application's state from file.
This strategy will be versatile and useful even in the final application.
Enable the user to save the application in any state and then load that state from file.

--------------------------------------------------
20 June 2017

----------
State Action Model (SAM)
http://sam.js.org/

Model
Structure: Class
Reference: None
Attributes: All variables that sufficiently and efficiently represent the state of the entire application
Methods: Operations for accepting new values of attributes, instantiation of new State
Receive method receives a proposal from Action and routes the proposal to the appropriate method for evaluation and acceptance or rejection

State
Structure: Class
Reference: Model
Attributes: All variables for representation of application state in View
Methods: Operations to prepare representation of application state, initiation of automatic actions if appropriate, instantiation of new View
Adapts information from the model for the View
I think it also passes information from the model to the appropriate Views

View
Structure: Class, or multiple Classes (one for each view)
Reference: Model, State
Creates elements of the interface view
Initializes event listeners on control elements
Event listeners point to Actions and pass Actions reference to the model

Action
Structure: Class
Reference: None, only needs access to specifically relevant attributes from model
Attributes: None
Methods:
Utility Class of static methods
Action only uses necessary aspects of the model
Action only passes relevant aspects of model back to model
Action organizes aspects of model with keys for reference in model's receive method

----------
Presentation on the Project

Explain the general goal.
Evaluate and critique the current technology.
Explain the problems or challenges in detail that I have learned about the metabolic network.
Give examples of challenges, such as the proximity network for pyruvate
-Large scale of the network with many attributes
-Interests in different aspects of the network
-Great extent of interconnectivity due to common nodes with especially great degrees
Explain solutions in detail that I aim to implement in my project.
Illustrate solutions with examples of simple networks.
-Abstract summary of the network in terms of sets of entities by attributes
-Cardinalities and relations between sets
-Definition of the network with or without consideration of compartmentalization
-Replication of common nodes to reduce connectivity and simplify the network

--------------------------------------------------
20 June 2017

----------
Design, Initial Start-Up

Display file selector in center or top-left corner of screen.
Allow user to select a file.
Allow user to...
1. Run checks on a metabolic model from SBML
2. Assemble working metabolic model from original
3. Load working metabolic model

----------
Model

For now, just initialize the model and normal application architecture after assembly or load of data from a metabolic model.

The constructor method for the Model class can accept the data for the metabolic model.

General Attributes
All relevant information from the metabolic model and derivations thereof that are relevant to multiple views.
Entities
-metabolites
-reactions
Sets
-compartments
-genes
-processes
Derivation
-entityAttributes

Interface Attributes
Attribute View
-attributeViewEntity
-attributeViewFilter
-attributeViewAttributeSearches
-attributeViewAttributeValueSelections
Set View

Entity View
-entityViewControlSelection
-entityViewCompartmentalization
-entityViewReplications
-entityViewShowReplications
-entityViewNetworkNodes
-entityViewNetworkLinks
-entityViewProximityFocus
-entityViewProximityDirection
-entityViewProximityDepth
-entityViewSubnetworkNodes
-entityViewSubnetworkLinks

----------
Plan

Design the model for the application.
Decide which information I need and want to store within the model for the entire application.
Consider computational burden.
If I choose not to include some derivations of information within the model then it will be necessary to derive these with every step in the application.
For example, store the entire attribute index within the model along with all selections of attribute values for filters.
For each step in the application, filter the attribute index according to selections and the state of the filter control.

----------
Conversation with Alex Bigelow about Application Architecture

I spoke with Alex in person about application architecture.
Alex confidently endorses using architecture with a central model of the entire application's state.
Alex confidently endorses using separate functionality to render the visual interface from this model.
Alex personally uses an architecture similar to the Model View Controller (MVC) pattern.
For simple applications like mine, Alex recommends using classes for views that control both rendering and activity, including changes to the model.
As applications become larger and more complex, Alex recommends considering an architecture with more Separation of Concerns (SOC) between Model, View, and Control.
In particular, greater SOC can help to determine which views of the interface need to restore after changes to part of the model.
Rendering views of the interface is computationally expensive.

My application involves some operations that are computationally expensive.
I think I want to build the application with extensive SOC for the sake of versatility as the application becomes larger and more complex.

----------
State Action Model (SAM)
http://sam.js.org/

I decide to use the SAM pattern for the architecture of this application.
This pattern is comparable to the Model View Controller (MVC) pattern, but it separates the aspects of the Controller between Model-View and View-Model interfaces.
The result is a pattern with unidirectional data flow in a reactive cycle or loop.

Model
Structure: Class
Reference: None
Attributes for all variables of application state
Methods for accepting new values
Receive method receives a proposal from Action and routes the proposal to the appropriate method for evaluation and acceptance or rejection
After each update of Model, instantiate new State

State
Structure: Class
Reference: Model
Adapts information from the model for the View
Initiates new automatic actions if appropriate
Instantiate new View

View
Structure: Class
Reference: Model, State
Creates elements of the interface view
Initializes event listeners on control elements
Event listeners point to Actions and pass Actions reference to the model

Action
Structure: Class
Reference: None
Utility Class of static methods
Action only uses necessary aspects of the model
Action only passes relevant aspects of model back to model
Action organizes aspects of model with keys for reference in model's receive method

----------
Functional Programming in JavaScript Applications

https://medium.com/javascript-scene/why-learn-functional-programming-in-javascript-composing-software-ea13afc7a257

--------------------------------------------------
19 June 2017

----------
Plan

Implement something like SAM or MVC in plain JavaScript.

Consider this article...

https://danmartensen.svbtle.com/how-to-write-mvc-without-a-framework

----------
JavaScript Functional Application Architecture

State
-Interface (user interaction)
-Model

State Action Model (SAM)
http://www.ebpml.org/blog15/2016/01/sam-a-functional-approach-to-ui-construction/
https://www.infoq.com/articles/no-more-mvc-frameworks
http://sam.js.org/
From code examples, I think that it would be possible to organize Model, View, State, and Actions within classes rather than the global object variables of the examples.

Elm Architecture
https://github.com/paldepind/functional-frontend-architecture

Scalable Single-Page Application Architecture
http://blog.mgechev.com/2016/04/10/scalable-javascript-single-page-app-angular2-application-architecture/

Model View Controller (MVC)
https://developer.chrome.com/apps/app_frameworks
The instructions for Google Chrome endorse the MVC architecture.
After learning and thinking a little about the MVC architecture, I realized that it might be a little difficult with a functional programming style.
https://medium.freecodecamp.com/is-mvc-dead-for-the-frontend-35b4d1fe39ec
This article argues that MVC is not a good fit for client-side applications.
https://danmartensen.svbtle.com/how-to-write-mvc-without-a-framework

Various Tips (of questionable helpfulness)
http://sandservices.com/docs/funcjsarch.html

----------
Conversation with Alex Bigelow about Programming Paradigms for Interface

I also talked with Alex in person.
My understanding is that development of an entire application requires much more structure and organization than modules of functions.
Alex endorsed the practice of separating information about application state (data, user interaction) from application behavior.
He endorsed storing information about application state within a separate object and passing that object to controls that render views accordingly.

Conversation with Alex Bigelow

T Cameron Waller
I assume that you use a mixture of Functional Programming (FP) and Object-Oriented Programming (OOP) in your programs. Is that correct? I've been trying to use FP as much as possible, but it gets really tricky with the Interface of the Document Object Model (DOM). Side effects are necessary of course, and state management is difficult. In FP, state management of the DOM requires a lot of recursive calls to functions with many parameters. It's starting to get overwhelming, and I'm realizing that using more OOP at least for state management of the DOM might help. What do you think?

Alex Bigelow
Yeah, state management in JavaScript is... tricky. Lately, I've been doing things quite a bit more object-oriented, especially when projects get bigger. Lots of frameworks are out there (react, etc) that kind of force a certain MVC flavor on you, and that can be a good thing in some ways. I tend to follow a sort of ad-hoc MVC, where different classes are clearly in the model or view categories, and the main (functional) script acts as the controller

[09:23] 
Not sure if that answers your question...

T Cameron Waller
Thanks! Yeah... I don't understand entirely. I do understand that you use a mixture of FP and OOP. I guess the question is how to do that practically. ... What is MVC?

Alex Bigelow
It's a way of keeping things organized, so that state management is always separate from rendering... Structuring your code that way can go a long way to avoiding lots of deep callbacks / writing redundant code. Only one piece (the view) worries about the state of the DOM, and keeping it in sync with the rest of the app

T Cameron Waller
Ah! That sounds neat! I need to learn more about that, then. Hopefully I can follow that principle without a new, heavy library. ... So, here's what I was thinking... I think it's sort of what you're talking about. I'll have OOP-style classes to model and control discrete parts of my interface (view 1, view 2, view 3). These classes will manage the state and behavior of the interface (user interaction with controls and input elements). The classes will call FP-style functions (maybe organized as static methods in classes of their own) for the heavy data-crunching back-end-ish work. Does that make sense?

Alex Bigelow
Yeah, thats definitely a way to do it. I tend to make classes for the data-crunching part too (the model part of model-view-controller), but your approach would probably be simpler, and kind of cuts out the need for a controller (which is fine).

If it helps at all, Ive started rolling what I do into a (shudder) mini framework of my own: https://github.com/alex-r-bigelow/my-mvc-library
Im not saying to use it. But skimming the Model and View code might be helpful (theyre pretty short files)? Unfortunately I dont have a very good example of how to use it / wire them up together And, as I said, your approach (functional model + controller) would probably be simpler (edited)

T Cameron Waller
Thank you very much! This conversation has been very helpful, and I think you pointed me in a good direction. I started looking at your framework and will continue to try to figure out your strategy there. As always, I've got a lot to learn. :slightly_smiling_face:

Alex Bigelow
Dont waste too much time on it those are things I just found myself writing over and over again. The only things it does are:
1) code to strap custom event listeners on my models / views (your functional approach would bypass the need for this)
2) separating views rendering logic into `setup` and `draw` functions (even though D3 tries to be helpful with enter/exit/update, I still find myself needing to do some initial setup a lot that isnt data-driven) there are examples in the readme of what a view would look like. You wouldnt necessarily need this, but Ive found it to be helpful when I create View classes that use D3 to render things to the DOM
3) debouncing the views render functions, so that I can just call `render()` whenever / wherever I want, and not worry about whether something else just called render (rendering is expensive!) This is another thing you dont necessarily need, but Ive found that it helps me avoid a lot of complicated debugging

T Cameron Waller
I stumbled upon the State Action Model (SAM) Pattern (http://sam.js.org/). In case you're interested, I'm curious what you think.

Alex Bigelow
Probably overkill for what youre trying to dowere kind of going in that direction, but this seems to take it to a really formal level. For a really big / complicated system, it might be worth it, but I think the approach you described (view classes + functional models) sounds like it would be sufficient for your project

T Cameron Waller
Whew! I was having difficulty understanding SAM anyway. Thanks! :slightly_smiling_face:

----------
Program Style

I still think that there are advantages to an object-oriented programming paradigm.
Stateful objects and classes model reality well, since real objects can change state.

Maybe I can use objects to control all aspects of the interface itself.
As much as is practical, I can use functions with a functional paradigm for accessory behavior.

https://stackoverflow.com/questions/42401329/functional-programming-and-dom-manipulation

--------------------------------------------------
18 June 2017

----------
Program Style

Thus far in this project, or at least since Prototype 1, I have tried to use a functional programming style.
This functional programming style is a great challenge with managing the state of the interface.

I think it is time for me to change to an object-oriented programming style for those aspects of the program that directly control the interface and state.

No.
There are still advantages to a functional programming style.
For now, I want to implement functionality using my current architectural style.
As the functionality of the program gains complexity, I can consider alternative architectures.

----------
Plan, Network Interface

I think my next goal for the Network Interface is to implement a rudimentary set of controls for the ego network function.

----------
State in the Network Interface

Control Bar
To save space, maybe include a list of tools for the interface in a bar across the top.
New tools should become available after network assembly.
I think that previous controls should always be accessible to back-track.
1. Before network assembly
-Control variables for network assembly
-Execute assembly
2. After network assembly
-Control topological searches, either ego or path
-Execute searches and visualize resulting subnetworks
3. After subnetwork selection and visualization
-Control visual representation of network

Network Assembly
Compartmentalization, whether or not to represent compartmentalization in network
Metabolites for replication
Network

Network Traversal
Details of topological query
Subnetwork from topological search selection

--------------------------------------------------
17 June 2017

----------
Network Entity Identities and Properties

The user needs to access names and other properties of individual entities from the network view.
Tool tips would be a concise strategy to make this information available.

----------
Network Attribute Visualization

For a given network in the network view, I could display a custom set of attributes within that network.
The user could select which attributes to encode by color or even position (spatial groupings).

----------
Network Scale

I need to accommodate multiple scales of networks.
The user can select greater or smaller networks to display within a permissible threshold.
Maybe I need some sort of zoom feature for the network view.

----------
Novelty

In this project we adopt strategies to make the complexity of the metabolic network at different levels according to degree of interest.
We employ techniques of abstraction and filters to simplify the network.

Abstraction of the network as sets of entities with specific attributes.
Representation of cardinality of attribute sets and relations between these sets.
Definition of network with or without compartmentalization.
Definition of network with or without replication of nodes for reaction-specific metabolites, hence simplifying the network dramatically and making path traversal more relevant.
Graph traversal algorithms, ego and path, for exploring relations between individual entities.
Selection of attributes in order to explore relations between entities within a specific context.

----------
Network Topology

My demonstration network is the ego network for mitochondrial pyruvate at a depth of 2.
My first view of the layout for this network surprised me.
The replication of common nodes in the definition of the network changes the topology dramatically.

----------
D3 Force Layout

I need to become an expert in D3's force layout. :)

https://github.com/d3/d3-force
https://stackoverflow.com/questions/28745398/why-do-we-need-force-ontick-in-d3

--------------------------------------------------
16 June 2017

----------
Scalable Vector Graphics (SVG) Element Style

It seems that Cascading Style Sheets (CSS) have limitations in their control dimensions of SVG elements.
If I create an SVG element using pure JavaScript as below, then CSS styles do not control the dimensions of the element.
Interestingly, assigning width and height attributes directly from JavaScript also does not work.
JavaScript
    var setView = document.createElement("div");
    var setGraphElement = document.createElement("svg");
    setGraphElement.setAttribute("id", "set-graph");
    //setGraphElement.setAttribute("width", "500px");
    //setGraphElement.setAttribute("height", "500px");
    setView.appendChild(setGraphElement);
CSS
#set-graph {
    height: 100%;
    width: 100%;
}
If I create an SVG element using D3, then CSS styles do control the dimensions of the element.
JavaScript
    // Create container for graph.
    var setView = document.createElement("div");
    setView.setAttribute("id", "set-view");
    setInterface.appendChild(setView);
    // Create graphical container for graph.
    var networkGraph = d3.select("#set-view").append("svg");
    networkGraph.attr("id", "set-graph");
CSS
#set-graph {
    height: 100%;
    width: 100%;
}

--------------------------------------------------
15 June 2017

----------

    // Append rows to table with association to data.
    var rows = body.selectAll("tr").data(currentAttributeSummary);
    rows.exit().remove();
    var newRows = rows.enter().append("tr");
    rows = newRows.merge(rows);

--------------------------------------------------
8 June 2017

----------
Entity Interface

Show a horizontal bar across the top of the view.
The width of this bar corresponds to the count of nodes in the network that assembles from the user's selection of attributes.
Include some sort of marker on this chart for the threshold at which to visualize the entire network.
Maybe even allow the user to drag this marker to change the threshold.

Create and activate menus to specify and submit (include submit button) queries for proximity and path.

Visualize the network using D3.
Maybe initially visualize using JSNetworkX functionality.

----------
Data

It does not make sense to store reactions with nodes for metabolites after those nodes become specific to compartments.
Since I do not want to update the list of reactions to be specific to the compartment, maybe I should remove this attribute from records for nodes.

--------------------------------------------------
7 June 2017

----------
Meet with Alexander Lex

Alex wanted to find a design to draw nodes and links of the network dynamically from interactive selections of the model.
He suggested separating processes from other sets or attributes in the attribute menu.
He suggested placing processes in a separate, vertical panel.
He suggested that user selection of a process would automatically draw the entire process in a node-link diagram.
Alex also suggested that operation and reversibility were not useful for selecting portions of the network but might be more useful for highlighting.

I do not like the idea of separating processes from other attributes in the attribute menu.
I think this separation would be somewhat arbitrary and would complicate the interface.

I prefer to draw the network for the entire selection if the selection is below some threshold of scale.
Otherwise, I prefer to require the user to filter the selection further through topological queries (proximity or ego and paths).

----------
Plan, Graph Network Traversal

Ego, Proximity Network

ego_graph, NetworkX
http://networkx.readthedocs.io/en/latest/reference/generated/networkx.generators.ego.ego_graph.html?highlight=ego%20graph

The ego_graph function of NetworkX is a control function.
For unweighted graphs, the function uses single_source_shortest_path_length.

single_source_shortest_path_length, NetworkX
http://networkx.readthedocs.io/en/latest/reference/generated/networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path_length.html?highlight=shortest%20path

K Shortest Simple Paths

----------
Plan, Network Initialization

Now that I have network elements, I am ready to initialize an operable network.
My current plan is to use a network in JSNetworkX.
JSNetworkX is more transparent and seems more customizable than CytoScape.js.

----------
Design, Computational Resource

The assembly of the network elements demands extensive computational resource.
With large selections from the metabolic model, such as the entire model, network assembly interferes with live interactivity.
Set a threshold for live updates to the network topology portion of the interface.
If the selection exceeds the threshold, require the user to submit the selection for network assembly.
Otherwise, update the network automatically if the selection is below some threshold.

----------
Progress

As of 6 June 2017, the program successfully assembles elements (nodes and links) for the network.
There are some neat features about the network assembly process.

1. The assembly creates network elements differently for a representation of the network with or without compartmentalization.
2. The assembly creates replicate, reaction-specific nodes for metabolites in a specific list.
The plan is to allow the user to customize this list according to interest.

--------------------------------------------------
5 June 2017

----------
Assembly of Nodes and Links

The reactions of the metabolic model determine the attributes of both reactions and metabolites in the attribute index.

--------------------------------------------------
3 June 2017

----------
Plan, Assembly of Nodes and Links

In order to create a network, I need collections of nodes and links.
For nodes, create objects to store the identifier and other attributes of the node.
Store these objects within separate arrays for metabolites and reactions.

For links, create objects to store the identifier, source, and target.
Store these objects within arrays.

Assemble a network.
Includes nodes for all entities in the Attribute Index.
Only include the metabolites of a reaction that are also in the Attribute Index.
Include links only between reactions and metabolites in the Attribute Index.
Only include links for reactions that are in the Attribute Index.

Method
Metabolites derive all of their attributes in the Attribute Index from the reactions in which they participate.
For this reason, I doubt that any metabolites will persist in the Attribute Index without the reactions that gave them their attributes.
Iterate on reactions from the Attribute Index, and consider all metabolites that participate in each reaction.
For each reaction...
...If compartment is true...

...If compartment is false...
......If the reaction is a transport reaction (same metabolite as reactant and product)...
.........Ignore reaction
......If the reaction is not a transport reaction...
.........Create a node for the reaction
.........For each metabolite of the reaction...
............If the metabolite is in the Attribute Index...
...............If the metabolite is in the replication list...
..................Create a reaction-specific node for the metabolite
..................Create link(s) between the reaction and the metabolite
...............If the metabolite is not in the replication list...
..................Create node for the metabolite
..................Create link(s) between the reaction and the metabolite


----------
Selection of Network Library

I have more confidence in the capability and competence of NetworkX than I do in CytoScape.js.
NetworkX is more versatile and capable than CytoScape.js.

I looked at source code for both NetworkX and CytoScape.js.
Source code for NetworkX seems more orderly and intuitive than source code for CytoScape.js.

--------------------------------------------------
2 June 2017

----------
Plan, Network Assembly

Assemble a network in JSNetworkX from arrays of metabolites and reactions to include and information from the metabolic model.
Replicate nodes for specific metabolites that are in an array.
Eventually provide a menu to the user to control which metabolites are in the array for replication.

----------
Plan, Network Library

CytoScape.js is more popular and current than JSNetworkX.
CytoScape.js has contribution from more people.
CytoScape.js is familiar to the biological community.

JSNetworkX relates to NetworkX.
NetworkX is more popular and has a broader community than CytoScape.js.
NetworkX and even JSNetworkX are much more sophisticated and extensive than CytoScape.js.

----------
Network, Nodes with Excessive Degrees

How do I want to handle metabolites with especially great abundance and degree?
Examples include water, proton, oxygen, carbon dioxide, and adenosine phosphates.
These metabolites are extremely abundant in the cell and promiscuous in metabolism.
To avoid paths with nodes for these metabolites, modify the network before path searches.
Replicate these nodes for each reaction in which they participate.
Only include links between these nodes and their single reaction.
After this replication of these nodes, they will not influence path traversals.

Initialize a default list of abundant and promiscous metabolites for replication.
Enable the user to see and modify the members of this list.

----------
Network, Graph Traversal Algorithms

NetworkX
http://networkx.github.io/
http://networkx.readthedocs.io/en/latest/

Yen's Algorithm for Shortest Simple Paths
https://en.wikipedia.org/wiki/Yen%27s_algorithm

PathLinker
http://apps.cytoscape.org/apps/pathlinker
"a novel integration of Yen's algorithm with the A* heuristic, which allows very efficient computation for very large k values, e.g., 10,000, on networks with hundreds of thousands of edges."

----------
Literature on Analysis of Metabolic Network

https://www.nature.com/nature/journal/v407/n6804/full/407651a0.html

----------
Visual Representations of Metabolic Network in Literature

"3DScapeCS: application of three dimensional, parallel, dynamic network visualization in Cytoscape"
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3835703/

"Identification of Biochemical Network Modules Based on Shortest Retroactive Distances"
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3213171/

"Gene Expression Profile Change and Associated Physiological and Pathological Effects in Mouse Liver Induced by Fasting and Refeeding"
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3212576/

KEGG Atlas

Metabolic Atlas
http://www.metabolicatlas.com/atlas

--------------------------------------------------
1 June 2017

----------
Library for Graph, Network Algorithms

The metabolic network in my model is a directed graph.
It is not a multi-graph.
The links do not have weights, so Dijkstra's Algorithm is unnecessary.

Here are the algorithms that I imagine needing.
-Network Data Organization
--Directed Graph
--Undirected Graph
-Union
-Subgraph
-Copy
-Link Direction Reversal
-Betweenness Centrality
-Degree
-Ego or Proximity Graph
--Single Source Shortest Paths by Length
-Shortest Simple Paths
--Bidirectional Shortest Paths

Considering the algorithms that I need, I think it will be beneficial to use an available library to the extent that an appropriate library is available.

JSNetworkX is more sophisticated that CytoScape.js, I think.

JSNetworkX


----------
Design, Topology View

I want a view to depict topology of relations between individual entities in the metabolic model.
The Topology View is probably a greater priority than the Set View.

User selections of attributes in the Attribute Menu will filter the nodes that the network includes.

Be able to define the metabolic network either with or without distinct nodes for compartmental metabolites.
Sketch 2017-02-15_1 explores some of the different representations of the network with and without distinct nodes for compartmental metabolites.

Compartmental Metabolites

General Metabolites
Ignore transport reactions.
Be careful as to which type of transport reactions to ignore.
Multi-compartmental transport reactions are not necessarily a problem.
Transport reactions that involve the same metabolite as reactant and product might be more messy and unnecessary in the network.

Topological Search
Enable the user to search the topology of the network by proximity (neighborhood) or by path (k shortest paths).
Sketch 2017-04-05_1 depicts necessary parameters for topological searches and potential interface designs to control these.
The available nodes and links in the network depend on user selections of attributes from the Attribute Menu.
The user will select a focus node for proximity searches or origin and destination nodes for path searches.

Proximity Search
Focus node.
Depth of search.
Do not worry about exclusions from the network.
Selections of attributes give sufficient control over which parts of the network to include.

Path Search
Origin node.
Destination node.
Whether or not to consider directionality of links.
Count of shortest paths to consider.
Do not worry about exclusions from the network.
Selections of attributes give sufficient control over which parts of the network to include.

Within the Topology View, I think the user should be able to select individual entities and inspect information about those entities.

Notes on 5 April 2017 include information about functionality for network topological searches.

----------
Design, Set View

I want a view to summarize sets in the metabolic model.

Similar to Ethan Kerzner's project that I mentioned in notes on 30 May 2017, I still think that paths between sets might be interesting for the metabolic network.
I do not consider this aspect of the Set View to be a great priority, largely due to computational complexity.
The Topological View will give access to paths and other aspects of topology.
If the user can identify individual entities from sets, then the user can search paths between those individual entities.

I think the user should be able to search lists of entities within each set.

--------------------------------------------------
31 May 2017

----------
Meet with Alexander Lex

The attribute menu needs labels on bars or at least tool tips.
The search menus could use some indication of selection status.

The summary on the basis of cardinalities of sets and pairs of sets might still be useful.
It might also be beneficial to include paths between sets.
The problem with paths between sets is the computational demand of computing these paths.

Alex recommends focusing on the most practical aspect of the data.
Topological information of relations between individual entities is a priority.
It will almost certainly be useful to combine the attribute selections with topological selections.
Allow the attribute selections to narrow the network.
Then select individual nodes and links by proximity and path within the attribute-specific portions of the network.

----------
Plan

I still need to define and populate pairs of sets.

----------
Progress, Definition and Population of Sets

Functions define sets from a single attribute type or a combination of multiple attribute types.
Functions determine the cardinalities of these sets from entities in the attribute index.

I confirmed that the cardinalities of sets for compartments are consistent with the counts in the attribute summary.
I also confirmed that the functions determine cardinalities for combinations of compartment and operation.

--------------------------------------------------
30 May 2017

----------
Plan for Meet with Alexander Lex

Demonstrate Attribute Menu with interaction.
Describe design and plan for Set View.
Describe progress on defining and populating sets.
Describe idea for including paths in Set View.
Describe also design and plan for Entity View.

----------
Design Ideas

Ethan Kerzner presented about his publication for the EuroVis Conference of 2017.
Ethan used categories or sets of nodes to simplify networks and represent high-level trends in a more concise way.
Ethan primarily focused on representing paths of a certain length between sets.
In Ethan's network, a node only belongs to a single category or set of a specific type.
An airport is usually only in a single state or country.
A cell in the retina is only a single type of neuron.

In the metabolic network, entities of metabolites and reactions can belong to multiple categories or sets.
For that reason, it might be interesting to consider both the counts of entities within sets and the counts of entities in common between multiple sets.
I wonder if it would also be interesting to incorporate paths between sets like Ethan did.
For this purpose, it might be difficult or ambiguous to determine to which set a metabolite or reactions belongs, but it would be possible.
Including paths between sets in this way would be a useful strategy to incorporate information about the topology or connectivity of the network.
I also would like to somehow include information about degree and centrality of nodes in the network.

--------------------------------------------------
29 May 2017

----------
Method, Populate Sets and Combination Sets

For a record of an entity in the Attribute Index, determine all of the sets that it matches.
Determine which attributes to use in definition of sets.
These attributes might come from user interaction, or it might be necessary to determine them automatically.
Organize information about an entity's set attribute values within arrays of objects.
Each array will be for a single attribute.
Each object will include information about both the attribute and its value.
Organize these arrays within an object for convenience.
Pass an array of these arrays to function computeCartesianProduct and recover the new combinations of attributes and values for sets.

compartmentArray: [
  {
    attribute: "compartment",
    value: "c"
  },
  {
    attribute: "compartment",
    value: "m"
  }
]

processArray: [
  {
    attribute: "process",
    value: "process_10"
  },
  {
    attribute: "process",
    value: "process_15"
  }
]

--------------------------------------------------
27 May 2017

----------
Algorithm, Cartesian Product, JavaScript

I want a functional, immutable, recursive algorithm to compute the Cartesian Product of a variable count of arrays with a variable count of elements in each array.
I give preference to strategies that use concise methods of native JavaScript.

I patterned a preliminary solution from a function I found on Stack Overflow.
The author of the function is Danny who submitted his function to Stack Overflow on 26 March 2016 (Reference 1).
My version of Danny's function has different variable names but is very similar otherwise.

function computeCartesianProductDannySolution(sets) {
    return sets.reduce(function (productSets, set) {
        return productSets.map(function (productSet) {
            return set.map(function (element) {
                return productSet.concat(element);
            });
        }).reduce(function (collection, element2) {
            return collection.concat(element2);
        }, [])
    }, [[]]);
}

Danny's use of a map method on product sets requires an extra reduce method to collapse the unnecessary arrays.

My final solution avoids this excessive expansion by using a reduce method in place of the map method.

function computeCartesianProduct(sets) {
    // An example of sets is
    // [["a", "b", "c"], ["1", "2", "3"], ["!", "#", "*"]].
    return sets.reduce(function (productSets, set) {
        return productSets.reduce(function (setCombinations, productSet) {
            var combination = set.map(function (element) {
                return productSet.concat(element);
            });
            return setCombinations.concat(combination);
        }, []);
    }, [[]]);
}

References
More Helpful
1. https://stackoverflow.com/questions/12303989/cartesian-product-of-multiple-arrays-in-javascript
2. https://stackoverflow.com/questions/1266402/whats-a-good-mathematical-sets-implementation-in-javascript/5626737#5626737
3. https://stackoverflow.com/questions/15298912/javascript-generating-combinations-from-n-arrays-with-m-elements
4. https://stackoverflow.com/questions/2836087/generating-all-permutations-of-character-combinations-when-of-arrays-and-lengt
Less Helpful
https://stackoverflow.com/questions/4331092/finding-all-combinations-of-javascript-array-values
https://stackoverflow.com/questions/12152409/find-all-combinations-of-options-in-a-loop
https://stackoverflow.com/questions/9422386/lazy-cartesian-product-of-arrays-arbitrary-nested-loops

----------
Method, Populate Sets and Combination Sets

Need
Given a record for an entity in the Attribute Index, determine all of the sets that it matches.

Organize information about sets within an array of objects.
Objects contain information about attribute-value criteria for each set.

How can I access sets by a variable number of attribute criteria?
Use the Array.every() method together with the Array.filter() method.
Filter the array of sets using the Array.every() method.
If the length of the resulting array is >= 1, then you have a match.
Remove the existing set from the array.
Update the existing record for the set (increment count).
Concatenate the new record for the set to the array, in place of the previous record.
Otherwise create a new set and concatenate it to the array.

--------------------------------------------------
26 May 2017

----------
Method, Populate Sets and Combination Sets

For each entity in Attribute Index

Determine which sets the entity matches.
Determine which combination sets the entity matches.
To do that, compute Cartesian products for the entity according to the selected attribute criteria and the entity's attribute values.
For combination sets, compute all pair-wise combinations of all set permutations.
Create and initiate a record to count the entity if the set is new.
Increment counts in a record if the set is old.

If I have a variable number of attribute criteria, then how will I check for and access specific records by a variable number of attributes?
Would it be easier to construct string identifiers?


----------
Plan

I will need to figure out how to structure the data for the adjacency matrix in the Set Relation View.
Maybe I should first figure out how to get these data.

Only include attributes as options to define sets if they have between 2 and 10 values.
Otherwise those attributes would define too many sets.

----------
Meet with Alex Bigelow and Sean McKenna

Alex recommended not to compute all possible permutations in the Cartesian Product of attribute sets.
Instead, Alex recommended determining the combinations from the attribute index.
Possible permutations expand very rapidly.
The data limit the possible permutations substantially.
Many possible permutations would only describe empty sets anyway.
According to the attribute that the user selects to define sets, accumulate the possible combinations from the data while populating the sets.

Alex also recommended using an adjacency matrix in the Set Relations Interface.
A node-link diagram would become far too complex and useless with more than about five sets.

Alex and Sean noticed that my design only considers intersections between two sets.
My design does not support any representation for entities that occur simultaneously in more than two sets.
I was aware of this limitation, and I think it is a reasonable simplification in order to accommodate more than three sets.

----------
Algorithm, Cartesian Product, JavaScript

I want a functional, recursive algorithm to compute the Cartesian Product of a variable count of arrays with a variable count of elements in each array.

Input: [[a, b, c], [1, 2, 3], [!, #, *]]
Output: [
  a1!,
  a2!,
  a3!,
  a1#,
  a2#,
  a3#,
  a1*,
  a2*,
  a3*,
  ...
  c1*,
  c2*,
  c3*
]

Eventually, my input will look more like this...

Input: [
  [
    {
      attribute: compartment,
      value: c
    },
    {
      attribute: compartment,
      value: m
    }
  ],
  [
    {
      attribute: process,
      value: process_10
    },
    {
      attribute: process,
      value: process_15
    }
  ]
]

References
https://stackoverflow.com/questions/1266402/whats-a-good-mathematical-sets-implementation-in-javascript/5626737#5626737
https://stackoverflow.com/questions/2836087/generating-all-permutations-of-character-combinations-when-of-arrays-and-lengt
https://stackoverflow.com/questions/12303989/cartesian-product-of-multiple-arrays-in-javascript
https://stackoverflow.com/questions/4331092/finding-all-combinations-of-javascript-array-values
https://stackoverflow.com/questions/15298912/javascript-generating-combinations-from-n-arrays-with-m-elements

----------
Set Theory, Cartesian Product

https://en.wikipedia.org/wiki/Cartesian_product

User interaction with the Attribute Menu Interface selects sets of entities with specific values of specific attributes.
In the Set Relations Interface, I want to define sets by combinations of attributes of different types.
I want to take Cartesian Products of these sets.

----------
Attribute Sets and Set Relations

At least for now, I think that the maximal count of attributes by which to define sets should be two.

As I said in notes on 25 May 2017, Set Relations can be redundant, describing relations between more than two sets.
A Set Relation for Compartment A and Processes 1 and 2 will describe relations between sets Compartment-A:Process-1 and Compartment-A:Process-2.
A separate Set Relation for Compartment B and Processes 1 and 2 will describe relations between sets Compartment-B:Process-1 and Compartment-B:Process-2.

Sets
A-1
A-2
B-1
B-2

Relations (Sets)
A-1,2 (A-1:A-2)
B-1,2 (B-1:B-2)
A,B-1 (A-1:B-1)
A,B-2 (A-2:B-2)
A,B-1,2 (A-1:B-2, A-2:B-1)

--------------------------------------------------
25 May 2017

----------
State in Set Relation View

It will be necessary to keep track of state of attribute options and user selection of attribute options.

If user has not made any explicit selections of attributes, I want to determine a default selection.
If user has made an explicit selection, I want to preserve that selection even as the data change.
Or, I could always determine a default selection when the data change and require the user to make explicit selections each time.

For now, I think I should require the user to make a new selection after every change to the attribute menu.
The program will determine a default selection.

----------
Attribute Sets and Set Relations

Set Relations are really sets themselves.
Their criteria are combinations of those from two (no more) sets.

Set Relations will actually describe relations between more than two sets.
Set Relations are redundant.
A Set Relation for Compartments A and B and Processes 1 and 2 will describe relations between sets Compartment-A:Process-1, Compartment-A:Process-2, Compartment-B:Process-1, and Compartment-B:Process-2.

I am trying to figure out if Set Relations should have some specific reference to their sets.
I do not know if that is a good idea, especially because Set Relations are not specific to only two Sets.

--------------------------------------------------
24 May 2017

----------
Plan, Event Executions in Set Relations View

... Maybe I should just atart implementing functionality and then organize it once I need to.

This plan for interaction is very helpful and follows the pattern for the Attribute Menu in notes on 5 May 2017.
It clarifies how to structure functionality in the program and to which parameters each function needs access.

1) Initialization of Set Relations View
-Create invariant aspects of the view such as control buttons.
-Set initial option variables, such as which type of visual representation to draw (node-link diagram or adjacency matrix).
-...

2) Restoration/Update of Attribute Menu
-Receive current attribute index from selections and filters in Attribute Menu.
-Determine all values of all attributes that current entities in the attribute index possess.
-Determine attributes with multiple values that are suitable to define discriminatory sets.
-Define sets either by current selections of attributes or by default options (ranking based on current options).
-Populate sets and relations between sets.
-Draw visual representation of sets and relations between sets.

3) Selection of Optional Attributes to Define Sets

4) Selection of Sets or Relations Between Sets

----------
Populating Sets and Relations Between Sets

Provide function access both to the attributes that define sets as well as to the available values of those attributes.
If multiple attributes define sets, the function will somehow need to determine the combinations of attribute values that define sets.

To populate relations between sets, the function will need to determine all permutations of pairs of sets.

Maybe I should have a separate function to determine combinations of attribute values for sets and pairs of sets.
Then I can pass those combinations to another function to populate these.
The function for populating will need to use appropriate AND/OR logic for each type of combination.

----------
Data Structure for Set Relations

I want my data structure to be convenient both for visualization in a node-link diagram and an adjacency matrix.

In D3, it is convenient to create node-link diagrams from arrays of nodes and links.
In D3, I am not sure if a standard method or strategy exists for creating adjacency matrix layouts.

----------
Inclusion Logic for Populating Sets and Relations Between Sets

In the Attribute Menu, all attributes determine which entities remain in the attribute index.
In the Set Relation View, it is only necessary to keep track of the attributes that define the sets.
Ignore the other attributes, as consideration of these would be redundant.
Is that a good idea?
That means that the Attribute Menu will remain a primary interface to influence the Set Relation View.

If a single attribute defines the sets, then there will be a single set for each available value of the attribute.
If multiple attributes define the sets, then there will be a single set for each combination of single values of each attribute.

----------
Literature Relevant to Biological Networks

"Graphical Features of Functional Genes in Human Protein Interaction Network"
https://www.ncbi.nlm.nih.gov/pubmed/26841412
Graph-theoretical analysis of human protein interaction network.
Atrocious Venn Diagram.

"Metabolomics analysis: Finding out metabolic building blocks"
https://www.ncbi.nlm.nih.gov/pubmed/28493998

"A generative model for protein contact networks"
https://www.ncbi.nlm.nih.gov/pubmed/26474097

----------
Visual Representations of Metabolic Network in Literature

"3DScapeCS: application of three dimensional, parallel, dynamic network visualization in Cytoscape"
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3835703/

"Identification of Biochemical Network Modules Based on Shortest Retroactive Distances"
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3213171/

"Gene Expression Profile Change and Associated Physiological and Pathological Effects in Mouse Liver Induced by Fasting and Refeeding"
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3212576/

--------------------------------------------------
23 May 2017

----------
Set Relation Menu, Processes

Set Relation Menu receives a current attribute index from the Attribute Menu.

1) Determine all values of all attributes that current entities in the attribute index possess.
-Derive this collection from entities in the current attribute index to ensure non-empty sets.
-Structure these data like the filters for the attribute index in the Attribute Menu.

2) Determine attribute types (process, compartment, etc) that are suitable to define sets.
-Only attributes with multiple (> 1) non-empty values can define discriminatory sets.

3) Define sets.
-Present user with options and receive selection of attributes to define sets from user.
-Maybe assign default parameters to define sets.
-Name sets according to the attribute(s) that define them.
-For example, even if there are also selections of processes and other attributes, only label sets by compartments if compartment is the defining attribute.

4) Populate sets.
-Populating all possible permutations of sets would be inefficient.
-Populate sets after explicit definition.
-Iterate on entities in the attribute index.
-Include the entity's identifier or at least count if it possesses all of the attribute values that are criteria for the set.

5) Populate relations between sets.
-Include the entity's identifier or at least count if it possesses all of the attribute values that are criteria for the two sets.
-Only consider relations between two sets.
-Use AND logic to determine entities in common between pairs of two sets.

----------
Plan, Set Relation Menu

Only those entities that match filters from user selection in Attribute Menu are accessible in Set Relation Menu.

User selects attributes to define sets.
Attributes are options only if the selection of entities includes multiple values.
Otherwise, an attribute with a single value is useless for defining sets.
For example, if user selects only entities for reversible reactions, all sets will represent entities for reversible reactions.

All attribute types define sets at the top hierarchical level.
For example, both cytosolic and mitochondrial compartments in combination cannot define a single set.

Tentative Data Structure
Store information about sets and relations between those sets separately, such as within the same object.

----------
Plan

Attribute Menu
-Temporary tool-tip labels for values of attributes on cursor hover
-Persistent labels on bars for values of attributes
--Adjust labels to widths of bars
--I worry that these labels would impart excessive clutter to the menu
-Constant widths of attribute header cells, even upon introduction of search fields
-Persistent text search fields for attribute values
--Maybe
-Indication of selection status in text search fields for attribute values
--Use text content of option elements so status appears in grey
--Options of text search fields provide replicate view of attribute values

Set Relation
-Data structure for sets and relations between sets
-Set relation view
--In notes on 11 May 2017
--Relations between sets support access to entities by AND logic within the same attribute type (example: metabolites in cytosol AND in mitochondrion)

----------
Progress

The attribute index, attribute summary, and attribute menu include the attributes process, compartment, operation, and reversibility for both metabolite and reaction entities.

Values of these attribute are selectable directly from the attribute menu bars or by text search.
It is possible to filter the attribute menu to show only the values of attributes with current selection.

--------------------------------------------------
22 May 2017

----------
Plan

----------
Idea

Set Analysis: Consider the count of metabolites that participate in any reactions in each compartment.

Entity Analysis: Consider the count of reactions in which a single metabolite participates in each compartment.

--------------------------------------------------
20 May 2017

----------
Progress, References to Reactions in Metabolite Records

In the assembly of the metabolic model, I included in records for metabolites references to all reactions in which the metabolites participate.
The purpose for these references was to simplify the inclusion of metabolites in the attribute index.
The attributes of metabolites depend on the reactions in which they participate.

The process for the new assembly requires about 2 minutes.
The file size of the new assembly of the metabolic model is 3.869 Megabytes.
The file size of the previous assembly of the metabolic model (from 24 April 2017) was 3.538 Megabytes.

--------------------------------------------------
19 May 2017

----------
Plan, Attribute Index for Metabolites

For each metabolite, consider all the reactions in which that metabolite participates.
It might be efficient to collect identifiers of a all of a metabolite's reactions during model assembly.
From these reactions, determine compartments (metabolite may have multiple compartments in a single reaction), processes, operations, and reversibilities for the metabolite.

----------
Plan, Attribute Menu

Include metabolite entities in the attribute index and the attribute summary.

Include labels on bars according to width of bars.

----------
Plan, Attribute Search Menu

Fix widths of attribute headers so that the creation of the search text fields does not change these widths and change the entire attribute menu.
Handle text overflow in the options of the search text fields.
Consider inclusion of some indicator of selection status in the options of the search text fields.

----------
Progress

Upon user selection of a header for an attribute, a search text field appears with options for all available values of that attribute.
These options only include those values that are currently in the attribute menu, dependent on the filter option.
User selection of an option selects the value of the attribute in the attribute menu.

--------------------------------------------------
18 May 2017

----------
D3 Selection and Data Propagation

--------------------------------------------------
16 May 2017

----------
Event Handlers
Avoid Replication With Change to Parameters

The state of a program changes in response to user interaction.
In an object-oriented programming paradigm, event handlers can always access the current state of the program through class-level variables.
In a functional programming paradigm, event handlers require reactivation when the relevant state of the program changes.
This reactivation is necessary to give the event handler the new parameters that correspond to the current state of the program.
To avoid replication of event handlers, it is necessary to ensure the removal of previous event handlers before addition of new event handlers.

Several strategies are available.

1.
Define function with name for event handler in the global scope and subsequently remove it by name.
If the event handler's functional definition is in the global scope, then its name is accessible for subsequent removal.
Also, it is possible to set options of addEventListener to avoid replication.
Example:
element.addEventListener(eventType, eventHandler(event));
...
element.removeEventListener(eventType, eventHandler);

2.
Define function with name for event handler in local scope and subsequently remove it after first execution within same local scope.
If the event handler's functional definition is in the local scope, then its name is accessible for removal only within this scope.
It is important to realize that by this strategy it will not be possible to remove event listeners for all radio buttons in a group when a single radio button changes.
The problem is that the name of the event handler function for each separate radio button is only accessible within its own individual scope.
Example:
element.addEventListener(eventType, function handleEvent(event) {
  // Execute some process.
  // Remove event listener and handler after first execution of process.
  event.currentTarget.removeEventListener(event.type, handleEvent);
});

3.
Define anonymous function for event handler in local scope and subsequently remove all event handlers in any scope.
If the event handler's functional definition is in the local scope, then its name is accessible for removal only within this scope.
The Document Object Model does not support subsequent access to event handlers unless these have a name that is accessible in the current scope.
The Document Object Model does not support subsequent removal of all event handlers from an element.
It is only possible to clone the element and remove the original element with its event handlers.
The original element eventually exits the document by garbage collection.
Example:
oldElement.addEventListener(eventType, function (event) {
  // Execute some process.
});
...
// Clone element without its event handlers.
// Remove original element with all of its event handlers.
var newElement = oldElement.cloneNode(true);
oldElement.parentNode.replaceChild(newElement, oldElement);

--------------------------------------------------
12 May 2017

----------
Filter Attribute Index
Implementation

For each record in the attribute index, I need to determine whether or not it matches the filters.
If the record matches the filters, I need to reduce the attribute values of the record to include only those values that match the filters.

I could perform both operations in the same iteration, or I could perform them in separate iterations.
The choice depends on computational performance and clarity of the code.

I think that performing both operations in the same iteration will probably be preferrable.

----------
Filter Attribute Index
Design, Strategy

On 11 May 2017 I made a note about a confusion in the process of filtering the attribute index.
Entities can have multiple values of a single attribute.
The problem is whether or not to consider those attribute values of an entity that do not match filters.
I think that the solution is to only consider those attribute values that match the filter.

When filtering the original attribute index (always filter the original attribute index), only keep an entity's attribute values that match filters.
That reduction of attribute values is necessary for the attribute menu and set relations to make sense.
If a user selects only 3 compartments, those should be the only 3 compartments in consideration.

The filter operation for the attribute menu will still behave the in the same way.
If filter is false, attribute menu will represent the original attribute index without any filtration.
If filter is true, attribute menu will represent the current attribute index with filtration.

--------------------------------------------------
11 May 2017

----------
Filter Attribute Index
Query Logic
Observation

A single entity (metabolite or reaction) can have multiple values of the same attribute.
For this reason, selecting a single value of an attribute does not mean that all other values will be excluded from the new attribute index.
The effect in the attribute menu is very confusing.

Of course, this problem is only apparent when the filter option is true.
Maybe just deal with the problem as part of the filter option.

What if I replicated records for entities for each value of each attribute?
That does not seem like an efficient or orderly solution.

I like this solution.
Keep an entity record if any of its values of an attribute match the selection filter.
After this filter, ignore all the other values of that entity, if and only if the filter option is true.
Do not change the original attribute index, but just consider the selection when determining which attribute values to consider in the current attribute index and the attribute menu.

----------
Filter Attribute Index
Query Logic

Also refer to notes of 17 April 2017.

This program simplifies the metabolic network in terms of sets of common attributes.
While different attributes, such as compartment and process, have a many-to-many relationship, this program artificially imposes some level of hierarchy.

The supreme hierarchical level of the filter query is the attribute.
(attribute 1: criteria 1 or 2) AND (attribute 2: criteria 1 or 2)
My strategy does not support mixing attribute types at the top level.
I think this simplification is reasonable.

Use OR logic between values of a single attribute.
It is true that AND logic is relevant between values of a single attribute.
For example, it might be interesting to consider metabolites that appear in both the cytosolic and mitochondrial compartments.
For example, it might be interesting to consider reactions that participate in both glycolysis and the citrate cycle.
From a set-based perspective, this AND logic constitutes relations between values of a single attribute.
Relations between sets will give access to this AND logic.

Use AND logic between values of different attributes.
This strategy seems most reasonable in order to support specific selections.
Using OR logic would allow filters for one attribute to over-ride filters for another attribute.
I worry that using OR logic between attribute types would be unruly and difficult to use or understand.
For example, even if cytosol was the only selected compartment, a process might introduce entities from other compartments.

--------------------------------------------------
7 May 2017

----------
Avoid Replication of Event Listeners and Handlers

When defining event listeners and handlers with anonymous functions (not in global name space) it is possible to create replicate listeners and handlers if the activation operation executes multiple times.
There are various ways to avoid this problem.
For a single element, it is possible to set the once option to true so that the handler only executes once before removal.

https://triangle717.wordpress.com/2015/12/14/js-avoid-duplicate-listeners/

--------------------------------------------------
5 May 2017

----------
Control element classes with D3

https://jaketrent.com/post/d3-class-operations/

----------
Plan, Event Executions of Attribute Menu

This plan for interaction is very helpful.
It clarifies how to structure functionality in the program and to which parameters each function needs access.

1) Initialization of Attribute Menu
-Initialize attribute menu with invariant aspects of table and control buttons.
-Create comprehensive, original attribute index from metabolic model.
-Extract comprehensive, original attribute summary from original attribute index.
-Create and activate attribute menu table on basis of current attribute summary, with consideration of entity selection and filter option.

2) User Selection of Value in Attribute Menu
-Set new selection status in attribute summary.
-Assign new style classes to appropriate elements in attribute menu.
-Extract filter details from all selections from attribute summary.
-Filter original attribute index according to filter details.
-Pass new, filtered attribute index to other views.
-Create and activate attribute menu table on basis of current attribute summary, with consideration of entity selection and filter option.

3) User Selection of Entity in Attribute Menu
-Create and activate attribute menu table on basis of current attribute summary, with consideration of entity selection and filter option.

4) User Change to Filter Option Check Box
-Create and activate attribute menu table on basis of current attribute summary, with consideration of entity selection and filter option.

5) User Selection of Reset
-Extract comprehensive, original attribute summary from original attribute index.
-Create and activate attribute menu table on basis of current attribute summary, with consideration of entity selection and filter option.

----------
Plan, Implementation of Attribute Menu

1) Attribute Menu Selection
-Record selection status within attribute summary data for attribute menu table.
-Determine classes and styles of bars in attribute menu table according to their selection status.
-Upon user selection, determine selection status from attribute summary and update new attribute summary accordingly.
-Upon user selection, extract selection details from new attribute summary and use these to filter the attribute index, passing new attribute index to other views.
-Always filter the original attribute index (not derivations) in order to allow the user to deselect an attribute value (regress).
-Upon user selection, recreate the attribute menu with the new attribute summary in order to update style classes for the new selection.

2) Attribute Menu Filter
-In order to represent only current entities in the attribute menu, it will be necessary to derive a new attribute summary from a new, filtered version of the attribute index.
-Each user selection will generate a new, filtered version of the attribute index.
-If the filter option is true, derive the attribute summary from the filtered version of the attribute index and ignore any selections in the attribute summary.
-If the filter option is false, derive the attribute summary from the original version of the attribute index and preserve selections in the attribute summary.
-Upon change to the "filter" option check box, re-call the appropriate control function.
-Eliminate all indications (highlighting) of selections, since every bar in the new table represents a selection.

3) Attribute Menu Search Selection
-Include value identifier and value name in attribute summary data.
-Determine document identifiers for bars from value identifiers ("attribute-menu-value-c").
-Determine document identifiers for attribute headers from attribute names ("attribute-menu-attribute-compartment").
-Upon user selection of attribute header, create automatic-completion-search-field with names of all values of the attribute that are currently in the attribute menu.
-Options indicate selection status of each value of the attribute in the menu.
-Selection of a value causes a selection (updating appropriately) of the value.
-I wonder if the search field should have a "+" button or something to actually select the option from the search field.
-Selection of the attribute header again causes the search field to disappear.

--------------------------------------------------
4 May 2017

----------
Plan

Data that associates with bars for attribute values needs to include value identifier and value name.

Bars for attribute values need identifiers so that it is possible to select them by looking them up in an automatic completion search field.

I need to store information about selections in the data for the attribute menu.
Upon each selection, I need to extract this selection information and apply all filters to the attribute index.
I think it will be simplest to always filter against the original version of the attribute index, as long as this filtration is not a resource limitation.
That way the user can deselect a bar whenever.
I will need to store the original version of the attribute index.

----------
Attribute Menu, New Design

Some details of this design are temporary to simplify development.

Attribute menu displays stacks of bars for all values of all attributes that are currently in the attribute index.
User clicks on a bar to select its attribute value for inclusion in the collection of interest.
The attribute menu does not change directly in response to this user selection.
It is necessary to keep all options available for "or" selections.
Eventually provide a "filter" button to update the attribute menu (similar to my original plan for a "submit" button).
The user can click the bar again to remove the selection.
In response to user selection or deselection of an attribute value, the attribute index experiences a filtration, and the results automatically update the set relation view.

User can click the row header for an attribute ("compartment", "process").
Upon click, an automatic-completion search field appears, enabling the user to identify an attribute value by name.

--------------------------------------------------
3 May 2017

----------
Meet with Alexander Lex

Alex recommended a new design for user interaction with the attribute menu.

----------
TODO

Create table and assign classes to bars according to their selection status.
Upon click of a bar, determine what type of selection (none, inclusion, exclusion) and make a record in the newAttributeSummary.
Call controlAttributeTable with the newAttributeSummary.

----------
Bar Selection, Filter Queue

User selection needs to do two things.
1) Somehow convey information about the selection eventually to filter the attribute index when the user clicks submit.
2) Change the visual representation of the bar or bars to represent the selection visually.

My original plan was as follows.
1) Store information about the selection in a filter queue that was separate from the attribute summary information on which the attribute table is based.
2) Change the classes of the bar to represent the selection.

There are problems with that original plan.
1) The user might change the entity selection from "metabolite" to "reaction" or vice versa during assembly of a query.
If the entity changes, then bars will no longer necessarily represent the same value of the attribute.

Here is my new plan to handle user selection of a bar for a value of an attribute.
Include a record of the selection in a new version of the attribute summary.
Call the table-creation function again with the new version of the attribute summary.
The table-creation function will reset the classes of all bars according to whether or not the data has a record of a selection.

Maybe I should pass around two versions of the attributeSummary.
Otherwise, I wonder if it will be a problem to prepare the attribute summary each time the user makes a selection.

----------
Recursive Interface Structure

Follow principles of recursion to support iterative or incremental user interaction with the interface.
As interaction changes values or data, update the interface by a recursive call to an update function.

Unlike typical recursion, this sort of recursion does not depend on if then conditions.
Rather, this sort of recursion depends on events of user interaction.
For this reason, the recursion will probably be indirect, through another function.

--------------------------------------------------
2 May 2017

----------
Recursive Interface Structure

Control Attribute Menu
Initialize: Start-up, Reset
Recurse until: Reset
Subordinate process: Control Attribute Menu Selection

Control Attribute Menu Selection
Initialize: New Menu
Recurse until: Submit

----------
Dynamic Interface Recursion

Control an interface by recursion.
With each interaction, update the interface appropriately, passing the new version of whatever data it associates with.
Model the interface in terms of levels of recursion.
Some events recurse lower levels, and others recurse higher levels.

----------
Plan, Data from Selection and Filtration

Store information about user interaction within an object in memory, not in the elements of the Document Object Model (DOM).
When an event requires the data from an element in the DOM, use D3 event listeners at least to initiate the event and pass the relevant data.

When user selects a rectangle, perform two operations.
1. Update selection information in filter queue.
-Determine attribute and value from data of rectangle.
-If a record for the attribute and value already exists in the filter queue, update the queue appropriately.
2. Update style class of rectangle.
-Determine current classes and update accordingly.

----------
Plan, Attribute Menu Interaction

Selection of Bars
The user can click on individual bars to select them.
Clicks on bars will toggle between selection for inclusion and selection for exclusion.
The user can also click and drag the cursor to select multiple bars at a time.
This drag technique will be useful to zoom in on many small bars, such as those for processes.

Eventually
User can select the name of the attribute ("compartment", "process", etc).
Upon selection, an auto-completion search text field will appear below the name of the attribute.
The user can enter the name of the value of the attribute.
Upon selection of an option from the list, the corresponding rectangle in the bar stack will have a highlight and become selected.

Submit
A submit button will allow the user to update the attribute menu to reflect her or his selections.
The user will be able to select multiple values of multiple attributes at a time.
The submission process will filter the attribute index according to the user's selections for inclusion or exclusion.
The process will then update the attribute summary and the attribute menu according to the new attribute index.

----------
Functional Programming

https://bethallchurch.github.io/JavaScript-and-Functional-Programming/
http://jrsinclair.com/articles/2016/gentle-introduction-to-functional-javascript-style/

--------------------------------------------------
30 April 2017

----------
Plan

Enable interactivity with the set menu.

----------
Progress, Set Menu

The set menu now has bar stacks with widths that are proportional to counts of entities for each value.
There are very many bars for processes, and it is difficult to distinguish between adjacent bars.
I wonder if it would be beneficial to draw the set menu across the entire width of the view to maximize width of this menu.
Then the lower portion of the screen could split evenly between the view for relations between sets and the view for individual entities.

--------------------------------------------------
27 April 2017

----------
Plan, Attribute Set Relations

I will eventually need to extract both the membership and relations between attribute sets.
I will need those relations when I get to the relations view.
Before extracting membership and relations, the user will need to define the sets by either individual attributes and values or combinations thereof.

----------
Progress, Set Summary

I completed creation of the set summary.
The set summary is a collection of counts of entities with each value of each attribute.

--------------------------------------------------
26 April 2017

----------
Meet with Alexander Lex

Rationale for data structure in query process

----------
Problem, Assembly of Summary of Attribute Set Index

Option 1
Use three separate reduce operations.
1. Use reduce to iterate over records in the set index.
2. Use reduce to iterate over attributes within a single record.
3. Use reduce to iterate over values of a single attribute.
It is simple to count instances of each value in the third reduce operation.
The challenge is in the first and second reduce operations.
These operations must access matching attributes and values if they exist in order to increment them.
I would need to use a for each loop to iterate over all values.
I would need to test if each value exists in the current collection before incrementing the count.
This strategy is very complex due to the many levels of the data.

I was trying to partition and count multiple values of multiple attributes in multiple records in my set index.
I was trying to use a hierarchy of three reduce operations for records, attributes, and values respectively.
I decided that strategy was too complex.

Option 2

--------------------------------------------------
25 April 2017

----------
Query Data, Metabolites and Reactions

Store indices for metabolites and reactions within a single table.
Hence filtration steps will apply to both metabolites and reactions simultaneously.
It will only be necessary to apply each filter to the single table.
From that single table it will be simple to obtain metabolite or reaction entities.
It will also be simple to filter to obtain the counts of entities in each attribute set.

----------
Query Data, Attributes of Entities

Option 1
Determine attributes of entities a single time.
Store this information in an index table, and use this table in the query filtration process.
After filtration, it will be simple to study the collection in terms of attribute sets, because the attributes will already be available.

Option 2
Determine attributes of entities multiple times, whenever they are necessary.
Determine these attributes for each filtration step.
After filtration, determine these attributes again to study the collection in terms of attribute sets.

Option 1 is more efficient.

--------------------------------------------------
24 April 2017

----------
Plan, Index

Immediately after loading model data, assembly the index table for the query process.

/identifier/   /entity/     /compartment/   /process/     /operation/                    /reversibility/
identifier     metabolite   [compartments]  [processes]   [conversion and/or transport]  true or false
identifier     reaction     [compartments]  [processes]   [conversion and/or transport]  true or false

----------
Progress, Model Assembly

I completed the new process for model assembly.
Assembly of the new version of the model requires about 1 minute of time on my computer.
The file for the new version of the model in JSON format has a size of 3.538 Megabytes.

----------
Plan

I think that I will need three different collections of data.
1. Entire Index Table
-The index table with attributes of all entities.
2. Working Narrow Index Table
-The index table with progressive filtration and selection.
3. Data for Query Visualization
-Extraction of counts of entities (either metabolites or reactions) from the working narrow index table.
-These counts determine properties such as widths of bars in the query interface.

----------
Meet with Alexander Lex

Query Interface

The problem with Sketch 2017-04-18_1 is that the hierarchical faceting approach interferes with readability.
For every level of sets it is necessary to replicate subordinate attributes.
For example, the user selects the cytosolic and peroxisomal compartments at the top level.
Then the interface must replicate all subordinate processes for each of these compartments.
This replication introduces excessive clutter to the interface, as in the bottom query interface in Sketch 2017-04-18_1.

Temporarily, Alex recommends ignoring hierarchy in the query.
The user will select compartments.
The interface will show all processes within this new selection, without splitting the processes by compartment.

Eventually, we might decide to introduce hierarchy to the query process.
Alex mentioned an icicle plot for this purpose.

Query Data

Organize information for the query within a single table.
The table will have a row for each metabolite or reaction.
The table will have columns for identifier, type (metabolite or reaction) and all attributes.
It will be simple to filter rows by multiple columns.

--------------------------------------------------
19 April 2017

----------
Model Data Check and Clean

Recon 2.2 model of human metabolism includes a record for the metabolite "cocaine(1+)".
That seems odd.
I did not realize that this model included xenobiotics.

--------------------------------------------------
18 April 2017

----------
Data Structure

I composed two outlines for data structure.

Sketch 2017-04-18_2
I attempted to compose a structure to organize the information of a set-based hierarchical query.
I am not confident that this structure is a good option.

Sketch 2017-04-18_3
I composed a structure for the information about entities and sets in the metabolic model.
I will not define nodes and links of a network until after the query process.
During or after the query process, the user will specify whether to construct the network with nodes for compartmental metabolites or general metabolites.

----------
Query Design

Sketch 2017-04-14_1, depicts the representation of sets in horizontal stacks of bars.
I like the idea of expanding the bars to represent the distribution of the current selection between the sets that it includes.
In sketch 2017-04-14_1, bars for selected attributes (such as compartments cytosol, mitochondrion, and peroxisome) expand to occupy the entire horizontal width in their respective proportions.
There are two options.

Option 1
Modify the representation of all attribute sets to represent the distribution of the current selection.

Option 2
For each attribute, make bars represent the distribution within that attribute type, ignoring all other attributes.

I prefer Option 1.

Make the bars update with each change to the selection.
The bars will represent the distribution between sets in the current selection.

--------------------------------------------------
17 April 2017

----------
New Plan for Query, Selection

Interface will provide visual representation of comprehensive list of reaction types, compartments, and processes that remain at each level.
It is important to give the user access to this comprehensive list.

Inclusion and exclusion filters act at the level of fundamental entities (metabolites and reactions) and follow an "any" type of logic.

And Logic
User clicks an attribute's bar once, and the bar changes color to green.
This selection specifies the attribute for inclusion.
Inclusion filters only retain fundamental entities if they have any attributes that satisfy the criteria.
1) For example, an inclusion filter retains a metabolite if it occurs in the specific compartment or process in any reaction.
2) For example, an inclusion filter retains a reaction if any of its metabolites occur in the specific compartment.
Subordinate attribute sets only include the portions of their entities that satisfied the superior attribute set criterion.
For example, only those metabolites of glycolysis that also occur in the cytosol remain in the selection.

Or Logic
Selection of multiple attributes within a single level constitutes an "or" logical combinator.

Not Logic
User clicks an attribute's bar twice, and the bar changes color to red.
This selection specifies the attribute for exclusion.
Exclusion filters only disgard fundamental entities if they have any attributes that satisfy the criteria.
1) For example, an exclusion filter disgards a metabolite if it occurs in the specific compartment or process in any reaction.
2) For example, an exclusion filter disgards a reaction if any of its metabolites occur in the specific compartment.

Limitations
-Mixture of attribute types at top level.
--Select all metabolites and reactions in the cytosolic compartment or in fat oxidation in any compartment.
---User must select all subordinate processes within cytosol and only select fat oxidation within all other compartments.
---That query would be ridiculously large anyway.

----------
Visual Query Builder
The interface needs to be simple, informative, and dynamic.
Many visual query builders are probably too complex, I imagine.
Examples
SQLeo
datapine WISTIA (https://www.datapine.com/)

Reference
https://www.quora.com/What-are-some-good-visual-SQL-query-builders

----------
Query, Selection

Plan
And Logic

Summary
I evaluate the strategy for queries and selections that I represented in sketch 2017-04-12_1 and 2017-04-14_1.
This strategy selects fundamental entities, metabolites and reactions, by criteria of attributes.
This strategy supports simple selections by hierarchies of attributes.
Of all available attributes at the top level, it is possible to select the specific attributes to include.
Then it is possible to select specific child or nested attributes to include.
For example, the selection includes those entities within a process that satisfy higher-level criteria, such as compartment.

Inadequate Support
The relationship between compartments and processes is many-to-many.
These relationships allow more complex or compound selection criteria.
My strategy does not support complex or compound selections.
It is only possible to select specific attributes by name to include in the selection.
The strategy essentially only provides inclusion criteria.

Examples of Inadequate Support
1. Select a process that involves both cytosolic and mitochondrial compartments but not the peroxisomal compartment.
-Work-Around
-User selects cytosolic and mitochondrial compartments.
-User manually inspects all processes for those that do not include peroxisomal compartment.
2. Select metabolites that participate in glycolysis and fat oxidation but not in the citrate cycle.
-Work-Around
-User selects glycolysis and fat oxidation processes.
-User manually inspects all metabolites for those that do not participate in the citrate cycle.

----------
Entities, Attributes, Sets

Entity
Metabolites and Reactions are the fundamental entities of the system.
I think that I will try to separate queries or selections by attributes and entities.
Maybe queries can involve attributes and selections can involve entities.

Entity: Metabolite
A metabolite is a fundamental entity of the system.
This metabolite is chemically unique.
A compartmental metabolite (cytosolic pyruvate) is a compound entity that depends on an attribute or set.
A compartmental metabolite is not a fundamental entity of the system.
A single metabolite participates in many reactions, many processes, and many compartments.
To represent distribution, such as in query, I will show the count of metabolites in each reaction, process, or compartment.
As a result, the total count will involve replicate counts of many metabolites.
I will also represent common metabolites that multiple sets share.

Entity: Reaction
A single reaction participates in a single compartment if it is a conversion type.
A single reaction participates in multiple compartments if it is a transport type.
A single reaction participates in a single process.
A single reaction has a single type.
To represent distribution, include a reaction in a set if any part of it, such as a single metabolite, satisfies the criteria.

Attributes, Sets
Compartment, process, reaction type
All of these attributes and sets are potentially not mutually exclusive.

--------------------------------------------------
14 April 2017

----------
Idea/Question

Maybe I should structure the model data differently for my new approach.
I do not even need to determine nodes and links of the network until after the query process.
Then I can determine nodes and links differently according to user desire for compartmental metabolites or otherwise.

Rather than committing to structure the data as a network with nodes for compartmental metabolites, organize relational records.
Reactions can keep track of metabolites that participate, as well as what compartment they are in.
Reaction
-Reactant
--metabolite
---pyruvate
---cytosol
Then I can create nodes for either compartmental or general metabolites on the fly.

----------
Attributes

With attributes for compartments and pathways, accommodate both compartmental and general metabolites.
Count compartmental metabolites (in a pathway)
Count chemically-unique metabolites (in a pathway)

----------
Program Organization

Metabolic Model
-Sets of attributes
-Network of nodes and links
--->
Query or Filter by Attributes
-Sets of nodes by attributes
--->
Sets of Nodes by Attributes
-Individual attributes or combinations
-Properties of sets
-Relations within sets
-Relations between sets
--->
Individual Nodes
-Properties of individual nodes (degree, centrality)
-Relations (links) between nodes
-Topological traversals

----------
Query Collection Data Structure

In Prototype 1, my primary entity for queries and collections was a node for either a metabolite or a reaction.
In Prototype 2, the fundamental entity is still a node, but I want to organize nodes by attribute sets.

--------------------------------------------------
13 April 2017

----------
Plan

Do I need to change the way the program handles queries?
Is it still effective to only collect node identifiers for metabolites and reactions?
Do I need to keep track of attributes and sets differently?

Option 1
Collect identifiers of nodes for metabolites and reactions.
Extract set attributes from those nodes.

Option 2
Collect attributes.
Collect sets of nodes for those attributes.

I do not know which option will be more efficient.

Also, I will need a new structure for the collection.
I will need to keep track of a hierarchy of sets.
For example, an object for compartment will include identifiers for all nodes in each compartment.
The object for each compartment will also include identifiers for all nodes in each process within that compartment.
That seems like a very redundant data encoding.

In my current encoding the entities (metabolites, reactions) themselves know to which sets they belong.
I suppose the question is which strategy is best for handling both the set-based queries and the set-aggregate visualization.

----------
Plan

Query Interface
Filter metabolites and reactions by attributes.

Aggregate Network
Specify attributes and combinations thereof to define aggregates.
Specify attributes to define relations between aggregates.
Specify which attributes (count of metabolites, reactions, or pathways) to use in scaling the aggregate nodes.

----------
Meet with Alexander Lex

"If you build it, they will come."
Technology preceeds scientific experimentation.
Developing a tool to explore and analyze metabolic networks in new ways might permit new uses and tasks.

The novelty of our project is the strategy of exploring the metabolic model by set aggregation.

Plan
For now, keep the old design of the query interface.
It is probably sufficient at least for development.
The higher priority is to work on the visualization of the aggregate network.

Query Interface
The new design for the query interface is an improvement.
It an option for giving overview and context in the query process.
There are also other potential options.
Alex described the approach of my design as a faceted approach.
The new design for the query interface still will not support complex hierarchical queries, but this level of complexity might not be necessary.

Aggregate Network
Specify aggregates by individual attributes (compartments, processes) or combinations thereof (compartment (cytosol) x process (glycolysis, pentose) = cytosol_glycolysis, cytosol_pentose).
Show properties of these aggregates and relations between them.
Maybe show multiple relations between aggregates simultaneously.
The user can interact with the aggregate network to gain more detail about more specific portions of the network.

----------
Design

Prototype 1

I consider the current implementation of the tool to be an initial prototype, Prototype 1.
While this prototype is incomplete, I consider it to be sufficiently functional to exemplify the capabilities and limitations of its design.

Problem

Prototype 1 offers very little access to information on the high-level context/summary/overview of the entire metabolic model.
Instead it concentrates entirely on selecting sufficiently-small portions of the model to represent information in detail.
That representation in detail is a node-link diagram of the network.
Without high-level information about the entire metabolic model, exploration is tedious and selecting portions of the model is difficult.
Also, it is very difficult to select a sufficiently small portion of the network in order for the node-link diagram to be readable.

Summary
-Little context/summary/overview
-Exploration and selection is tedious
-Difficult to select small enough portions for readable detail

Solution

"Overview first, zoom and filter, then details-on-demand" (Shneiderman, 1996)
(http://www.infovis-wiki.net/index.php/Visual_Information-Seeking_Mantra)
Provide access to high-level information about the context/summary/overview of the entire metabolic model.
Through interactive exploration starting at this complete context, provide access to information in more detail.
The high-level summary will communicate relevant information to give context.
This complete context of the model will help the user to make rational selections for more detail.
The node-link diagram of a portion of the network will probably be the dimension of the most detail.

In the metabolic network, nodes for metabolites and reactions have attributes.
Common attributes define sets of nodes.
Attributes of a specific type (reaction type, compartment, process) are exclusive.
For example, the compartment is either the cytosol or the mitochondrial matrix.
The hierarchy of sets is ambiguous.
Neither compartment nor process is explicity superior.
Metabolites and reactions within a single compartment, further belong to multiple processes.
Metabolites and reactions within a single process similarly belong to multiple compartments.
There is extensive overlap or relation between sets.
It is reasonable to impose a hierarchy.

I conceived a design for a query interface that gives a summary of the attribute sets for the context of the metabolic model.
The design uses stacked bar charts and a sense of hierarchy.
It is somewhat similar to a sunburst chart.

I also think that visualizations of aggregate sets would be beneficial.
Examples include sketch_2016-12-20_1, sketch_2016-12-20_2, sketch_2017-01-02_3, and sketch_2017-01-02_4.
The user could interact with aspects of these aggregate visual representations to gain information in more detail.
For example, from sketch_2016-12-20_1, the user might want to know which processes are common between the cytosolic and mitochondrial compartments.

Topological queries would somehow incorporate.

----------
Article
"Multivariate Network Exploration and Presentation: From Detail to Overview via Selections and Aggregations" (http://ieeexplore.ieee.org/document/6875972/)

Authors describe a strategy for exploration and analysis of large networks with multivariate attributes for nodes and links.
The idea is to access both attributes and topology.
Some explorations and analyses require consideration of attributes and topology together, simultaneously.
The idea is also to provide a high-level overview or summary that is clear and provide more detail according to selections of interest.

--------------------------------------------------
12 April 2017

----------
Design

I considered the current design of the project.
I also considered options for alternative designs.
I drew sketch 2017-04-12_1 to represent an idea for a query interface that gives an overview context of the metabolic model.

----------
Meet with Alexander Lex

Alex and I discussed limitations in the current interface for building queries.
The current interface gives no sense of or control over hierarchy between query steps.
For example, adding a step with "or" logic could draw more nodes either from the current collection or from the entire model.

Alex and I also discussed ideas for higher-level overviews or summaries of the metabolic model.
The model and network are too large and complex to visualize in explicit detail unless the selections are very small.
Alex recommended visual representation of relations within and between sets.
Attributes define sets, and there are various types of relations within and between these sets.

Alex recommended a research article.
"Multivariate Network Exploration and Presentation: From Detail to Overview via Selections and Aggregations" (http://ieeexplore.ieee.org/document/6875972/)

--------------------------------------------------
11 April 2017

----------
Plan
Activate event listeners and handlers for the remove buttons.
Handle the removal of rows properly using exit selections in D3.
Develop visual representation of network.

--------------------------------------------------
10 April 2017

----------
Plan

Query Queue Table
Create scale function for metabolites and reactions.
Set the width of the bars according to the scale of the count of metabolites or reactions.
Color the bars differently for metabolites and reactions.
Activate event listeners and handlers for the remove buttons.
Handle the removal of rows properly using exit selections in D3.

----------
Progress

I implemented creation of Scalable Vector Graphics (SVG) elements in query queue table cells for metabolites and reactions.
I also implemented creation of bars in these cells.
These bars will eventually represent the count of metabolites and reactions.

I also implemented creation of buttons in the remove column of the query queue table.

----------
Query Queue
Create an SVG element within the cells for metabolites and reactions.
Create bars within these SVG elements that scale according to the count of metabolites and reactions.

----------
Progress
The new table version of the query queue updates as the user constructs and submits multiple query steps.

--------------------------------------------------
9 April 2017

----------
step | -/+/x | criterion | metabolites | reactions | remove

--------------------------------------------------
7 April 2017

----------
Plan

initializeQueryInterface
Call initializeQueryQueue.

initializeQueryQueue
Make object for first step (step 0) in query queue.
Give this object the identifiers for all metabolite and reaction nodes.
Call appendQueryStep and pass it the new query queue.

appendQueryStep
Append a row to the query queue table for each step object in the query queue array.
Handle the first step (name it step 0) differently than all subsequent steps.
Or, handle it identically but just leave blank the fields that are undefined for the first step (preferrable).

executeQuery
I might need to handle the first query queue step differently now.

controlQuery
I need to activate the button for control query from initializeQueryQueue.
I need to pass the initial queue to the function.

--------------------------------------------------
6 April 2017

----------
Progress

-The program now loads the assembly of the human metabolic model by default.


----------
Query Queue

-Organize the query queue as a table.
-Include a head row.
-The first body row should be for step 0 and give initial counts of metabolites and reactions.
-Subsequent rows will give concise information on the query step.
-These subsequent rows will also have buttons to remove the step from the queue.

-Do not summarize count of links, metabolite sets, process sets, compartment sets, or other attributes in the query queue.
-I think those details would be more appropriate for the detail panel.

-During development of this query queue table, keep the current model summary.

-Do not treat the first row (step 0, initial) much differently than other rows.
-Initialize the query queue with the complete set of metabolitesa and reactions from the model.
-Use D3 to create the first row in the table.


--------------------------------------------------
5 April 2017

----------
Plan

Visual Representation of Network
Include a control panel for the visual representation of the network.
Allow the user to control color representations of attributes such as compartments and pathways.
Allow the user to control node replication.
Allow the user to control node highlighting.

----------
Meet with Alexander Lex

Plan
Improve the visual representation of the network.
Develop enhancing interactivity with the network.
Develop more versatility in queries on the network.
Deal with nodes with extremely high degrees.

Progress

Advice
1) Model Interface
-For efficiency in development, set program to load model by default.
2) Query Interface
-Make query interface and queue more concise and aesthetic.
-Abbreviate details of query steps.
-Represent counts of metabolites and reactions visually in bars.
-Indicate on these bar charts the threshold for visualization.
3) Network Representation
-If the network has enough elements to be problematic in Scalable Vector Graphics (SVG), then the network will probably be unreadable anyway.
-SVG can probably sustain up to about 1000 nodes, links, and labels.
-Even a network with 100 nodes is large and complex.
-The project needs extensive customization of the visual representation of the network.
-Consider the versatility of CytoScape.js and whether or not it is sufficient for customization in this project.
-Consider using D3 for visual representation of the network.
-D3 has extensive versatility.
-Position nodes in spatial groups by cellular compartment.
-Make labels concise.
-Make rectangular nodes fit labels.
4) High-Degree Nodes
-Allow user to control replication of high-degree nodes.

----------
Topological Traversal

I can use JSNetworkX for topological traversal.

For an ego graph, use "singleSourceShortestPathLength" from JSNetworkX and build it into a compound function like "ego_graph" in NetworkX.

For k shortest simple paths, I might need to develop my own implementation, following the pattern of "shortest_simple_paths" in NetworkX.

Especially if I want to be able to ignore specific nodes, then I might need to implement my own versions of ego graph and shortest simple paths.

Reference

http://jsnetworkx.org/api/#/v/v0.3.4/singleSourceShortestPathLength

https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.generators.ego.ego_graph.html

http://networkx.readthedocs.io/en/stable/reference/generated/networkx.algorithms.simple_paths.shortest_simple_paths.html

----------
High-Degree Nodes

1.
Allow the user to include or exclude individual metabolites and reactions from the query.
This specific inclusion or exclusion in the query will not be the most convenient way to deal with high-degree nodes, however.

2.
For topological queries, allow the user to exclude individual metabolites and reactions from consideration in traversal.
Offer a set of common metabolites with especially high degrees.

3.
After query completion, allow the user to replicate nodes with high degrees.
This functionality might be appropriate for the navigation panel.
Example: h2o --> h2o_1, h2o_2, h2o_3.

----------
Visual Representation of Network

Represent nodes differently for metabolites and reactions.

I wonder if it would be reasonable to use D3 for the network visualization.
A network with >200 nodes would be useless anyway.

--------------------------------------------------
4 April 2017

----------
Plan

Before visualizing the network, check how many nodes are in the network.
Only visualize networks that are below some threshold, such as 250.

----------
Reference to Network Instance in CytoScape.js

Eventually, I think that I will need a way to reference the instance of the network in memory for CytoScape.js or any other tool that I use.

I will need to pass the reference to this network instance in memory around between relevant functions.

----------
Functional Programming

An object class provides a sort of environment or scope in which variables or attributes are accessible to all methods.

It is possible to manage the Document Object Model without object classes, but it is necessary to pass variable references between functions that need them.

----------

--------------------------------------------------
3 April 2017

----------
Plan

-Remove existing network from interface before visualization of new network.

-Automatically determine if network is below practical threshold for useful and efficient visualization.

-Reset the query, along with the entire queue.

-Remove individual steps from the query queue.

----------
Query Options

The options available in specifying a new query step depend on the current collection and on the combination strategy.

And
Combination strategy "and" considers only nodes that are part of the current collection.

Or
Combination strategy "or" considers all nodes available in the model.

Not
Combination strategy "not" considers only nodes that are part of the current collection.

I need to figure out how to accommodate the proper options for each query step.
I need to pass the current collection (queue, probably) to the function that generates the options.

----------
High-Degree Nodes

I need to provide some way to avoid the complexity of high-degree nodes.
I think that I should enable the user to remove the relevant nodes from the network.
The user will still be able to see mention of these nodes in reaction summaries.

I think that removing these nodes is probably more simple than replicating them.

----------
Plan

If the network from the query is below a threshold that allows sufficient interactivity, then visualize the network by default.

The user needs to be able to reset the query without refreshing the entire interface.
Include a "Reset" button on the query builder.
In response to this button, remove all steps from the query and reset the underlying queue data.

Eventually, I would still like to have buttons to remove individual steps from the queue.

Design the interface to create and/or initialize aspects of the interface as they are usable.
This dynamic creation/activation might make the interface easier to use.
The Query Builder needs work in this regard.

----------
Meet with Alexander Lex
Progress

Program Functionality

Complete
1. Select file to assemble a new model.
2. Select file to load a previous model assembly.
3. Display a summary of the model (count reactions, metabolites) in query queue.
4. Assemble a step to add to the query queue for query by attribute.
5. Execute all steps in query queue.
6. Display summary of each step in query queue.
7. Visualize the network.

Incomplete
-Assemble a step to add to the query queue for query by topology.
-Remove any individual step from query queue.

Plan

If the network from the query is below a threshold that allows sufficient interactivity, then visualize the network by default.

----------

--------------------------------------------------
31 March 2017

----------
Plan

Control all behavior in the interface in JavaScript.
Control collapse and reveal of control panels in JavaScript.

Create interface for Query panel after loading model.
Give summary of model at top of query interface.

----------
Conference ISMB-ECCB 2017

Authors submit abstracts for consideration within several specific subject domains.

BioVis only accepts submissions for publication in BMC Biotechnology, oral presentations of published work, and posters.
BioVis does not accept submissions for oral presentations of unpublished work.
Consider submitting an abstract for a poster to BioVis.

Consider submitting an abstract for an oral presentation and poster to NetBio and SysMod.

----------
JavaScript Control Class

element.className
Returns string of class names with space separation.

element.classList
Returns array-like collection of class names.

----------
D3 Content and Child Elements

Setting the content of an element in the Document Object Model replaces any child elements within that parent element.
Relevant functions in D3 include selection.text() and selection.html().

In order to have child elements and content, I think it is necessary to set content first and append child elements second.

A solution is to store all content within child elements.

Reference
https://github.com/d3/d3-selection/blob/master/README.md#selection_text

--------------------------------------------------
30 March 2017

----------
Plan

Figure out how to use D3 to append elements nested within the div's for the query steps.

Enable removal of individual steps from the query.

Visualize the network from the query.

Include more query functions, especially topological queries.

----------
Query Execution

It would be more efficient to only execute new steps from the query.

In order to do so, store the collection from each step along with query details.

If the user removes a step from the queue, reset the collection and summary for all subsequent steps.

The function for executing the query will need to check whether the collection and summary for each step are empty.
If they are empty, begin with the previous step's collection and execute the query step.

----------
Progress

Whew!
I narrowly avoided using mutable data, causing side effects, and polluting namespace in the global scope.
Using a functional programming style with the Document Object Model is tricky.

----------
Adding and Removing Event Listeners

It is not possible to remove listeners that attached as anonymous functions.
This situation is difficult when it is necessary to pass a custom parameter to the listener function.

Example 1
function initializeInterfaceForModel(model) {
  ...
  document
    .getElementById("control-query")
    .addEventListener("click", function (event) {
      // Element on which the event originated is event.currentTarget.
      controlQuery([], model);
    });
}

In Example 1, the event listener function controlQuery attaches indirectly through an anonymous function.
This strategy is convenient in order to pass controlQuery custom parameters.
The problem is that removing the listener function requires a function name.
Also, when attaching listeners through anonymous functions, replicate listener attachements behave as replicates.
Listeners with identical names do not allow replicate behavior.

In order to add, remove, and change the parameters of event listeners, it is necessary to use listeners with specific names.
It is difficult to use listeners with specific names while passing custom parameters to the listener functions.
It is necessary for the listener function's name to be accessible to both the addEventListener method and the removeEventListener method.

If the add and remove methods are in separate functions, then the listener function's name must be accessible in the global scope.
The only way to call a listener function in the global scope and pass it custom parameters would be to have the custom parameters also in the global scope.
The reason is that the addEventListener method only passes the event as a parameter to the direct function.
That is why anonymous functions are necessary for custom parameters.

Example 2
function initializeInterfaceForModel(model) {
  ...

  function listener(event) {
    // Element on which the event originated is event.currentTarget.
    controlQuery([], model);
  });

  document
    .getElementById("control-query")
    .addEventListener("click", listener);

  setTimeout(function () {
    document
      .getElementById("control-query")
      .removeEventListener("click", listener);
  }, 10000);
}

In Example 2, it is not necessary to store the listener function or the parameters in the global scope because calls to both addEventListener and removeEventListener occur within the same function's scope.
This solution is only useful to remove the listener after a certain delay, such as using the setTimeout function.

Example 3
function initializeInterfaceForModel(model) {
  ...

  document
    .getElementById("control-query")
    .addEventListener("click", function listener(event) {
      // Element on which the event originated is event.currentTarget.
      controlQuery([], model);
    });
  );

  setTimeout(function () {
    document
      .getElementById("control-query")
      .removeEventListener("click", listener);
  }, 10000);
}

Example 3 is very similar to Example 2.
Example 3 defines the listener function inline with the addEventListener call, similar to using an anonymous function.
The difference is that Example 3 names this inline function so that it is accessible by name within the local scope of the initializeInterfaceForModel function.

Example 4

function initializeInterfaceForModel(model) {
  ...

  document
    .getElementById("control-query")
    .addEventListener("click", function listener(event) {
      // Element on which the event originated is event.currentTarget.
      controlQuery([], model);
    });
  );

  setTimeout(function () {
    document
      .getElementById("control-query")
      .removeEventListener("click", listener);
  }, 10000);
}

function controlQuery(queue, model) {
  ...
  
  document
    .getElementById("control-query")
    .removeEventListener("click", getEventListeners(document.keydown    [0].listener));
}

Example 4 accesses the listener to remove through the document itself.
In this way it is possible to access the listener without a name in the global scope.
However, it is necessary to know the sequence of all event listeners on the element.
Also, getEventListeners might not actually be a tool with reliable browser support.

Example 5
function initializeInterfaceForModel(model) {
  ...

  document
    .getElementById("control-query")
    .addEventListener("click", function handler(event) {
      // Element on which the event originated is event.currentTarget.

      controlQuery([], model);

      // Remove event listener after first execution.
      event.currentTarget.removeEventListener(event.type, handler);
    });
  );
}

Example 5 uses an inline listener/handler function with a name.
The name of this listener function is accessible within the local scope of the initializeInterfaceForModel function.
I adapted the solution in Example 5 from material from Otto Nascarella, Iran Reyes, Harry Love, melleb, and Jonatas Walker on StackOverflow(http://stackoverflow.com/questions/4950115/removeeventlistener-on-anonymous-functions-in-javascript).

Reference
https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener

http://stackoverflow.com/questions/5660131/how-to-removeeventlistener-that-is-addeventlistener-with-anonymous-function
The main solution in this discussion uses a global variable to reference the listener function.
Another solution removes the listener within the same function that adds the event listener.
In this way the listener function can be accessible to both add and remove operations without being in the global scope.

http://stackoverflow.com/questions/4950115/removeeventlistener-on-anonymous-functions-in-javascript
Solutions.
1. Use Node.setUserDate and Node.getUserDate to store the reference to the listener function on the DOM element itself.
I do not like this solution.
2. Define parameters and listener function in global scope.
I do not like this solution.
3. Remove the listener function within the listener function itself after executing the essential operation.
Use arguments.callee or arguments.caller.callee.
...

--------------------------------------------------
29 March 2017

----------
Passing Immutable Data Between Interface Interactions

I want to organize details for all steps in the query queue within an array of objects in memory.
I also want to organize within these objects the count of nodes after execution of each step in the query queue.
I want to use D3 to bind data from this array to DOM elements for steps in the query queue interface.
I want to update the array for every change to the query queue.

Rather than updating the same array, I will create a new array for every change to the queue.
In this way I will use immutable data.

How can I pass this array between all relevant functions that handle user interaction with elements in the DOM?
I want to avoid using a global variable for the array in order to use stateless functions without side effects.

Here is my solution.
Every time a function modifies the data array, remove all event listeners for functions that require the data array.
Re-activate all of these event listeners, passing them the current version of the array as an argument.

----------
Using D3 with Immutable Data

The Document Object Model (DOM) is inherently mutable.
Elements in the DOM change attributes while the program runs and in response to user interaction.
Also, managin the DOM requires accessing the DOM's current state in a way that involves side effects.
Functions in JavaScript might not accept any arguments, but they must access DOM elements and change them.

D3 binds data to DOM elements.
If I understand correctly, the DOM elements do not change in response to changes to the underlying data.
Another way to explain that concept is that the D3 does not bind data by reference.
Instead, it binds data by value.
In order to change the data bound to elements in the DOM, it is necessary to repeat the D3 sequence of selection, data binding, and update/enter/exit append.

As a result, D3 does not use and certainly does not require binding to mutable data.
In order to use D3 with immutable data, re-bind data every time the source data is different, handling changes in an immutable way.

On a side subject, key functions in data binding are useful to maintain object constancy as the data for elements changes.

Reference
http://stackoverflow.com/questions/29515188/working-with-d3-js-and-immutable-js

----------
D3

Reference

https://d3js.org/

https://github.com/d3/d3/wiki/Tutorials

http://alignedleft.com/tutorials/d3/

----------
Functional Programming

Reference
https://www.smashingmagazine.com/2014/07/dont-be-scared-of-functional-programming/

----------
Plan

Now that I extracted details from the assembly interface, create a group of elements to represent the details of the query step in the query queue.

Then call the appropriate function to execute the appropriate query operation.

I need to decide how to keep track of the current query queue.
The user can add and remove steps from this queue.
Maybe I should just treat the step elements in the DOM as the storage of the current state of the query queue.

I could potentially use D3 to bind the data on the query details to the DOM elements in the query queue.
That seems like a very reasonable strategy.

--------------------------------------------------
28 March 2017

----------
Plan

I am in the process of implementing function updateQueryQueue and its subordinate functions.
Specifically I am implementing function extractQueryAssemblyDetails.
Continue to implement this function to assemble and return an object that contains all relevant details of the query step.
Eventually I will need to implement functionality for topological query steps.

----------
Compatibility

My current implementation includes several uses of Object.values().
This method is incompatible with the Safari browser, I understand.

----------
Progress

Remember that there are many reactions that do not have annotations for metabolic process.
The proportion of these reactions is small.
My previous operation for assembly of the model created a record for these undefined processes.

I created concise and unique identifiers for all processes to store records about processes in an object as I do for all other sets.
I then referred to these records while creating records for reactions.
Instead of storing the process name in the records for reactions, I stored the corresponding process identifier.

The model in previous structure from 21 March 2017 had a file size of 6,306 kilobytes.
The model in new structure has a file size of 6,206 kilobytes.

----------
Model Curation

If I need to correct major errors in the metabolic model, such as some that I already encountered in metabolite naming, I should keep this curation functionality separate from all other functionality.
I can develop a set of curation functions to run on the Recon 2.2 model specifically to correct errors.
Then I can pass the model to my assembly functionality.

The purpose is to isolate model-specific functionality from general functionality.

----------
Attribute Reference

citrate (metabolite)
citrate synthase (reaction)
mitochondrion (compartment)
glycolysis (process)
conversion (reaction type)
transport (reaction type)
irreversible (reaction direction)
reversible (reaction direction)

--------------------------------------------------
27 March 2017

----------
Plan

Continue implementation of function appendQueryAssembly.
Attach the text field for attribute queries to an appropriate datalist with options for the auto-completion.
I will need to assemble an array of strings for the autocompletion list.
I think the strings should have the value, followed in parentheses by the attribute that corresponds to the value.

mitochondrion (compartment)
glycolysis (process)
transport (reaction type)
reaction (reaction type)

How can I make the auto-completion not case sensitive?
How can I make the auto-completion recognize portions in the middle of the string?

----------
Design of Query Interface

Do not include active input elements in each query step in the query queue.

Instead, only include active input elements in an assembly area below the queue.
In the assembly area, the user constructs a new query step and then adds that step to the queue.
Adding a new step to the queue should execute two operations.
First, a new representation of the step without active input elements but with concise and clear style will appear in the queue.
This representation in the queue will include a button to remove the step from the queue.
Second, the query will execute through to the current step.
The query interface will display a summary of the network that the current query selects.
Counts of nodes and links might offer a good concise summary of the query results.
Do not do this execution if the query results in a lag.
Maybe do not visualize the resulting network until the user selects a visualize button.
The reason to wait before visualizing the network is to avoid delays due to heavy processes.

An advantage of this strategy is that it simplifies access to the query details.
I will not need multiple groups of radio buttons, for example.
I will only need a single group of active radio buttons for the combination strategy.

----------
Autocomplete Text Box

<input type="text" list="options">
<datalist id="options">
  <option>cytosol</option>
  <option>endoplasmic reticulum</option>
  <option>mitochondrion</option>
</datalist>

Use JavaScript.
Create a new datalist element with options.
Give the datalist element a unique id attribute.
Select the input element, such as a text field, that will reference the datalist.
Append a list attribute to the input element that references the id of the datalist element.

----------
HTML Containers

The tag <div> is the preferable generic container for organization of a document.

The tag <section> is appropriate for generic coherent sections of a document.
This tag might be appropriate for use with the <fieldset> tag in forms.

Reference
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div

----------
HTML Forms

The main purpose and function of forms is to send user information to a server.
The default function of the form is to send information to a server.
To use a form without a server it is necessary to override the form's default function of sending information (return false from handler function and use the post method so that the URL does not change).
As I do not need to send information from the interface to a server, I do not know of any justifiable reason to use HTML Forms.

Reference
https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms
https://www.w3schools.com/html/html_forms.asp
https://www.w3schools.com/js/js_input_examples.asp
http://stackoverflow.com/questions/6051143/how-to-use-html-forms-without-a-server

--------------------------------------------------
24 March 2017

----------
HTML Forms

For my purposes without a server, I think HTML Forms mostly provide a convenient (debatable) structure for input elements.
The RadioNodeList only works for collections of elements from a form or fieldset.

RadioNodeList
Simplifies determination of value of a group of radio buttons.
https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList

--------------------------------------------------
23 March 2017

----------
Iteration in General

Arrays
1. Apply an operation to elements in array.
Use array.forEach().
2. Apply an operation to elements in array and collect values from each and every application in a new array.
Use array.map().
3. Apply an operation to elements in array and accumulate values without necessity of a value from each and every application.
Use array.reduce(function (accumulator, element) {}, initialValue).
4. Filter elements in array to obtain only elements that match criteria.

Array-Like Objects
1. Convert Array-Like Objects to arrays.
Array.from(arrayLikeObject)
Array.prototype.slice.call(arrayLikeObject)
[].slice.call(arrayLikeObject)
2. Apply an operation to elements in collection.
NodeList.forEach()
Array.prototype.forEach.call(HTMLCollection, operation)
Array.from(HTMLCollection).forEach(operation)
3. Apply an operation to elements in collection and collect values from each and every application in a new array.
Array.prototype.map.call(arrayLikeObject, operation)
[].map.call(arrayLikeObject, operation)
Array.from(arrayLikeObject).map()
4. Apply an operation to elements in collection and accumulate values without necessity of a value from each and every application.
Array.prototype.reduce.call(arrayLikeObject, function (accumulator, element) {}, initialValue)
[].reduce.call(arrayLikeObject, function (accumulator, element) {}, initialValue)
Array.from(arrayLikeObject).reduce()
5. ...
Array.from(arrayLikeObject).filter()

References
http://xahlee.info/js/js_array_vs_nodelist_vs_html_collection.html
https://developer.mozilla.org/en-US/docs/Web/API/NodeList
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
http://stackoverflow.com/questions/22754315/for-loop-for-htmlcollection-elements

----------
Functional Programming in JavaScript

http://eloquentjavascript.net/1st_edition/chapter6.html

----------
Query Execution

The user specifies the parameters of the query--query steps and options for each step--by interaction with elements in the Document Object Model (DOM).
It is necessary to extract relevant information from these elements of the DOM.
It is also necessary to apply the appropriate query operations using this information.

There are two strategies that I consider.

1. Perform extraction and execution simultaneously.
Extract information relevant to query steps directly from the elements in the DOM and apply this information immediately to execute the appropriate query functions.
This option only requires a single iterative process for the query.
It requires passing the query collection of nodes and the metabolic model between each recursive iteration for each query step.
This option does not provide a convenient way to store the information from the query permanently.

2. Separate extraction and execution.
Extract information relevant to query steps directly from the elements in the DOM, and organize this information in an array of objects.
There will be a single object for each step of the query.
This object will specify the type of query step along with details for the specific type of query step.
Potentially allow the user to save this array of objects as a JSON to preserve a record of the query.
Potentially allow the user to load a query record from file to replicate a previous query.
Iterate over this array of objects (I think using reduce with additional parameters) to collect nodes in the query.

The advantage of option 2 is that it separates extraction from execution.
This separation can make the code more versatile.

--------------------------------------------------
22 March 2017

Keep implementing the query queue process.


----------
Dynamic Query Execution

Eventually I want the query process to be dynamic.
I want the query interface to communicate the number of nodes remaining after the addition of each step to the query queue.
If the scale of the network selection is not prohibitive, I also want to display the network after the addition of each step to the query queue.
In this case, the query runs progressively after every change to the queue.
Every query step runs as soon as the user adds it.

What if the user removes a step from the queue?
In that case it will be necessary to re-run all of the query steps in sequence.

Hence, I need to support 2 types of query execution.
1. Run a single query step on the current query collection as soon as the user adds this step to the queue.
I will need a function to control operations for a single step in the query.
2. Run all steps in the query on demand, such as when the user clicks a submit button or removes a step for the queue.
I will need a function to control the iterative application of the function for individual steps.
I will need to update and pass the collection appropriately during iteration.

The background query functions themselves will behave identically in both types of execution.
The differences is in the execution itself.

----------
Recursive Iteration on Multiple Elements in the Document Object Model (DOM)
Handle DOM Elements for Steps in Query Queue

It is possible to iterate imperatively on a collection of multiple elements from the DOM, such as by using the forEach method of a NodeList.
It is also possible to use a traditional for or while loop.

For a functional style, it is also possible to iterate on a collection of multiple elements from the DOM using recursion.

HTML Collection
https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection
HTML Collections are live such that changes to the DOM influence the elements in the collection.

NodeList
https://developer.mozilla.org/en-US/docs/Web/API/NodeList
Node Lists are sometimes live and sometimes are static.

Recursive handling of multiple DOM elements
This article is very helpful.
http://clubmate.fi/remove-a-class-name-from-multiple-elements-with-pure-javascript/

Terminal recursion requires shortening the queue with each iteration.
As HTML Collections and some NodeLists are live, the only way to remove an element from the collection is to change it so that it no longer matches the selection criteria to be a member of the collection.
A convenient strategy for removing elements from an HTML Collection is the removal of a class from the element so that it no longer matches the selection.
It seems practical to assign some sort of "recursion-queue" class to the elements before the start of the recursive process.
Each iteration of the recursion will remove the class from the element.

This strategy is possible by interaction with the classList attribute of the elements.

Element.classList
https://developer.mozilla.org/en-US/docs/Web/API/Element/classList

RadioNodeList
Simplifies determination of value of a group of radio buttons.
https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList

----------
Routine to Handle Variable Count of Query Steps

1. User interaction with input elements in Document Object Model (DOM) will specify the type and details of each query step.
2. User click on submit button activates a function to control the query (controlQuery).
3. Access DOM elements for all query steps, probably using a document class selector.
4. Extract information from elements relevant to query steps.
How do I do that?
I think I will need to use the forEach method for the NodeList.
Organize query queue information in an array of objects.
5. Pass the array for the query queue to a recursive control function to control (out-source) each query step.
This function will recurse for each step in the queue, applying the appropriate functions to assembly the query's collection.

----------
Plan

Implement a very basic interface that allows the user to add text fields to a queue.
The user can add any count of text boxes.
The user can provide names of metabolic processes or cellular compartments in these text boxes.
The program performs queries by combining each query step.
The default logical combination strategy for this early version will be "and".

Eventually these text fields should have automatic completion from a set of names that I define.

15 March 2017
My notes about goal query functionality are useful.

----------
Progress

I changed my color scheme to a white background.

The user can select a file from her or his computer load either for assembly of a new model or for an existing model.

The user can specify a metabolic process and a cellular compartment by which to query.
The program performs the query and displays the resulting network.

----------
Ideas

Draw a sketch to represent the concepts of combination of queries by and, or, and not logic.

For poster or presentation, give clear examples of deficiencies in current tools to explore metabolic networks.
Show images of KEGG Atlas and/or some other poster type representation of the metabolic network.
Highlight relevant proximity and shortest path networks to illustrate the issue of layout not representing degree of relation.
Highlight the proximity of a transport event in two compartments to illustrate the issue of layout not representing compartmentalization.
Overall, illustrate the problem that static maps do not represent custom sets of interest well.

--------------------------------------------------
21 March 2017

Consider whether to use array.every() or array.some() to test reactions by the compartments of their metabolites.

----------
Plan

I will need a recursive function to accept an array of objects.
Each object will provide the relevant information for each step of the query queue.
The function will recursively apply each query step from the queue.

For now, just implement functionality for a 2-step query.

----------
Progress

The user can select files from her or his local computer to use for assembly of a metabolic model or for loading a metabolic model.
I implemented functionality for file load and the relevant operations.

----------
Load Files

D3's JSON reader requires a file path and name.
The browser cannot access real file path's from the user's computer.
It is necessary to specify the path within the script or include files in the same directory as the script.

It is therefore necessary to use JavaScript functionality for file loading.

This article is helpful.
Study this article and follow conventions and recommendations.

File Tutorial
https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications

FileReader
https://developer.mozilla.org/en/docs/Web/API/FileReader

File object
https://developer.mozilla.org/en-US/docs/Web/API/File

--------------------------------------------------
20 March 2017

----------
DOM Event Functions

I wanted to try a more functional implementation of some functions that handle events from the Document Object Model (DOM).

The obvious solution was to access my file input element's value from within the handler function for a button.
I wanted a more functional implementation to avoid acting beyond parameters of the function (off-target effects).
I wanted the file input element to trigger a function on change to its value.
This function would set event handlers for the buttons, passing them the current value of the file input.

This value of the file input passes by reference such that when the value changes the handler has access to the new value anyway.

If the file input changes values multiple times, it's handler function attaches multiple handlers to the button.
In order to remove previous handlers, I needed a name of the handler function.
Because I needed to pass a parameter (the file input's value) to the handler, I had to use an anonymous function.

http://stackoverflow.com/questions/5660131/how-to-removeeventlistener-that-is-addeventlistener-with-anonymous-function

Basically, my strategy will not work without some awkward work-around.

The Document Object Model (DOM) is inherently object-oriented and non-functional.
I recommend that I not worry about trying to handle the DOM in a functional way.

----------
Event Handler Add and Remove

target.addEventListener()
https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener

target.removeEventListener()
https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener

http://stackoverflow.com/questions/5660131/how-to-removeeventlistener-that-is-addeventlistener-with-anonymous-function

This Stack Overflow discussion is helpful about passing an event object to event handler functions.

----------
Loading and Parsing a JSON file

JSON.parse()
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse

http://stackoverflow.com/questions/7346563/loading-local-json-file

----------
Plan

Introduce multiple query steps along with interface support.
Include a text box for metabolic process.
Include a second text box for compartment.
Include a submit button.
If both text boxes have values, then query by metabolic process and then query by compartment.
I will need to implement functionality to query by compartment.

Change color scheme.
Learn how to specify styles for CytoScapeJS in a style file.
Learn how to use alternative style files interactively.

----------
Meet with Alexander Lex

Alex recommends changing the interface's color scheme to use a white background.
To support printing, a color scheme with a white background is essential.

A color scheme with a black background is optional, but it must have an accompanying color scheme with white background for printing.

An option is to use alternative style files.

----------
Progress

I introduced a text field and a button to the interface.
The user can enter the name of a metabolic process in the text field.
When the user clicks the button, the button calls a function that controls the query by metabolic process.
The interface displays the resulting portion of the network.

--------------------------------------------------
17 March 2017

----------
Plan

Introduce a text field to the interface so that the user can enter a process of choice and then activate the appropriate function.

----------
Progress

Function collectProcessReactionsMetabolites() works properly as far as I can tell.
The functions for translating collections of node identifiers and initiating a network instance in CytoScape.js also work properly.

--------------------------------------------------
16 March 2017

----------
Method

If a function takes many arguments or parameters (more than 2 maybe), use destructuring assignment for an option object argument to simulate descriptive names.

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
https://google.github.io/styleguide/jsguide.html#features-objects-destructuring
http://exploringjs.com/es6/ch_parameter-handling.html#sec_named-parameters
http://usejsdoc.org/tags-param.html

----------
Procedure for Combination or Chaining Steps in Queries

Queries collect specific nodes and all links between them.
Individual query steps sequentially select identifiers of nodes to combine with the query collection.

There are two aspects to queries.
1. Selection of nodes according to a single criterion.
2. Combination of these selections from multiple criteria according to logical "and", "or", or "not" rules.
These combinations of selections construct query collections.
These collections evolve sequentially throughout the query, and they are the end result of the query.

For convenience in initiating a network in CytoScape.js, I think it will be practical to keep identifiers for reactions and metabolites separate as I pass them between query functions.
Use a structure similar to the model itself so that the model and collection are somewhat interchangeable in query steps.

I realize that performance might be more efficient if selection of nodes considers both the current query collection and logical rules for combination.
For example, in the case of combination by "and" or "not" rules, it would not be necessary to consider all nodes in the model.
It would only be necessary to consider nodes in the current query collection.

In addition, it is necessary to consider logical rules for combination in the case of topological query steps.
It might be necessary to exclude some paths during traversal in a topological search.

Hence, functions for all query steps will consider the criteria for selection (in that step), logical rules for combination, the current query collection, and the context of the entire model (for reference).
Query functions will accept these arguments:
1. criteria: criterion or criteria for selection
2. combination: logical rules (and, or, not) for combination
3. collection: current query collection (an object with separate arrays of identifiers for reactions and metabolites, adapted from the entire model by default for initial step)
3. model: entire model (for reference)


There will be a final process of every query chain.
1. Collect all links between all nodes in the collection.
2. Gather records for all node and link identifiers in the collection.
3. Translate all nodes and links for CytoScape.js.
4. Initiate an instance of a network in CytoScape.js.

----------
Query Functionality

All of these core query operations should collect nodes of metabolites and reactions.
Attribute
1. Collect attribute values that include a query string that the user enters.
2. Collect node(s) of a specific name or identifier.
3. Collect nodes of a specific metabolic process.
4. Collect nodes of specific compartment (matching compartmental metabolites and reactions with a matching compartmental metabolite).
5. Collect reaction nodes with properties relevant to transport reactions (multiple compartments, change in compartments).
6. Collect reaction nodes with properties relevant to chemical reactions (change in chemicals).
Topology
1. Collect nodes within specific proximity or depth of a single focal node.
2. Collect nodes within specific count of shortest simple paths between two or more focal nodes.
It will be useful to filter out high-degree nodes (water, proton, etc) before this shortest paths step.

It will be necessary to combine multiple collections of nodes.

1. Add two collections of nodes together.
2. Subtract one collection of nodes from another collection of nodes.

----------
Visualization Functionality

- Replicate specific nodes, such as those with excessively great degrees.
- Represent the metabolic network as reactions between general (non-compartmental) metabolites.

--------------------------------------------------
15 March 2017

----------
Early Prototype

Consider making a temporary tab in the control panel to store the preliminary query interface.

Include a text box for the attribute query.
Include a text box for node and a text box or drop-down for the ego network.
These query interfaces should be separate and have their own submit buttons, maybe.
The submit buttons call the appropriate functions in the script.

----------
Code Organization

Organize the query code from "assembly_model.js" in separate files for topology and attributes.

----------
Node Depth Table to Accompany Ego Network

With our consideration of ego networks, we previously considered a table to list every node in the ego network by its depth from the focal node.
While that table sounds useful, its design is very specific for ego networks.
It is only appropriate for ego-only networks.

I think a similar table to accompany the subnetwork might be very useful, but maybe we can structure it in a way that is more versatile to accomodate the variety of network types from custom queries.

Maybe in addition to the more general table the node-depth table could be an option for ego networks.

The goal is to supplement the network view to enable the user to understand the network as effectively as possible.
This table might be a good way to give the user access to attributes and highlighting of the individual nodes in the network.

----------
Begin with Queries by Attributes

Query by single attributes.

The auto-complete text field should recommend all attributes that match/include the user's string.
The auto-complete text field should specify what type of attribute each potential match represents.
For example, the auto-complete field might indicate a key value pair such as "value (attribute)".
An example might be "mitochondrion (compartment)".

In the background, organize the information for the auto-complete in an array of objects.
{
attribute: "compartment",
value: "mitochondrion",
representation: "mitochondrion (compartment)"
}

When the user selects an item from this array, return all of the information (attribute, value, and representation) to the appropriate handler function.


----------
Meet with Alexander Lex

I showed Alex my sketch 2017-03-14_1.
Alex advised me to simplify the query interface substantially.
He specifically recommended combining my interfaces for "Attribute" and "Identity" query steps into a single interface.

Names and identifiers are attributes.
It is reasonable to treat names and identifiers along with other attributes.
Queries by all of these attributes are similar.
They differ fundamentally from topological queries.

The interface for attribute query steps could involve a single auto-complete text field.
The user can enter an identifier, name, compartment, or other attribute in this text field.
The text field automatically recommends matches along with the type of attribute they represent.
For example, if the user enters "mit", then the text field might recommend "mitochondrion (compartment)".

Alex also recommended that I have a single input interface for assembling the query queues.
The user inputs relevant information into this single interface.
The user then adds that query step to a queue.
The queue shows a summary of the type and details of each query step.

The input interface for topological query steps is important.
Topological query steps can fit anywhere in the query queue.
While defining a topological query step, the user will select specific nodes to consider for proximity or path queries.
The options available in these node selections will depend on the previous filters in the query queue.

We will design the query interface later.

For now, implement a prototype in which the interface communicates and controls the back-end functionality of the tool.
The interface can be very basic for this early prototype.

--------------------------------------------------
14 March 2017

----------
HTML Tables


----------
Assemble type-specific query interfaces.

When the user selects the type of the query step, create appropriate input elements for the specific query step.

I drew sketch 2017-03-14_1 to represent the query queue with multiple query steps of different types.

----------
The interface now supports appending and removing query steps from the query queue.

I need to update the header with the count of each step (Step 1, Step 2, Step 3, ...) in the queue after deletion of an intermediate (not last) step.

----------
Select multiple elements from DOM by multiple criteria

Selections such as...
document/element.children
document/element.getElementsByClassName("class1 class2")
document/element.getElementsByClassName("class1 class2")
document/element.getElementsByName("name")
document/element.getElementsByTagName("name")
... return HTMLCollections or NodeLists.

https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection
https://developer.mozilla.org/en-US/docs/Web/API/NodeList

These NodeLists are not the same as arrays in JavaScript.
It is neither possible to use map, filter, nor reduce on these NodeLists.

http://stackoverflow.com/questions/18242171/get-element-by-tag-name-and-class-name

Fortunately, it is possible to select multiple elements by multiple criteria using syntax similar to CSS selectors.

document/element.querySelectorAll()

https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll
https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll

----------

--------------------------------------------------
13 March 2017

----------

----------

document.element.style.visibility = "hidden";

I think that "visibility" of "hidden" is a CSS style property.


----------
New Query Functionality

User selects single node in diagram to include all depth-1 neighbors in the current selection.
Upon selecting the node, maybe provide a panel with options.
Call an appropriate function to include the depth-1 neighbor network in the current network selection.
Then re-create the CytoScape.js network.

----------
Set Attributes of Element in DOM

https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute
https://www.w3schools.com/jsref/met_element_setattribute.asp

Method setAttribute() returns "undefined".

----------
Append and Remove Elements to and from DOM

https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild
https://www.w3schools.com/jsref/met_node_appendchild.asp
https://www.w3schools.com/js/js_htmldom_nodes.asp

Create the element first.
document.createElement("html_tag");
document.createTextNode("text");

Then append the element to an existing element.
element.appendChild(child);
element.insertBefore(child);

https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild
https://www.w3schools.com/js/js_htmldom_nodes.asp

Remove existing element from DOM
parent.removeChild(child);


----------
HTML Input Element Values

https://www.w3schools.com/jsref/prop_text_value.asp

Access
var x = document.getElementById("InputElementIdentifier").value;

Assignment
document.getElementById("InputElementIdentifier").value = x;

----------
DOM Element Event Handler or Listener

If I understand correctly, the Event Listener method is more modern, and more versatile.

Event Listener
https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
JavaScript: document.getElementById("identifier").addEventListener("click", function);

On-Event Handlers
https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Event_handlers
HTML: <button onclick="return function(event);">
JavaScript: document.getElementById("identifier").onclick = function() {...}

----------
Selecting Iterable Elements

document.getElementById("container_identifier").children
document.getElementsByClassName("class1 class2")
document.getElementById("container_identifier").getElementsByClassName("class1 class2")
document.getElementById("container_identifier").getElementsByName("name")
document.getElementById("container_identifier").getElementsByTagName("name")

Select children of a single element in the document.
document.getElementById("container_identifier").children

Select all elements in the document with specific class names.
document.getElementsByClassName("class1 class2")

Select a single element in the document.
Select all child elements in the document with specific class names.
document.getElementById("container_identifier").getElementsByClassName("class1 class2")

I need to use this last option.
If I select all child elements of the container, I will get all individual elements.
I want to select child containers (with their contents) of the queue container.

Select a single element in the document.
Select all child elements in the document with specific names.
document.getElementById("container_identifier").getElementsByName("name")

--------------------------------------------------
10 March 2017

----------
Should I use a single form for the entire query (multiple steps)?

I think so.
That way I can have the form's submit button call the appropriate function in JavaScript.

----------
Change the interface dynamically as the user changes options.
As the user selects the type of query step (identity, property, topology), change the contents of the form to match the appropriate options.

----------
Name and ID attributes for forms and input elements

I think use an ID for the form.
I think use name attributes for all input elements in the form.
I think then you can use dot notation to access the value of each element by name.

----------
Access information from an HTML form

http://stackoverflow.com/questions/2435525/best-practice-access-form-elements-by-html-id-or-name-attribute

https://www.w3schools.com/js/js_input_examples.asp
https://www.w3schools.com/js/tryit.asp?filename=tryjs_form_elements

Give form an identifier.
Access the form by "getElementById()".
Use dot notation to access values of individual properties from the form.

----------
Collect information in an HTML form.
Use the onsubmit event to trigger a function in JavaScript to collect information from the form.
Access the values from the form using form syntax, form["property"].value;

https://www.w3schools.com/js/js_validation.asp
http://stackoverflow.com/questions/6051143/how-to-use-html-forms-without-a-server

Do not specify the "action" or "method" attributes of the form, I think.
Do specify a function in JavaScript to call upon submission of the form.

----------

--------------------------------------------------
8 March 2017

----------
Autocomplete Box

https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets

----------
Meet with Alexander Lex

Alex recommends to minimize development of features for style or convenience.
An example is the collapsible control panel and responsive accommodation of different display dimensions.
Alex recommends completing a prototype with basic functionality as soon as possible.

Query Interface
Alex recommends allowing the user to append a new div element to a Query queue for each query step.
The query div elements will give the user all the necessary options for the query functions.
Alex recommends using JavaScript, probably D3 to append these div elements.
JQuery might be another option.
Or I could just use straight JavaScript.

--------------------------------------------------
7 March 2017

----------

Magdalena Schwarzle recommends keeping all code as modular as is practical.
She also recommends using descriptive comments.
She also recommends using libraries rather than re-implementing common functionality.

Use libraries
Accordion
Resizable div

Figure out transitions, like the example below uses.
http://www.hongkiat.com/blog/create-css-based-content/

----------
Interface Plan

I want my control and navigation menus (HTML Forms) in a collapsible panel on the left side of the screen.
I want this panel to occupy the full height of the screen.

Note
I do not want Dropdown panels.
These lie on top of the other page elements.
I want an accordion that pushes other page elements down.

http://www.hongkiat.com/blog/css-only-accordion/

http://www.hongkiat.com/blog/create-css-based-content/

https://codepen.io/josh_vogt/pen/EaaZbP

https://webdesign.tutsplus.com/tutorials/how-to-make-responsive-scrollable-panels-with-flexbox--cms-23269

https://developer.mozilla.org/en-US/docs/Web/CSS/:checked
https://codepen.io/josh_vogt/pen/EaaZbP

----------
Interface Study

Use standard elements for the interface.

HTML Introduction
https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML
Tutorials I read:
-Introduction to HTML
--HTML Basics
--Getting started with HTML
--What's in the head? Metadata in HTML
--HTML text fundamentals
--Creating hyperlinks
--Advanced text formatting
--Document and website structure
--Debugging HTML

CSS Introduction
https://developer.mozilla.org/en-US/docs/Learn/CSS
Tutorials I read:
-CSS Basics
-Introduction to CSS
--How CSS works
--CSS Syntax
--Selectors (not all sub-articles yet...)
---CSS Values and Units
--Cascade and Inheritance
--The Box Model
-Styling Boxes (not all sub-articles yet...)
-CSS Layout
--Introduction to CSS Layout
--Floats
--Positioning

Web Color Tool
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Colors/Color_picker_tool

HTML Tables
https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables

HTML Forms Tutorial
https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms

HTML Elements
<div>
<span>
<h1> etc...
<ul>, <li>
<ol>, <li>
<dl>, <dt>, <dd>
<details> and <summary> elements
<em>
<strong>
<b>, <i>, <u>
<a>
<header>, <nav>
<main>, <article>, <section>, <p>, <div>, <span>, <aside>, <footer>
<br>
<hr>

Unicode Characters
https://www.w3schools.com/charsets/ref_utf_geometric.asp

Drop-down menus
https://www.w3schools.com/howto/howto_js_dropdown.asp

Collabsible lists
https://www.w3schools.com/howto/howto_js_accordion.asp

Hide/Show Panel
https://www.w3schools.com/css/tryit.asp?filename=trycss_display_js

--------------------------------------------------
6 March 2017

----------
Query Goals

- Sequentially apply multiple query operations (ego network for single compartment).
- Select k-shortest simple paths between 2 or more nodes (optionally ignoring specific nodes... filter them out first).
- Replicate specific nodes, such as those with excessively great degrees.
- Represent the metabolic network as reactions between general (non-compartmental) metabolites.

----------

"Network Visualization in Cell Biology"
Kasper Dinkla, Michel A Westenberg
2012
http://ieeexplore.ieee.org/document/6297584/

"Compressed Adjacency Matrices: Untangling Gene Regulatory Networks"
Kasper Dinkla, Michel A Westenberg, Jarke J van Wijk
2012
http://ieeexplore.ieee.org/abstract/document/6327251/

----------

Meeting with Alexander Lex and Team

Progress

-Minimize dependency on CytoScape.js
--The functionality of CytoScape.js does not impress me much
--I prefer to query the data using core JavaScript, since some query operations are more complex that typical CytoScape.js support
--Changed strategy to pass arrays of node identifiers between query functions
--Only use CytoScape.js core network when necessary

-Change to data structure
--Filters on arrays of nodes and links inefficient
--Organized data in keyed, dictionary-like objects instead

Plan

Interface
-Query
--Identity (this is essentially a selection by identifier property)
---Select single or multiple nodes by identity
--Property
---Select or filter multiple nodes by property
--Relation
---Select nodes by relation to previously-selected node(s)

Matrix Representation of metabolic network?

Alex did not recommend attempting a matrix representation of the metabolic network (metabolites as columns, reactions as rows, with links as grids).
The mean degree of nodes in the network is low (3.3), so the network is very sparse.

Alex advised me to consider Kasper Dinkla's hybrid matrix representation of metabolic networks.

--------------------------------------------------
3 March 2017

----------

For perspective, here are some metrics of the current model of the metabolic network.
Count of nodes for reactions: 7785
Count of nodes for metabolites: 5324
Count of total nodes: 13109
Count of links: 43212
Mean links per node: 3.30

With a mean of only 3 links per node, the network is very sparse. Still, as I've explored the network with various queries, the density of the network has impressed me a lot. I expect that a few nodes with extremely high degrees dominate, as we've considered before. I'm curious to see the distribution of the degrees of nodes in the network.

I expected the network to be far more sparse, and I predict that most biologists would expect the same. Most maps represent the network in very sparse pathways that ignore a lot of metabolites, especially those with extremely high degrees.

From a biological perspective, I hope that my project can illustrate the interconnectedness of the metabolic network. This illustration might even promote an appropriate paradigm shift in the misconception that the metabolic network involves discrete pathways.

The density of the metabolic network is a great challenge with node-link diagrams. I still think these diagrams are necessary, but I also wonder if a matrix representation would be useful. I don't think that I've ever seen a matrix representation of the metabolic network. This representation would bring a certain degree of novelty, a new way of interpreting the metabolic network. Also, there might be some interesting observations.

What do you think about including a matrix representation? Here are the encodings I would consider: 1) Metabolites as both rows and columns with pixels for reactions 2) Metabolites as rows and reactions as columns with pixels for links between them.

--------------------------------------------------
2 March 2017

----------

----------
Assembly of the model with the new structure requires about 7 minutes.
The assembly only required about 3 minutes in the previous structure.

Previous file size: 7001 kilobytes
New file size: 6293 kilobytes

----------
Design Decision

With node records in an array, many filter operations are necessary.
These filter operations on arrays are less efficient than look-up operations on dictionary-like objects.
The computational burden is obvious, for example in the collectProcessNetwork procedure.
I will change the structure of the data to store records for links and nodes in dictionary-like objects with unique identifiers as keys.

This structure will, I think, also be beneficial for my strategy of using the data in this structure as much as practical.

----------
Design Decision

All of my top-level primary query functions need to be versatile so that I can combine them in various sequences (chain them together).
All of these query functions exist to select collections of nodes.
I will always show all links (including bidirectional) between nodes.
Hence, collections of nodes themselves are the most important goal of query functions.

I prefer to handle data in as basic and fundamental a structure as is practical.
These structures are most reliable, versatile, and permanent.
These structures are also convenient for handling my data in its combination of relational and network structures.
I prefer to handle the network data in its basic form, not as a CytoScape.js core or collection.
Handling the network data as a CytoScape.js core or collection might be most useful for some topological or attribute queries and for visualization.

Each query function needs to accept a collection (array) of nodes as input and return a new collection of nodes as output.
The functions themselves can convert these collections of nodes to CytoScape.js cores or collections if necessary.

Also, I will convert the collections of nodes to CytoScape.js cores or collections as a final step in each query.
That step will be important for visualization.

--------------------------------------------------
1 March 2017

----------
Identifiers for Metabolic Processes

process_1, process_2, process_3, etc
Determine when assembling the set.
Replace the names in reaction nodes.

----------

TODO: include a "process" field for every reaction node.
If the process is undefined, set it to "null".

----------

New Queries

Select an ego network within a specific compartment.

Select a process network within a specific compartment.

----------

Transport events are general and do not have annotations for specific processes.
As a result, networks for processes are disjoint with separate networks for separate compartments.

I can include transport events in the process networks by connecting identical metabolites in separate compartments (pyr_c, pyr_m, pyr_x).
That matching algorithm would be a little complex.

----------
Metabolic Process

Count of reactions in model: 7785
Count of reactions with annotation for metabolic process: 6931
Count of reactions without annotation for metabolic process: 854

----------

--------------------------------------------------
28 February 2017

----------
Query Selection

Selection by Attribute

All queries by attributes will consider nodes only.

Select nodes in a network.
network.nodes().filter(***selector or function***);

Select nodes by name.
***I need a function to check for names that include a query string.

Select nodes by class.
network.filter("node.className");
network.nodes().filter(".className");

Select nodes by data attribute or attributes.
network.filter("node[attributeName = numericValue]");
network.nodes().filter("[attributeName1 = numericValue]");
network.nodes().filter("[attributeName2 = 'characterValue']");
Join by logical and operator.
network.nodes().filter("[attributeName1 = numericValue][attributeName2 = 'characterValue']");
Join by logical or operator.
network.nodes().filter("[attributeName1 = numericValue], [attributeName2 = 'characterValue']");

Examples

Select nodes for metabolites in the peroxisomal compartment.
network.nodes().filter(".metabolite[compartment = 'x']");

Selection by Attribute and Topology

Select all reactions that participate in a specific process or pathway.
Then select all metabolites that participate in these reactions.

--------------------------------------------------
27 February 2017

----------

Before implementing new algorithms for queries for shortest paths, Alex recommended implementing functionality for filters by properties.
Then I can also combine those filters with topological queries.

I can use the A Star algorithm to find the directional or nondirectional shortest paths between 2 nodes.
There are a few additional things that I need for shortest path queries.

1) Many shortest paths pass through nodes with extremely high degrees, such as water or protons.
Alex recommended giving the user control over whether or not to ignore these nodes in shortest path queries.
He also recommended giving the user control over which nodes to ignore in shortest path queries.
Maybe I can simply filter or omit them from the network before the shortest path query.
Filter these nodes from the network.
Pass the resulting network to the shortest path query.

2) I need to consider multiple shortest paths between nodes.
The single shortest path that the query returns might not be the only shortest path, or there might be other paths that are relevant.
Alex approves of my using a breadth-first search to assemble these multiple shortest simple paths.

3) I need to consider shortest paths between multiple (>2) nodes.
I might just find shortest paths between all pairs of nodes and then take the union.
I might be able to apply my multiple shortest simple paths algorithm recursively.
Alex approves of this strategy.

----------

This conversation on Stack Overflow is helpful for modifying a breadth-first search to find k shortest paths in an unweighted network.

http://stackoverflow.com/questions/14144071/finding-all-the-shortest-paths-between-two-nodes-in-unweighted-undirected-graph

Here is what I need.
Find k (multiple) shortest simple (no replicate visits to nodes) paths between 2 nodes in a directed, unweighted graph with multiple links between nodes (a multi digraph).

--------------------------------------------------
23 February 2017

----------
Alex observed that both the Dijkstra's algorithm and the K Simple Shortest Paths algorithm (Jin Y Yen, 1971) are for general, weighted graphs.
Dijkstra's algorithm is a special type of breadth-first search to accommodate weights.

My graph (as I treat it) is not weighted.
I should be able to find k simple shortest paths using an algorithm built on top of a breadth-first search.

Maybe I should implement my own recursive breadth-first-search that has optional restriction for link directionality in both directions and proceeds to a specific depth.

Then I can use that function to drive both my ego network function and my function for k simple shortest paths.

Do I need to worry since my network is a multi-di-graph?
That is, my network has directional links.
Also, I can have multiple, parallel links in opposite directions between two nodes.

https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm
http://stackoverflow.com/questions/8379785/how-does-a-breadth-first-search-work-when-looking-for-shortest-path


http://www.eecs.yorku.ca/course_archive/2006-07/W/2011/Notes/BFS_part2.pdf
http://networkx.readthedocs.io/en/stable/reference/generated/networkx.algorithms.simple_paths.shortest_simple_paths.html


----------

There are a few additional topological queries that I think would be useful.

1) Shortest path between 2 nodes with consideration of link directionality.
Solution: A Star algorithm, available in CytoScape.js as eles.aStar().

2) Shortest paths between more than 2 nodes with consideration of link directionality. I'm considering a recursive application of the A Star algorithm.
Solution: Use a single-source version of Dijkstra's algorithm to determine shortest paths between each node of interest and all other nodes in the network.
Then select for each node of interest the paths to all other nodes of interest.
Combine these.
Use CytoScape.js eles.dijkstra(), filter appropriately, and use eles.union().

3) Multiple alternative shortest paths between 2 nodes, "K Shortest Paths".
NetworkX, the Python library, has a function for "shortest_simple_paths".
There is no similar solution either in CytoScape.js or in JSNetworkX.
Solution: Consider implementing the K Simple Shortest Paths algorithm (Jin Y Yen, 1971) for CytoScape.js.
Use the currently available implementation of Dijkstra's algorithm or A Star algorithm if possible.

----------

Dijkstra's Algorithm
https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm
Dijkstra's Algorithm "is asymptotically the fastest known single-source shortest-path algorithm for arbitrary directed graphs with unbounded non-negative weights".

A Star Algorithm
A Star algorithm relies on a heuristic function to prioritize paths in progress.
Without this heuristic function, I think that the A Star algorithm is essentially identical to Dijkstra's algorithm.

In order to determine the paths (shortest or otherwise) between nodes, any search algorithm must traverse a substantial portion of the network.
This traversal is computationally expensive, and it will be more efficient to perform it a single time.
To find paths between multiple nodes, it will be more efficient to traverse the network a single time, store information about all paths, and then select the information for paths between desired nodes.

In contrast, my implementation of functionality to collect ego networks does not need to traverse the entire network.
In that case, I think that my implementation was more efficient that determine the lengths of all paths and filtering.

----------
Shortest Paths beween Multiple Nodes

I would like to implement a recursive application of the aStar algorithm that can find shortest paths between all nodes in a list of more than 2 nodes.
I suppose that I could consider the option of adapting the algorithm that finds shortest paths between all pairs of nodes in a network.

----------
K Shortest Paths
https://en.wikipedia.org/wiki/K_shortest_path_routing

NetworkX has a function for "shortest_simple_paths" (http://networkx.readthedocs.io/en/stable/reference/generated/networkx.algorithms.simple_paths.shortest_simple_paths.html).
This function returns a count of simple paths (no loops or revisits) up to a specific limit between a source node and a target node in a network.
It is thus possible to select how many shortest paths you want.

JSNetworkX does not yet have "shortest_simple_paths" from NetworkX.
JSNetworkX has not had any updates since 18 July 2015.

CytoScape.js does not have a function to compute all simple paths.

--------------------------------------------------
22 February 2017

----------
Tasks

Selection
The user can combine these selections for specificity.

1. Select metabolites and reactions by topology.
1.1. Select metabolites and reactions within a specific topological proximity to a single query metabolite or reaction.
Example: Select metabolites and reactions within 1 reaction of pyruvate.
Example: Select metabolites and reactions within 3 reactions of pyruvate.
Solution: I implemented function collectEgoNetwork to collect nodes and links in an ego network around a single focal node.
This function can also consider link directionality in its traversal of the network.

1.2. Select metabolites and reactions within shortest paths between multiple metabolites, reactions, or combinations thereof.
Example: Select metabolites and reactions in the shortest paths between glucose and pyruvate.
Requirements: Functionality for traversal for neighborhood and shortest paths.
Solution: The aStar function in CytoScape.js finds the shortest path between two nodes.
This function can consider link directionality in its traversal of the network.
Will it be helpful to consider k shortest paths (https://en.wikipedia.org/wiki/K_shortest_path_routing), more than just the single shortest path?
Will it be helpful to find shortest paths connecting more than two nodes?
I can probably perform the aStar function multiple times for each pair of nodes and then combine the results.

2. Select metabolites and reactions by property, attribute, or category.
2.1. Select metabolites and reactions by inclusion criteria.
Example: Select transport reactions and their metabolites.
Example: Select metabolites and reactions that appear or occur in the mitochondrial matrix.
2.2. Select metabolites and reactions by exclusion criteria.
Example: Select metabolites and reactions that do not appear or occur in the cytoplasm.
Requirements: Functionality for selections and filters by a variety of properties.
Structure 1: Ignore transport reactions.

3. Select metabolites and reactions by combinations of topology and property, attribute, or category.
3.1. Select metabolites and reactions by multiple topological criteria.
Example: Select metabolites and reactions in the shortest paths between glucose and pyruvate.
Then select metabolites and reactions within 1 reaction of all of these metabolites and reactions.
3.2. Select metabolites and reactions by multiple properties, attributes, or categories.
Example: Select transport reactions and their metabolites between the cytoplasm and the mitochondrial matrix.
3.3. Select metabolites and reactions by combinations of topological criteria and properties, attributes, or categories.
Example: Exclude metabolites with especially high degrees (water, proton, carbon dioxide, etc) from consideration in the network.
Then select metabolites and reactions within 1 reaction of pyruvate.
Example: Select metabolites and reactions within 1 reaction of mitochondrial pyruvate.
Example: Select metabolites and reactions within 1 reaction of pyruvate.
Then select only the metabolites and reactions that appear or occur in the mitochondrion.
Example: Select metabolites and reactions that appear or occur in the mitochondrion.
Then select only the metabolites and reactions that are also in the shortest paths between pyruvate and citrate.

Visualization

1. Represent nodes and links for the network.
Distinct nodes for compartmental metabolites or not...
2. Represents properties and attributes, including those that define sets, clearly and in multiple ways.
Spatial clusters, color highlighting
3. User interaction.

Analysis

Betweenness Centrality
Degree Centrality
Communities, clusters, and cliques in the network might be relevant and interesting, but they are probably beyond the interest of the typical user.

----------
Network

JSNetworkX
My network is a MultiDiGraph.
JSNetworkX supports attributes of nodes and links.

----------
Plans

Queries need to be more specific.

----------
Meet with Alexander Lex

Alex recommended representing the ego network in a table along with the node-link diagram.
This table would have columns for nodes at specific depths from the ego or focal node.

----------
Observations

pyr_x at depth 2 links: 22 nodes (metabolites and reactions)
pyr_x at depth 3 links: 1510 nodes (metabolites and reactions)
pyr_c at depth 2 links: 117 nodes (metabolites and reactions)
cit_c at depth 2 links: 45 nodes (metabolites and reactions)
cit_c at depth 3 links: 2557 nodes (metabolites and reactions)

From a biological perspective, I knew before that pyruvate and citrate were both central nodes in cellular metabolism.
I also knew that the metabolic network was highly interconnected.
Still, even this rather simple analysis of the metabolic network has a certain degree of novelty to biology.
Even this rather simple analysis impresses me from a biological perspective as just how extreme the interconnection of the metabolic network is and how central these metabolites are.

I am eager to evaluate the degrees of metabolites in the network.
This global-level analysis might be very interesting.

--------------------------------------------------
21 February 2017

I completed the implementation of a function to collect nodes and links in an ego network around a focal node.
The function considers link directionality and traverses outward from the focal node to a specific depth.

Ego networks for many metabolites become very complex and enormous very quickly.
At depth 2 or 3, ego networks for many metabolites become very complex and enormous.

The user will need very specific control over queries in order to select sufficiently specific and narrow subsets of the network.
In particular, I think it will be very important for the user to be able to add additional depth by clicking on nodes on the visual network.
That way the user can expand depth in very specific directions.

----------

http://www.pathwaycommons.org/

----------

I met with Tramy Nguyen and Leandro Watanabe, who are members of Christopher J Myers' research team.
I understand from Tramy and Leandro that some tools already exist to visualize networks from systems biology, specifically networks from Systems Biology Markup Language (SBML).
The most popular tool for visualizing these networks is CytoScape (the desktop implementation in Java), using the importer cySBML, for example.
SBGN and associated tools are also useful for visualizing these networks.
Tramy and Leandro mentioned several tools, including iBioSim, BioPAX, CytoScape, Escher, KEGG Translator, and SBGN.

BioPAX seems to be a potentially useful standard for representing biological pathways with more general information than models in SBML tend to include.
When I checked, however, it seems that thorough models of human metabolism are not available in BioPAX as they are in SBML.
It seems that BioPAX more commonly includes general biological pathways.

----------

I wish I knew a better, or at least neater, way to convert a collection to a core in CytoScape.js.
In order to visualize a subNetwork, I need to use the JSON representation of the element in a collection to initiate an entirely new network instance.
I need to specify container, layout, and style in this initiation.

The function collection.cy() returns a core instance from the collection.
The function collection.cy().elements() does not work for defining the elements upon initation of a new network instance.

----------

--------------------------------------------------
20 February 2017

----------

"CySBML: a Cytoscape plugin for SBML"
Bioinformatics
2012
https://www.ncbi.nlm.nih.gov/pubmed/22772946

CySBML imports information from metabolic models in SBML format to the Java version of CytoScape.
I anticipate that an interactive implementation in the JavaScript version of CytoScape will be much more accessible to biologists.

----------

Cola layout
https://github.com/cytoscape/cytoscape.js-cola

----------

The algorithms in CytoScape.js for finding shortest paths only find the shortest path from a root node to all other nodes in the network.
There is not option to restrict the algorithms to a specific depth.
Calculation all path lengths and then using this would be tedious and inefficient.

--------------------------------------------------
17 February 2017

----------

Ego Network with specific directionality

The user of Profondeur might want to know the ego network surrounding a metabolite either without consideration of link direction, or with specific restriction for link directionality in either direction towards or from the focal metabolite.

CytoScape.js has an implementation of the breadth-first search algorithm.
This implementation has an option to either ignore link direction or to follow link direction forward from source to target.
It cannot follow links in reverse direction from target to source.

With the current implementation of the breadth-first search algorithm in CytoScape.js, I cannot allow the user to select an ego network coming towards the focal metabolite.

I think that it will be beneficial for me to implement a custom function to select or collect an ego network with bidirectional control.

My implementation will involve a recursive version of the breadth first search algorithm.
https://en.wikipedia.org/wiki/Breadth-first_search


----------
NetworkX ego_graph
http://networkx.readthedocs.io/en/stable/reference/generated/networkx.generators.ego.ego_graph.html?highlight=ego
This function provides nearly the functionality that I need.

----------

Social Network Application for CytoScape
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4760270/
https://github.com/BaderLab/SocialNetworkApp

----------

I learned that Christopher J Myers and his team (http://www.async.ece.utah.edu/) study biological systems.
They have knowledge and expertise in biological models in Systems Biology Markup Language.
I contacted Chris to request an informal discussion about our projects.

Tramy Nguyen from Chris Meyers' team especially works on this subject.

I know Tramy's sister, Yennhi Thi Nguyen, who is a member of the team of Jeffrey Weiss.

--------------------------------------------------
16 February 2017

----------

Before I implement any new algorithms for topological traversal, I need to understand the available algorithms in CytoScape.js thoroughly.

Neighborhood
The neighborhood of a source node includes all nodes within 1 link of the source node and links between these nodes.
A neighborhood is always for direct relationships between nodes 1 link away from eachother.
A neighborhood is an ego network with a depth of 1.

Ego Network
http://www.faculty.ucr.edu/~hanneman/nettext/C9_Ego_networks.html
An ego network is a network with center around a single ego or focal node.


----------

In topological queries or graph searches, include all links between the nodes in the selection.
Neighborhoods include links between the nodes that they include (https://en.wikipedia.org/wiki/Neighbourhood_(graph_theory)).

For a "recursive neighborhood", or search by proximity, I might be able to use a depth-first search algorithm.

----------

In the core functionality (functions), I would prefer to distinguish between selections by properties/attributes and selections by topology.
Rather than considering properties (compartment, for example) at each step of a traversal, the query will be the same by narrowing a collection by properties and then calling the topological query on that narrowed collection.

I do think that topological functions should at least be able to consider link directionality.

----------
Network Selection in Cytoscape.js

Select single element by identifier
core.getElementById("id");
core.collection("#id");
core.nodes("#id");
core.edges("#id");
core.elements("#id");
core.elements("node#id");

Selection by multiple identifiers


Selection by single attribute
core.elements("node[attribute = value]"); // From core elements, select nodes with attribute equal to value.

Selection by multiple attributes
core.elements("node[attribute1 = value1][attribute2 = value2]")

Combination of selection criteria
-elements.union()
-elements.difference()
-elements.absoluteComplement()
-elements.intersection()

--------------------------------------------------
15 February 2017

----------

I changed the organization of sets for compartments, metabolites, and genes.
Now these sets use dictionary objects with keys.

Assembly of the sets and network elements now only requires 2 minutes.
The file size of the JSON model is 6774 kilobytes.

----------

Meeting with Alexander Lex

Alex recommended organizing information for sets in dictionaries rather than in arrays.
For example, the metabolites should be in a dictionary object with identifiers as keys.
Accessing information from dictionaries by direct reference to a key is more efficient that filtering an array.

Alex recommended 3 levels of queries.
1) Query against the full model to select a subset selection.
2) Filter that subset selection to refine it further.
3) Select portions of the selection for highlighting.
For example...
1) Query against the full model to include only mitochondrial metabolites and reactions.
2) Filter this subset to include only metabolites and reactions in valine biosynthesis.
3) Select transport reactions for highlighting.

Selection of Primary Data Structure
I drew Sketch 2017-02-15_1 to compare and contrast the representations of the metabolic network with and without distinct nodes for compartmental metabolites.
This sketch illustrates challenges in representing reactions between metabolites in multiple (>1) compartments without distinct nodes for compartmental metabolites.
Representation of reversible transport reactions is a special challenge.
Topological traversal and path tracing are not intuitive without distinct nodes for compartmental metabolites.

Assembly of Sets and Network
-Checks of properties of metabolites, reactions, genes, and processes
-Discrepancies in formulas, and names of compartmental records for metabolites

Current Functionality
1) Assemble sets and network elements for a model, checking properties (3.5 minutes)
2) Saves model to user's computer (6727 kilobytes)
3) Load model from user's computer to memory
4) Initiate a CytoScape.js network from network elements
5) Organize sets, network elements, and network instance all in a model object

Future Functionality
1) Query against the model (sets and network) to obtain specific subsets
2) Visualize those subsets

----------

Model properties

-Metabolites
--Each compartmental metabolite with a record participates in at least a single reaction.

-Reactions
--Each reaction has annotation for participation from at least a single metabolite.
--Each compartmental metabolite that participates in a reaction has a corresponding record.
--Some reactions do not have annotations for genes.
--Each gene that participates in a reaction has a corresponding record.
--Some reactions do not have annotations for subsystem or metabolic process.
--Lower bound of each reaction is either 0 or -1000.
--Upper bound of each reaction is always 1000.
--Each reaction either proceeds in forward direction or is reversible.
--Some reactions involve multiple compartments in either reactants or products, such that they involve more than 2 compartments in total.
--Some reactions involve both multiple compartments (>1) in total and chemical changes in metabolites.
--Some reactions that involve multiple compartments (>1) in total are also reversible.

Genes
--Each gene with a record participates in at least a single reaction.

--------------------------------------------------
14 February 2017

----------
The program...
1) assembles sets and network elements for a model
2) saves this model to the user's computer
3) loads the model from the user's computer into memory
4) initiates a CytoScape.js network from the network elements
5) organizes sets, network elements, and network instance all in a model object

Future directions...
1) query against the model (sets and network) to obtain specific subsets
2) visualize those subsets


----------

The program reads from the original metabolic model, converted from SBML to JSON format, and assembles a new model object with sets and network elements.
I decided to store network elements under key "network_elements" within this model object without creating a CytoScape.js network instance from them at first.
Without creating a CytoScape.js network instance, it is not necessary to export the network using json() for saving.
Also, CytoScape.js adds a lot of excess information when it initiates a network and then exports to JSON.
The JSON file for the model of sets and CytoScape.js network has a file size of 12639 kilobytes.
The JSON file for the model of sets and network elements without a CytoScape.js network instance has a file size of 6727 kilobytes.

The network elements in the model are compatible for direct creation of a CytoScape.js network instance.
I will create the CytoScape.js network instance after saving the model's JSON file and then loading it for analysis.
Store the network instance under a new key in the model object for "network".

Model version of 18 January 2017 with redundant and derived properties had a JSON file size of 22071 kilobytes.
Model version of 14 February 2017 with relational sets and JSON version of CytoScape.js network had a JSON file size of 12639 kilobytes.
Model version of 14 February 2017 with relational sets and network elements had a JSON file size of 6727 kilobytes.
I think this version of 6727 kilobytes is still larger than the original metabolic model in JSON format (4000 kilobytes) due to additional information for links.

----------

Complete assembly of the model from sets and network requires about 3.5 minutes.

----------

CytoscapeJS can accept elements in a variety of formats to assemble a network.

I prefer Option 1.
Even if the user initializes a network with Option 2, Cytoscape.js assembles the network in a structure more like Option 1.

Option 1
http://blog.js.cytoscape.org/2016/06/08/glycolysis/

var network = cytoscape({
  elements: {
    edges: [
      {edge_1},
      {edge_2}
    ],
    nodes: [
      {node_1},
      {node_2},
      {node_3}
    ]
  }
}

Option 2
http://js.cytoscape.org/#notation/elements-json
http://blog.js.cytoscape.org/2016/05/24/getting-started/

var network = cytoscape({
  elements: [
    {node_1},
    {node_2},
    {node_3},
    {edge_1},
    {edge_2}
  ]
}

----------

Some reactions have long and intricate gene reaction rules.
Examples:
//HGNC:21481 or HGNC:28335 or HGNC:30866 or (HGNC:6535 and HGNC:6541) or HGNC:6535 or HGNC:6541 or HGNC:6544
//(HGNC:10606 and HGNC:121 and HGNC:2754 and (HGNC:3247 or HGNC:5213)) or (HGNC:121 and HGNC:2754 and (HGNC:3247 or HGNC:5213) and HGNC:82)

----------
Style

Pass the minimal practical amount of information between functions.
Example: function(thing.id)

List the arguments to a function in order of decreasing specificity or relevance to the function.
More specific or relevant arguments come before more general arguments.
Example: function(searchQuery, elementsToSearchAgainst)

----------


--------------------------------------------------
13 February 2017

Create set records for genes.

----------

Future quality controls

Consider confirming or correcting the charges of metabolites by calculating formal charges on the basis of their formulas.

Consider confirming that all metabolites and reactions in the model have unique identifiers.

----------

Queries
-Select all reactions and their metabolites of a specific metabolic process.

--------------------------------------------------
9 February 2017

----------

Several metabolites have discrepancies in charge, formula, and name properties in their compartmental records.
Even though those compartmental records are for the same metabolite, they have different properties.
These discrepancies are either uncertainties or errors in the model.

1. Non-Specific Formulas
For most metabolites in the model, the standard is to have a generic formula for the general metabolite.
This standard is reasonable because general metabolites are chemically identical even if they appear in different compartments.
Several metabolites have some records with specific formulas and some records with non-specific formulas.
The same metabolite can have multiple different non-specific formulas.
An example of a specific formula is "C41H77O16P2".
An example of a corresponding non-specific formula is "C26H46O16P2R".
To solve this problem, use the specific formula that does not include an "R".
If a specific formula is unavailable, use the consensus formula from the majority of matching records.

2. Compartmental Names
For most metabolites in the model, the standard is to have a generic name for the general metabolite without consideration of compartment.
An example of a general name is "pyruvate".
Several metabolites have compartmental identifiers in the name property, such that the name property is not common for all compartmental metabolite records.
An example of a compartmental name is "Mc185_3Z_6Z_9Z_12_Z_15Zcoa_m".
To solve this problem, remove the part of the name after the last underscore if that part is a single character that is identical to the record's compartment.

3. Stereoisomers
Some metabolites have records that indicate opposite stereoisomers for metabolites with the same name.
Examples of stereoisomers are "15(R)-HEPE" and "15(S)-HEPE".
Both of these metabolites have identical formulas and identifiers.
These stereoisomers are chemically distinct, and the model should accurately represent them in separate records.
However, changing their identifiers would require me to also change the identifiers within their reactions.
To solve this problem, reduce the specificity of the metabolites names so they do not specify stereoisomers.
For example, change both "15(R)-HEPE" and "15(S)-HEPE" to "15(R/S)-HEPE" (identifier "CE7081").

4. Typographical Errors
The metabolite with identifier "hedepecoa" has names "2,4,7,10,13-hexadecapentenoylcoa" and "2,4,7,10,13-hexadecapentaenoylcoa".

Only make the corrections if there are discrepancies in the properties of records for the same metabolite.

--------------------------------------------------
7 February 2017

----------
Design Decision

It would be possible to represent the Metabolic Model with a network without distinct nodes for compartmental metabolites.
This model fails to represent transport reactions intuitively.
In this model, topological traversal with consideration of compartments is very complex.
This traversal would require custom traversal algorithms in order to consider transport reactions.
Queries involving topological traversal (neighborhood proximity and shortest path) would be difficult.

It will be most intuitive and explicit to represent the Metabolic Model with a network with distinct nodes for compartmental metabolites.
To support compartment-agnostic queries, aggregation functions will be necessary to work with this representation of the model.

I propose that the representation with distinct nodes for compartmental metabolites is the most accurate.
This representation is the most explicit and versatile.
I also propose that even queries that involve compartment-agnostic (include any compartments) topological traversal should not ignore transport reactions (perhaps even in path lengths).
These transport reactions exist in reality and are relevant steps in the network.

I will need to convert to a representation without distinct nodes for compartmental metabolites for visualization.

----------

Model Structure

Options
1. Organize the network with nodes for general metabolites and reactions with directional links (indicating reaction direction and reversibility) between them.
2. Organize the network with nodes for compartmental metabolites and reactions with directional links (indicating reaction direction and reversibility) between them.

1. Organization, Query
For organization, query, and analysis of the network, either structure could work, I think.
I need to decide which main structure will be the most efficient for data organization and query.
The model structure or structure of the network 

2. Visualization
For visual representation of the network, it will definitely be important to support both structures of the network.
If the user wants to view transport reactions and cluster metabolites by compartment, then distinct nodes for compartmental metabolites will be necessary.

3. Analysis
Derived properties of the network such as degree and betweenness centrality depend on the structure of the network.
Each metabolite has distinct general degree and betweenness centrality and compartmental degree and betweenness centrality.
Degree and betweenness centrality of a compartmental metabolite (cytosolic pyruvate) is different from degree and betweenness centrality for a general metabolite (pyruvate).
It will be important to support both structures of the network.

Options
1. Organize the network with nodes for general metabolites and reactions with directional links (indicating reaction direction and reversibility) between them.
-In reality, reactions (chemical and transport) determine the compartments of metabolites.
-This structure avoids any nodes for compartmental metabolites that exist in isolation without any reactions to put them in their compartment.
-In reality, metabolites in separate compartments are chemically identical.
-Metabolomics measures metabolites in entire tissues and cells without distinction for compartments.
-This structure represents the model more concisely.
-Queries without consideration for compartments are simpler.
-This structure is vague in its representation of transport reactions, especially reversible transport reactions.
-Queries with this structure involve a lot of filter operations.

2. Organize the network with nodes for compartmental metabolites and reactions with directional links (indicating reaction direction and reversibility) between them.
-In reality, metabolites are compartmental.
-In reality, reactions are specific to compartmental metabolites.
-This structure represents the metabolic network as it behaves in reality.
-This structure represents transport reactions, especially reversible transport reactions, clearly.
-Queries with this structure involve a lot of aggregation operations.

----------
Tasks
I need to understand the task requirements so that I can select the optimal data structure and a network library with appropriate functionality.

Selection
The user can combine these selections for specificity.

1. Select metabolites and reactions by topology.
1.1. Select metabolites and reactions within a specific topological proximity to a single query metabolite or reaction.
Example: Select metabolites and reactions within 1 reaction of pyruvate.
Example: Select metabolites and reactions within 3 reactions of pyruvate.
1.2. Select metabolites and reactions within shortest paths between multiple metabolites, reactions, or combinations thereof.
Example: Select metabolites and reactions in the shortest paths between glucose and pyruvate.
Requirements: Functionality for traversal for neighborhood and shortest paths.

2. Select metabolites and reactions by property, attribute, or category.
2.1. Select metabolites and reactions by inclusion criteria.
Example: Select transport reactions and their metabolites.
Example: Select metabolites and reactions that appear or occur in the mitochondrial matrix.
2.2. Select metabolites and reactions by exclusion criteria.
Example: Select metabolites and reactions that do not appear or occur in the cytoplasm.
Requirements: Functionality for selections and filters by a variety of properties.
Structure 1: Ignore transport reactions.

3. Select metabolites and reactions by combinations of topology and property, attribute, or category.
3.1. Select metabolites and reactions by multiple topological criteria.
Example: Select metabolites and reactions in the shortest paths between glucose and pyruvate.
Then select metabolites and reactions within 1 reaction of all of these metabolites and reactions.
3.2. Select metabolites and reactions by multiple properties, attributes, or categories.
Example: Select transport reactions and their metabolites between the cytoplasm and the mitochondrial matrix.
3.3. Select metabolites and reactions by combinations of topological criteria and properties, attributes, or categories.
Example: Exclude metabolites with especially high degrees (water, proton, carbon dioxide, etc) from consideration in the network.
Then select metabolites and reactions within 1 reaction of pyruvate.
Example: Select metabolites and reactions within 1 reaction of mitochondrial pyruvate.
Example: Select metabolites and reactions within 1 reaction of pyruvate.
Then select only the metabolites and reactions that appear or occur in the mitochondrion.
Example: Select metabolites and reactions that appear or occur in the mitochondrion.
Then select only the metabolites and reactions that are also in the shortest paths between pyruvate and citrate.

Visualization

1. Represent nodes and links for the network.
Distinct nodes for compartmental metabolites or not...
2. Represents properties and attributes, including those that define sets, clearly and in multiple ways.
Spatial clusters, color highlighting
3. User interaction.

Analysis

Betweenness Centrality
Degree Centrality
Communities, clusters, and cliques in the network might be relevant and interesting, but they are probably beyond the interest of the typical user.

----------

Tests for the Metabolic Model

Metabolites
1. Do all compartmental metabolites participate in reactions?
It would be misleading to have compartmental metabolites that had no way of getting in their compartments.

Reactions
1. Do any reactions involve multiple compartments in either reactants or products, such that they involve more than 2 compartments in total?
If reactions only involve 1 or 2 compartments, then I can represent in and out compartments for reactions.
It would be difficult to represent reactions involving more than 2 compartments without distinct nodes for compartmental metabolites.
Without distinct nodes for compartmental metabolites, the reaction could indicate the compartments of all reactants and products.

- Yes
Many reactions in the model involve multiple compartments in either reactants or products, such that they involve more than 2 compartments in total.

2. Do any reactions involve both multiple compartments in total and chemical changes in metabolites?
It would be helpful to know that all reactions involve exclusively either transport events or chemical changes.

- Yes
Many reactions involve both multiple compartments and chemical changes.

3. Are any reactions involving multiple compartments in total reversible?
It would be difficult to represent reversible transport reactions without nodes for compartmental metabolites.
Without distinct nodes for compartmental metabolites, the reaction could still indicate its reversibility.

if (countReactionCompartments(reaction) > 1 && determineReversibility(reaction))

- Yes
Many reactions in the model involve multiple compartments and are also reversible.

4. Do lower_bound and upper_bound properties ever have values other than -1000, 0, or 1000?
If these bounds are either -1000, 0, or 1000, then they convey little information beyond reaction directionality and reversibility.
In that case, I could eliminate these properties and instead just keep an indicator of reversibility.

- No

5. Do any reactions have lower_bound > 0 or upper_bound < 0?
These values might suggest that the reaction primarily proceeds in the reverse direction.
Reversible reaction: lower_bound < 0 and 0 < upper_bound

- No

6. Do any reaction have upper_bound = 0?
These values might suggest that the reaction proceeds in the reverse direction.

- No

----------

--------------------------------------------------
6 February 2017

----------
The user might benefit from summaries of properties and derived properties of the model during the query stage.
For example, it might be helpful to provide a summary of the number of reactions that involve multiple compartments or that involve chemical changes.
There are a lot of options, and the user needs to know what information is available.

--------------------------------------------------
3 February 2017

----------
Network Selection in Cytoscape.js

Selection by single identifier
core.getElementById("id");
core.collection("#id");
core.nodes("#id");
core.edges("#id");
core.elements("#id");
core.elements("node#id");

Selection by multiple identifiers


Selection by single attribute
core.elements("node[attribute = value]"); // From core elements, select nodes with attribute equal to value.

Selection by multiple attributes
core.elements("node[attribute1 = value1][attribute2 = value2]")

----------

I think it is most versatile to structure the model using explicit nodes for compartmental metabolites.
Transport reactions exist to relate metabolites in separate compartments.
This representation of the metabolic network is the most comprehensive and accurate.

----------
Code Review with Team Members

Be sure to understand the needs of the user.
Be sure to consider needs of the user when making major design decisions, such as how to structure the network (with or without nodes for compartmental metabolites).

Consider the versatility and customizability of the event handlers for interaction with the network in Cytoscape.js.

Consider the versatility and customizability of the visual representation of the network.
Consider layout options.

Balance conciseness with readability and clarity in programming style.
Avoid excessive variable declarations.

--------------------------------------------------
2 February 2017

----------
Library

SigmaJS
Uses Canvas for graphics rendering.
Has few options (pretty much just force-directed) for layouts.

JSNetworkX
Supports attributes for nodes and edges.
Excellent graph analysis functionality.
Only supports visualization through D3's SVG renderer with force-directed layout.
Does not have great functionality for selection of subsets of the network.

GraphLib
I do not think that GraphLib supports attributes for nodes and links.

I decided (again) that Cytoscape.js probably offers all the functionality that I need for this project, including network organization (nodes, links, attributes), searches or queries, visualization, and interaction.
It will be helpful to have all necessary functionality in a single library so that I do not need to convert data formats and manage compatibility.
Also, Cytoscape.js is a very current project with active development and maintenance.
Also, Cytoscape.js has a lot of users and a lot of financial support.
It will be good to use a library that is familiar among my target audience.

----------
Canvas versus SVG

http://joeloughton.com/blog/web-applications/svg-vs-canvas-performance/
The author of this article tested the performance (frame rate) of multiple browsers on capable personal computers using SVG and Canvas graphics renderers.
In all cases, the canvas renderers out-perform the SVG renderers substantially with only 1000 elements in the DOM.

With nodes for metabolites and reactions and links between those nodes, it is likely that the user will need to visualize selections of the metabolic network with 1000 or more elements.
In order for the browser to support interactivity, a Canvas renderer will probably be necessary.

----------

Tests for the Metabolic Model

Do all compartmental metabolites participate in reactions?
It would be misleading to have compartmental metabolites that had no way of getting in their compartments.

Do any reactions involve multiple compartments in either reactants or products?
Do any reactions involve more than 2 compartments in total?
If reactions only involve 1 or 2 compartments, then I can represent in and out compartments for reactions.
It would be difficult to represent reactions between more than 2 compartments without nodes for compartmental metabolites.

Do any reactions involve both multiple compartments (such as transport) and chemical changes in metabolites?

Do lower_bound and upper_bound properties ever have values other than 0 or 1000?
If these bounds are either 0 or 1000, then they convey little information beyond reversibility, I think.

Are any transport reactions reversible?
It would be difficult to represent reversible transport reactions without nodes for compartmental metabolites.

----------

Model Structure

Options
1. Organize the network with nodes for general metabolites and reactions with directional links (indicating reaction direction and reversibility) between them.
2. Organize the network with nodes for compartmental metabolites and reactions with directional links (indicating reaction direction and reversibility) between them.

1. Organization, Query
For organization, query, and analysis of the network, either structure could work, I think.
I need to decide which main structure will be the most efficient for data organization and query.
The model structure or structure of the network 

2. Visualization
For visual representation of the network, it will definitely be important to support both structures of the network.
If the user wants to view transport reactions and cluster metabolites by compartment, then distinct nodes for compartmental metabolites will be necessary.

3. Analysis
Derived properties of the network such as degree and betweenness centrality depend on the structure of the network.
Each metabolite has distinct general degree and betweenness centrality and compartmental degree and betweenness centrality.
Degree and betweenness centrality of a compartmental metabolite (cytosolic pyruvate) is different from degree and betweenness centrality for a general metabolite (pyruvate).
It will be important to support both structures of the network.

Options
1. Organize the network with nodes for general metabolites and reactions with directional links (indicating reaction direction and reversibility) between them.
-In reality, reactions (chemical and transport) determine the compartments of metabolites.
-This structure avoids any nodes for compartmental metabolites that exist in isolation without any reactions to put them in their compartment.
-In reality, metabolites in separate compartments are chemically identical.
-Metabolomics measures metabolites in entire tissues and cells without distinction for compartments.
-This structure represents the model more concisely.
-Queries without consideration for compartments are simpler.
-This structure is vague in its representation of transport reactions, especially reversible transport reactions.
-Queries with this structure involve a lot of filter operations.

2. Organize the network with nodes for compartmental metabolites and reactions with directional links (indicating reaction direction and reversibility) between them.
-In reality, metabolites are compartmental.
-In reality, reactions are specific to compartmental metabolites.
-This structure represents the metabolic network as it behaves in reality.
-This structure represents transport reactions, especially reversible transport reactions, clearly.
-Queries with this structure involve a lot of aggregation operations.

--------------------------------------------------
1 February 2017

----------
Tasks
I need to understand the task requirements so that I can select the optimal data structure and a network library with appropriate functionality.

Selection
The user can combine these selections for specificity.

1. Select metabolites and reactions by topology.
1.1. Select metabolites and reactions within a specific topological proximity to a single query metabolite or reaction.
Example: Select metabolites and reactions within 1 reaction of pyruvate.
Example: Select metabolites and reactions within 3 reactions of pyruvate.
1.2. Select metabolites and reactions within shortest paths between multiple metabolites, reactions, or combinations thereof.
Example: Select metabolites and reactions in the shortest paths between glucose and pyruvate.
Requirements: Functionality for traversal for neighborhood and shortest paths.

2. Select metabolites and reactions by property, attribute, or category.
2.1. Select metabolites and reactions by inclusion criteria.
Example: Select transport reactions and their metabolites.
Example: Select metabolites and reactions that appear or occur in the mitochondrial matrix.
2.2. Select metabolites and reactions by exclusion criteria.
Example: Select metabolites and reactions that do not appear or occur in the cytoplasm.
Requirements: Functionality for selections and filters by a variety of properties.
Structure 1: Ignore transport reactions.

3. Select metabolites and reactions by combinations of topology and property, attribute, or category.
3.1. Select metabolites and reactions by multiple topological criteria.
Example: Select metabolites and reactions in the shortest paths between glucose and pyruvate.
Then select metabolites and reactions within 1 reaction of all of these metabolites and reactions.
3.2. Select metabolites and reactions by multiple properties, attributes, or categories.
Example: Select transport reactions and their metabolites between the cytoplasm and the mitochondrial matrix.
3.3. Select metabolites and reactions by combinations of topological criteria and properties, attributes, or categories.
Example: Exclude metabolites with especially high degrees (water, proton, carbon dioxide, etc) from consideration in the network.
Then select metabolites and reactions within 1 reaction of pyruvate.
Example: Select metabolites and reactions within 1 reaction of mitochondrial pyruvate.
Example: Select metabolites and reactions within 1 reaction of pyruvate.
Then select only the metabolites and reactions that appear or occur in the mitochondrion.
Example: Select metabolites and reactions that appear or occur in the mitochondrion.
Then select only the metabolites and reactions that are also in the shortest paths between pyruvate and citrate.

Visualization

1. Represent nodes and links for the network.
Distinct nodes for compartmental metabolites or not...
2. Represents properties and attributes, including those that define sets, clearly and in multiple ways.
Spatial clusters, color highlighting
3. User interaction.

Analysis

Betweenness Centrality
Degree Centrality
Communities, clusters, and cliques in the network might be relevant and interesting, but they are probably beyond the interest of the typical user.

----------

Meet with Alexander Lex

1. Problem Characterization Paper?
The "Design Study Methodology" paper (https://www.cs.ubc.ca/nest/imager/tr/2012/dsm/), describes the possibility of a paper that just characterizes a domain problem.
Alex explained that this sort of paper is a big challenge to publish and advised that we instead plan for a design study paper that includes implementation of a tool.
Alex also advised that our paper should include some sort of observation or concept that has general relevance to data visualization.

2. Alternative Structures for Metabolic Models?
In my sketches 2017-01-21_1 and 2017-01-21_2, I planned two alternative structures for the information on the metabolic model.
Structure 1 has distinct nodes for compartmental metabolites, whereas structure 2 has general metabolites.
The metabolic models from the systems biology community have distinct nodes for compartmental metabolites.
From the structure with distinct nodes for compartmental metabolites, it would be possible to represent compartments, metabolites, and subsystems as sets of these nodes (either by positional grouping/clustering or by color highlighting).

Alex advised not to use multiple, distinct structures for the data.
Instead, Alex advised to select a single structure and then derive the appropriate information according to the user's interest and interaction.
The structure will preserve all of the relevant information for the model.
Alex also advised to consider the convenience of the alternative structures for the data.
Alex advised to consider the relative convenience of filter operations (usually more convenient) versus aggregation operations (usually less convenient).
He did not mean to consider computational efficiency, but convenience of implementation.

3. Cytoscape.js or an Alternative JavaScript Library for Network Analysis and Visualization?
The library should be a robust solution, meaning that it should have appropriate maintenance and support for the lifetime of the project.
The library should provide sufficient functionality for network organization (nodes, links, properties), analysis (centrality, communities, cliques), search (traversal, properties), and visualization (styles, layouts).
Cytoscape.js meets these criteria, I think.
I think Cytoscape.js especially provides good support for attributes and properties of nodes and edges.

While some other libraries offer more extensive functionality for graph algorithms (communities, cliques), Alex advised that our project does not require complex graph algorithms.
We can implement any supplemental functionality that we need.
Alex advised that I should use Cytoscape.js if it is a convenient solution.
I should only switch to another option if Cytoscape.js is somehow insufficient.
Alex advised that Cytoscape.js's visualization with Canvas instead of SVG is suitable.
Alex also advised that we probably do not want to implement a custom layout algorithm.

4. Next Steps?
Alex advised to implement functionality for queries against the network to select appropriate subsets.
Once we can select appropriate subsets, we will have a better idea for the sorts of challenges we face in visualizing these subsets.
Alex also advised to implement functionality for visualization of these subsets.

----------
Graph Network Analysis (Traversal)

Summary of Graph Algorithms
https://neo4j.com/blog/graph-search-algorithm-basics/

Requirements
Structure for graph or network nodes and links along with properties.
Functionality to query and traverse the network, graph algorithms.
Visual representation of subsets of the network with a variety of layout options and other options.

Lists of options.
http://anvaka.github.io/graph-drawing-libraries/#/all
http://www.jsgraphs.com/

Cytoscape.js
http://js.cytoscape.org/

Vis
http://visjs.org/
https://github.com/almende/vis
-Only supports visual representation drawing, I think.

VivaGraph
https://github.com/anvaka/VivaGraphJS
-Only supports visual representation drawing, I think.

SigmaJS
http://sigmajs.org/
https://github.com/jacomyal/sigma.js
-Primarily for visual representation drawing.
-Primarily a rendering engine.
-Minimal functionality for network analysis (graph algorithms).

JSNetworkX
http://jsnetworkx.org/index.html
https://github.com/fkling/JSNetworkX
-Aim is to be full functional library for network analysis and visualization.
-Out-dated project.

GraphLib
https://github.com/cpettitt/graphlib
-Provides structure for network.
-Provides functionality for graph algorithms and traversal.
-Provides little structure for properties or attributes of nodes and links.
-Not very popular or current, perhaps because graph databases are so common.

GraphJS
https://github.com/devenbhooshan/graph.js

I searched some more for JavaScript libraries for networks or graphs. For search and analysis with graph algorithms, there are 1) JSNetworkX (http://jsnetworkx.org/), 2) Cytoscape.js (http://js.cytoscape.org/), 3) GraphLib (https://github.com/cpettitt/graphlib), and 4) GraphJS (https://github.com/devenbhooshan/graph.js). For visualization, there are 1) D3 (https://d3js.org/), 2) SigmaJS (http://sigmajs.org/), 3) Cytoscape.js (http://js.cytoscape.org/), 4) Vis (http://visjs.org/), and 5) VivaGraph (https://github.com/anvaka/VivaGraphJS).

----------

----------
Cytoscape.js Tutorials
http://blog.js.cytoscape.org/2016/05/24/getting-started/
http://blog.js.cytoscape.org/2016/06/08/glycolysis/
http://blog.js.cytoscape.org/2016/07/04/social-network/

----------

Include labels for nodes

----------
https://groups.google.com/forum/#!msg/cytoscape-discuss/bEgh67aw1BI/H0MOI7T4wBQJ
Cytoscape.js renders graphics in the Document Object Model (DOM) using a canvas renderer instead of a SVG renderer.
Apparently the team first used a SVG renderer, but switched to the canvas renderer for performance reasons.
Using Cytoscape.js with a SVG renderer would not be simple.

https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Drawing_DOM_objects_into_a_canvas
----------

----------
----------
----------

CySBML (http://apps.cytoscape.org/apps/cysbml) is a plugin for CytoScape for the importation of information from metabolic models in SBML format.
CySBML runs in Java.
It makes information from metabolic models available as networks to the CytoScape application in Java.

Cytoscape can export network information in JSON format to be accessible to Cytoscape.js.
http://wiki.cytoscape.org/Cytoscape_3/UserManual/CytoscapeJs

I do not know how clean the conversion from SBML to CytoScape and from CytoScape to Cytoscape.js would be.

It is probably more reliable to format the data myself.

----------
----------
----------

--------------------------------------------------
31 January 2017

----------
Network Visualization and Analysis with CytoScape.js
http://blog.js.cytoscape.org/2016/05/24/getting-started/

Create a CytoScape network for the entire network of the model.
Create separate CytoScape networks for selections from the master network to visualize.

----------
Cose Layout
http://www.sciencedirect.com/science/article/pii/S0020025508004799

----------
Link Directionality

Use multiple links in both directions between metabolites and reactions to represent reversible reactions.

--------------------------------------------------
30 January 2017

----------

Google JavaScript Style Guide
https://google.github.io/styleguide/jsguide.html

JSDoc
http://usejsdoc.org/
http://usejsdoc.org/tags-param.html
http://usejsdoc.org/tags-returns.html
http://usejsdoc.org/tags-type.html

Indicate parameter and return types using syntax of the Closure sytem.
https://github.com/google/closure-compiler/wiki/Types-in-the-Closure-Type-System

Specify properties of return object.
https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=jsdoc+returns+object+properties

----------

JavaScript distinguishes between primitives and objects for strings, numbers, and booleans.

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Distinction_between_string_primitives_and_String_objects

----------

Programming Style

Document concisely and clearly.

Structure code with good organization.

Follow principles of functional programming as much as is practical.
Emphasize modularity.

Avoid excessive variable creation to avoid excessive garbage collection.

Minimize the burden of passing data around.
Only pass the minimal necessary information to a function so that the function can perform sufficiently.

----------

Data Structure and Organization
Sketches 2017-01-21_1 and 2017-01-21_2 summarize the structure of the data.
These sketches are basically entity-relation diagrams.

I will have a single, dictionary-like object that I name "model".
This object will include relational tables for set information that is relevant to multiple nodes.
This object will also include the network information for nodes and links in the format that is appropriate for cytoscape.

Summary

var core = cytoscape({
    elements: [
        
        {
            group: "nodes",
            class: "reaction",
            data: {
                compartments: {
                    c: "cytoplasm",
                    m: "mitochondrion"
                },
                gene_reaction_rule: "gene_1 or gene_2 or gene_3",
                id: "reaction_identifier",
                lower_bound: 0,
                metabolites: {
                    reactant: -1,
                    product: 1
                },
                name: "reaction_name",
                products: ["product_1", "product_2"],
                reactants: ["reactant_1", "reactant_2"],
                reversibility: true,
                subsystem: "pathway_or_process",
                //type: "reaction" or "transport",
                type_reaction: true,
                type_transport: false,
                upper_bound: 1000
            }
        },

        {
            group: "nodes",
            class: "metabolite",
            data: {
                abbreviation: "cit",
                charge: -3,
                compartment: {
                    c: "cytoplasm"
                },
                compartments: {
                    c: "cytoplasm",
                    m: "mitochondrion"
                },
                formula: "C6H5O7",
                id: "cit_c",
                name: "Citrate",
                reactions: {
                    rxn1: "reaction 1",
                    rxn2: "reaction 2",
                    rxn3: "reaction 3"
                }
            }
        },

        
        {group: "edges", data: {id: "ab", source: "a", target: "b", weight: 10}},
        {group: "edges", data: {id: "bc", source: "b", target: "c", weight: 15}},
        {group: "edges", data: {id: "ac", source: "a", target: "c", weight: 20}}
        
    ]

});



----------

Gephi
https://gephi.org/
Gephi is a stand-alone program for graph analysis and visualization.
It might be an interesting model for useful functionality for graph analysis and visualization.

----------

"Design Study Methodology: Reflections from the Trenches and the Stacks"
2012
https://www.cs.ubc.ca/nest/imager/tr/2012/dsm/
"
Our definitions imply that a design study paper does not require a novel algorithm or technique contribution.
Instead, a proposed visualization design is often a well-justified combination of existing techniques.
While a design study paper is the most common outcome of a design study, other types of research papers are also possible such as technique or algorithm, evaluation, system, or even a pure problem characterization paper.
"

Would it be advantageous for us to develop and publish a paper characterizing the domain-specific needs of metabolism research as they relate to information visualization?

--------------------------------------------------
21 January 2017

Data Organization and Structure

----------
----------
----------
Data Structure
Represent compartmental metabolites with distinct nodes

"model"

-"sets": The properties that define sets of nodes
--"compartments"
---Model Properties or Attributes
----"id": Identifier for the compartment
----"name": Name of the compartment
---Derived Properties or Attributes
----"count_reactions": Count of reactions in each compartment (c: 3000, m: 1000)
----"count_metabolites": Count of metabolites in each compartment (c: 3000, m: 1000)
----"metabolites": Metabolites that appear in the compartment
----"reactions": Reactions that occur in the compartment
----"share_metabolites": Count of metabolites shared with each other compartment
----"share_transports": Count of transports shared with each other compartment
--"metabolites"
---Model Properties or Attributes
----"charge": Chemical charge of the metabolite
----"formula": Chemical formula of the metabolite
----"id": Identifier for the metabolite (Example: "pyr")
----"name": Name of the metabolite (Example: "pyruvate")
---Derived Properties or Attributes
----"centrality_betweenness": The betweenness centrality of the metabolite without restriction by compartment
----"centrality_betweenness_compartment": The betweenness centrality of the metabolite within each compartment
----"centrality_degree": The degree centrality of the metabolite without restriction by compartment
----"centrality_degree_compartment": The degree centrality of the metabolite within each compartment
----"compartments": Compartments in which the metabolite appears
----"count_reactions_compartment": Count of reactions in which the metabolite participates in each compartment
----"reactions": Reactions in which the metabolite participates in all compartments.
--"processes": The pathways or subsystems of the metabolic network
---Model Properties or Attributes
----"name"
---Derived Properties or Attributes
----"count_reactions": Count of reactions in each process
----"compartments": Compartments in which reactions occur in each process

-"network": The primary graph representation of nodes and links
--"nodes"
---"metabolites"
----Model Properties or Attributes
-----"compartment": Specific compartment of the metabolite node (Example: "c")
-----"id": Identifier for metabolite node ("pyr_c")
-----"metabolite": Identifier for metabolite ("pyr")
----Derived Properties or Attributes
----"centrality_betweenness": The betweenness centrality of the metabolite within its compartment
----"centrality_degree": The degree centrality of the metabolite within its compartment
----"reactions": Reactions in which the metabolite participates within its compartment
---"reactions"
----Model Properties or Attributes
-----"gene_reaction_rule"
-----"id"
-----"lower_bound"
-----"metabolites"
-----"name"
-----"subsystem"
-----"upper_bound"
----Derived Properties or Attributes
-----"chemicals_change": Whether or not the reactants and products differ chemically
-----"compartments": The compartments of metabolites in the reaction
-----"compartments_change": Whether or not the compartments of reactants and products differ
-----"multiple_compartments": Whether or not the reaction involves metabolites in multiple compartments
-----"products": Metabolites that are products in the reaction
-----"reactants": Metabolites that are reactants in the reaction
-----"reversibility": Whether or not the reaction is reversible
--"edges"
---"id": Source identifier underscore target identifier
---"source": Link source is node for reactant metabolite or node for reaction. Reversible reactions also have links in reverse direction.
---"target": Link target is node for reaction or node for product metabolite. Reversible reactions also have links in reverse direction.

----------
----------
----------

Data Structure
Represent metabolites as nodes without compartmental distinction
Omit reactions that represent transport events (reactions with multiple compartments)

"model"

-"sets": The properties that define sets of nodes
--"compartments"
---Model Properties or Attributes
----"id": Identifier for the compartment
----"name": Name of the compartment
---Derived Properties or Attributes
----"count_reactions": Count of reactions in each compartment (c: 3000, m: 1000)
----"count_metabolites": Count of metabolites in each compartment (c: 3000, m: 1000)
----"metabolites": Metabolites that appear in the compartment
----"reactions": Reactions that occur in the compartment
----"share_metabolites": Count of metabolites shared with each other compartment
----"share_transports": Count of transports shared with each other compartment
--"processes": The pathways or subsystems of the metabolic network
---Model Properties or Attributes
----"name"
---Derived Properties or Attributes
----"count_reactions": Count of reactions in each process
----"compartments": Compartments in which reactions occur in each process

-"network": The primary graph representation of nodes and links
--"nodes"
---"metabolites"
----Model Properties or Attributes
----"charge": Chemical charge of the metabolite
----"formula": Chemical formula of the metabolite
----"id": Identifier for the metabolite node (Example: "pyr")
----"name": Name of the metabolite (Example: "pyruvate")
----Derived Properties or Attributes
----"centrality_betweenness": The betweenness centrality of the metabolite without restriction by compartment
----"centrality_betweenness_compartment": The betweenness centrality of the metabolite within each compartment
----"centrality_degree": The degree centrality of the metabolite without restriction by compartment
----"centrality_degree_compartment": The degree centrality of the metabolite within each compartment
----"compartments": Compartments in which the metabolite appears
----"count_reactions_compartment": Count of reactions in which the metabolite participates in each compartment
----"reactions": Reactions in which the metabolite participates in all compartments
---"reactions"
----Model Properties or Attributes
-----"compartment": The compartment of metabolites in the reaction... Due to the restriction of this representation, all reactions will have a single compartment
-----"gene_reaction_rule"
-----"id"
-----"lower_bound"
-----"metabolites"
-----"name"
-----"subsystem"
-----"upper_bound"
----Derived Properties or Attributes
-----"chemicals_change": Whether or not the reactants and products differ chemically
-----"products": Metabolites that are products in the reaction
-----"reactants": Metabolites that are reactants in the reaction
-----"reversibility": Whether or not the reaction is reversible
--"edges"
---"id": Source identifier underscore target identifier
---"source": Link source is node for reactant metabolite or node for reaction. Reversible reactions also have links in reverse direction.
---"target": Link target is node for reaction or node for product metabolite. Reversible reactions also have links in reverse direction.

Note

Betweenness Centrality and shortest paths will be most informative with consideration of directionality in the network.
The CytoScapeJS function "eles.betweennessCentrality()" can either consider directionality or ignore it.

If I use multiple links to represent directionality in reversible reactions, then I might need to account for these multiple edges in calculations of node degree.
The CytoScapeJS function "edges.parallelEdges()" might be useful in this situation.
Actually, I think that if a metabolite participates in a reversible reaction, then its degree centrality should rightfully reflect that.


----------
----------
----------

--------------------------------------------------
19 January 2017

----------
----------
----------

----------
----------
----------

Modules

http://exploringjs.com/es6/ch_modules.html
No browsers support export and import of modules in JavaScript.
For now, I should probably just use scripts.

----------
----------
----------

Dimensions of the metabolic network
1) Entities are compartmental metabolites (compartment-specific) and reactions.
2) Entities are metabolites (not compartment-specific) and reactions.
3) Entities are compartments with relations between them (shared metabolites, transports).
4) Entities are subsystems or pathways.

I do not think that the parent-child compound nodes in CytoScapeJS would be very useful to represent these sets.
I think it makes more sense to treat these sets as sets and to define properties of them.

Maybe the user could choose at run-time between a few options of how to represent the network.
The most important distinction is whether or not to treat compartmental metabolites as distinct nodes.

In that case, there will be different functions for assembling the network.
Modular functions for deriving additional properties and attributes will be helpful.

----------
----------
----------

Separate network assembly from derivation of properties.

1) Assemble network (using the information already in the model)

2) Derive properties (including network theory properties like degree and betweenness centrality)

Derive properties or attributes in advance or as they become necessary?
Only derive properties in advance if they will benefit interactive queries and such later.
Otherwise have the functionality available to derive these properties on-the-fly.
Balance priorities.
Derive attributes as they become necessary to keep the data base concise or derive attributes in advance to make the program more interactive.

T Cameron Waller to Ethan Kerzner
"
I'm balancing the pros and cons... 1) Derive attributes as they become necessary to keep the database concise 2) Derive attributes in advance and store in database to make the program more interactive. I think 1) is preferable in my situation unless the program's performance suffers.

 2) would increase the size of my data dramatically, and the user would have to download and/or support it in memory.

 
Do you agree?
"
Ethan Kerzner to T Cameron Waller
"
Hard to say. It depends on the size of the attributes and computational complexity of deriving them.
I think you're asking the wrong questions for a research application though.
I would look at:

-what is easier and faster for you to implement?
-if it turns out there's a bug in how you're deriving the attributes, which way will be easier to debug and modify?
-if you want to add additional attributes, which one would be easier to extend?


The answers to these are personal preference based in your workflow.
"
T Cameron Waller to Ethan Kerzner
"
I think that's good advice. Thank you. ... By the way, the goal of my project is a blend of a research prototype and a functional tool. That goal shifts priorities a little.
"
Ethan Kerzner to T Cameron Waller
"
You bet!


Beware though: vis tools often need many iterations before they are actually useful. And i'd say being useful is a prerequisite to having a deployable tool. Trying to productize software or optimize it prematurely can be a huge time sink. And very disheartening if you have to change directions of your application. Just my 2 cents though.


"

Design Decision

Simplify the data.
Store in the data properties and attributes that describe the entities and relations of the network.
Store the minimal data to describe the network completely.
Derive additional properties and attributes as they become necessary for queries or summaries.
Only derive properties and attributes in advance and store in the data if they are necessary to sustain interactive performance of the program.

Consider deriving attributes and properties at the time of query execution to define subnetworks.

Separating network assembly from property derivation will make the program more modular and flexible.
Separating property derivation into distinct processes will also make the program more modular and flexible.

Derived properties and attributes will only become necessary later on in the development process for advanced queries and summaries.
For now, the fundamental information about the network is the priority.

----------
----------
----------

Data Structure
Represent compartmental metabolites with distinct nodes

"model"

-"sets": The properties that define sets of nodes
--"compartments"
---Model Properties or Attributes
----"id": Identifier for the compartment
----"name": Name of the compartment
---Derived Properties or Attributes
----"count_reactions": Count of reactions in each compartment (c: 3000, m: 1000)
----"count_metabolites": Count of metabolites in each compartment (c: 3000, m: 1000)
----"metabolites": Metabolites that appear in the compartment
----"reactions": Reactions that occur in the compartment
----"share_metabolites": Count of metabolites shared with each other compartment
----"share_transports": Count of transports shared with each other compartment
--"metabolites"
---Model Properties or Attributes
----"charge": Chemical charge of the metabolite
----"formula": Chemical formula of the metabolite
----"id": Identifier for the metabolite (Example: "pyr")
----"name": Name of the metabolite (Example: "pyruvate")
---Derived Properties or Attributes
----"centrality_betweenness": The betweenness centrality of the metabolite without restriction by compartment
----"centrality_betweenness_compartment": The betweenness centrality of the metabolite within each compartment
----"centrality_degree": The degree centrality of the metabolite without restriction by compartment
----"centrality_degree_compartment": The degree centrality of the metabolite within each compartment
----"compartments": Compartments in which the metabolite appears
----"count_reactions_compartment": Count of reactions in which the metabolite participates in each compartment
----"reactions": Reactions in which the metabolite participates in all compartments.
--"processes": The pathways or subsystems of the metabolic network
---Model Properties or Attributes
----"name"
---Derived Properties or Attributes
----"count_reactions": Count of reactions in each process
----"compartments": Compartments in which reactions occur in each process

-"network": The primary graph representation of nodes and links
--"nodes"
---"metabolites"
----Model Properties or Attributes
-----"compartment": Specific compartment of the metabolite node (Example: "c")
-----"id": Identifier for metabolite node ("pyr_c")
-----"metabolite": Identifier for metabolite ("pyr")
----Derived Properties or Attributes
----"centrality_betweenness": The betweenness centrality of the metabolite within its compartment
----"centrality_degree": The degree centrality of the metabolite within its compartment
----"reactions": Reactions in which the metabolite participates within its compartment
---"reactions"
----Model Properties or Attributes
-----"gene_reaction_rule"
-----"id"
-----"lower_bound"
-----"metabolites"
-----"name"
-----"subsystem"
-----"upper_bound"
----Derived Properties or Attributes
-----"chemicals_change": Whether or not the reactants and products differ chemically
-----"compartments": The compartments of metabolites in the reaction
-----"compartments_change": Whether or not the compartments of reactants and products differ
-----"multiple_compartments": Whether or not the reaction involves metabolites in multiple compartments
-----"products": Metabolites that are products in the reaction
-----"reactants": Metabolites that are reactants in the reaction
-----"reversibility": Whether or not the reaction is reversible
--"edges"
---"id": Source identifier underscore target identifier
---"source": Link source is node for reactant metabolite or node for reaction. Reversible reactions also have links in reverse direction.
---"target": Link target is node for reaction or node for product metabolite. Reversible reactions also have links in reverse direction.

----------
----------
----------

Data Structure
Represent metabolites as nodes without compartmental distinction
Omit reactions that represent transport events (reactions with multiple compartments)

"model"

-"sets": The properties that define sets of nodes
--"compartments"
---Model Properties or Attributes
----"id": Identifier for the compartment
----"name": Name of the compartment
---Derived Properties or Attributes
----"count_reactions": Count of reactions in each compartment (c: 3000, m: 1000)
----"count_metabolites": Count of metabolites in each compartment (c: 3000, m: 1000)
----"metabolites": Metabolites that appear in the compartment
----"reactions": Reactions that occur in the compartment
----"share_metabolites": Count of metabolites shared with each other compartment
----"share_transports": Count of transports shared with each other compartment
--"processes": The pathways or subsystems of the metabolic network
---Model Properties or Attributes
----"name"
---Derived Properties or Attributes
----"count_reactions": Count of reactions in each process
----"compartments": Compartments in which reactions occur in each process

-"network": The primary graph representation of nodes and links
--"nodes"
---"metabolites"
----Model Properties or Attributes
----"charge": Chemical charge of the metabolite
----"formula": Chemical formula of the metabolite
----"id": Identifier for the metabolite node (Example: "pyr")
----"name": Name of the metabolite (Example: "pyruvate")
----Derived Properties or Attributes
----"centrality_betweenness": The betweenness centrality of the metabolite without restriction by compartment
----"centrality_betweenness_compartment": The betweenness centrality of the metabolite within each compartment
----"centrality_degree": The degree centrality of the metabolite without restriction by compartment
----"centrality_degree_compartment": The degree centrality of the metabolite within each compartment
----"compartments": Compartments in which the metabolite appears
----"count_reactions_compartment": Count of reactions in which the metabolite participates in each compartment
----"reactions": Reactions in which the metabolite participates in all compartments
---"reactions"
----Model Properties or Attributes
-----"compartment": The compartment of metabolites in the reaction... Due to the restriction of this representation, all reactions will have a single compartment
-----"gene_reaction_rule"
-----"id"
-----"lower_bound"
-----"metabolites"
-----"name"
-----"subsystem"
-----"upper_bound"
----Derived Properties or Attributes
-----"chemicals_change": Whether or not the reactants and products differ chemically
-----"products": Metabolites that are products in the reaction
-----"reactants": Metabolites that are reactants in the reaction
-----"reversibility": Whether or not the reaction is reversible
--"edges"
---"id": Source identifier underscore target identifier
---"source": Link source is node for reactant metabolite or node for reaction. Reversible reactions also have links in reverse direction.
---"target": Link target is node for reaction or node for product metabolite. Reversible reactions also have links in reverse direction.

Note

Betweenness Centrality and shortest paths will be most informative with consideration of directionality in the network.
The CytoScapeJS function "eles.betweennessCentrality()" can either consider directionality or ignore it.

If I use multiple links to represent directionality in reversible reactions, then I might need to account for these multiple edges in calculations of node degree.
The CytoScapeJS function "edges.parallelEdges()" might be useful in this situation.
Actually, I think that if a metabolite participates in a reversible reaction, then its degree centrality should rightfully reflect that.

----------
----------
----------

Data Structure and Organization

Relational Data Model and Graph Data Model

https://neo4j.com/developer/graph-database/
https://neo4j.com/developer/guide-data-modeling/
https://neo4j.com/developer/graph-db-vs-rdbms/

The Relation Data Model normalizes data, avoiding redundancy.
Complex relations require complex joins.
Denormalization is sometimes a solution to simplify joins.
Denormalization introduces redundancy and complicates update and maintenance.

The Graph Data Model emphasizes relations between entities.

It is practical to organize data using a blend of the Relational Data Model and the Graph Data Model.
Avoid redundancy.

I think it will be advantageous to include in the data properties that I derive.

Plan

Use a blend of the Relational Data Model and the Graph Data Model.
Represent both metabolites and reactions as nodes in a graph, since they are both entities with properties and sets.
Store information that is specific to graph nodes as properties of those nodes in the graph.
Include information that I derive.
Store supplemental information in relational tables that accompany the graph.

----------
----------
----------

Degree and betweenness centralities of metabolites might inform the selection of specific metabolites as promising diagnostic markers.
Metabolites with greater betweenness centralities have greater influence on the network.
These metabolites will be especially useful targets for profiling with metabolomics.

----------
----------
----------

--------------------------------------------------
18 January 2017

----------
----------
----------

Work through how to perform all relevant types of queries.

Figure out how to handle a list of discontinuous subnetworks that result from queries.

Selection Functionality
network.getElementById()
network.$(selector)
network.elements(selector)
network.nodes(selector)
network.edges(selector)
network.filter(selector)
network.filter(function(index, element))

network.filter(function (index, element) {
  if (element.isNode() && element.data("weight") > 50 ) {
    return true;
  }
  return false;
});

network.elements.size()
network.elements.eq()

network.elements.clone()
network.elements.data()
network.element.id()




Read on from "Collection"



----------
----------
----------

Data Organization

I think it will be helpful to associate with nodes all the properties (including those I derive) that might be useful in queries.

----------
----------
----------

Design Decision

Compartments separate portions of the metabolic network.
Metabolites participate in the metabolic network within their specific compartment.
Pyruvate in the cytosol participates in different reactions than does pyruvate in the mitochondrion.
Transport events between compartments are real events that matter.

Treating compartmental metabolites as distinct entities in the metabolic network is accurately representative of how these metabolites behave.
Still, pyruvate in the mitochondrion is chemically identical to pyruvate in the cytosol.
It might be useful to represent the metabolic network in such a way as to accurately portray the compartmental and general properties of metabolites.
Keep distinct nodes for compartmental metabolites, but also summarize the behavior of the chemical species as a whole between multiple compartments.

----------
----------
----------

Meeting with Alexander Lex

Goals
1) Organize the network's information concisely and efficiently.
-Avoid replication of information.
-All information that is specific to a node should reside with the node.
--This information includes values that I derive in pre-processing.
-Do not replicate information such as the human-readable descriptions of reactions.
--Store this information in some sort of dictionary reference.
-Develop look-up functions to access the appropriate information for a node.
-Organize the reference information within a separate portion of a master dictionary.
-Structure:
--model
---metabolites
----Information that is general to a metabolite.
---reactions
----Information that is general to a reaction.
---network
----Information that is specific to nodes within the network.
----Information that is necessary for queries against the network.
-How reasonable is it to use look-up functions when querying the network in CytoScapeJS?
2) Learn to query the network in CytoScapeJS.
3) Learn CytoScapeJS options for network visualization.
-Visualize network in CytoScapeJS or in D3 if more favorable.

Current Model
Metabolites are nodes.
Reactions are nodes.
Links are between metabolites and reactions.

Optional Model
Metabolites are nodes.
Reactions are links between two nodes.
Links are between reactant metabolites and reaction in node.
Links are between product metabolites and reaction out node.

Optional model is favorable for visualization (at least with D3) because it orients a reaction's arrow appropriately.

Current model is appropriate for querying and analyzing the network.
Continue to use the current model for querying, analyzing, and visualizing the network for now.

----------
----------
----------

Access files from client's computer.

"Using files from web applications"
https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications


----------
----------
----------

The browser stalls substantially after I print the entire CytoScapeJS network to the console.
Maybe I can improve performance by not printing the network to the console.

It might also be beneficial to save the network information to file so that I can then load it directly from file rather than waiting for assembly after every refresh.
Save network information to file.
JSON.stringify(network.json())

http://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser
http://stackoverflow.com/questions/16329293/save-json-string-to-client-pc-using-html5-api
http://stackoverflow.com/questions/3665115/create-a-file-in-memory-for-user-to-download-not-through-server

Uniform Resource Identifier (URI)

----------
----------
----------

eles.filter()
network.nodes().filter();
network.elements.filterFn(function (element) {
    return element.data.id === "pyr_c"
})

eles.closedNeighborhood()

----------
----------
----------

Collect nodes and links into a network in CytoScapeJS.

----------
----------
----------

I completed the implementation for assembly of nodes for reactions and metabolites and links for reactions.
These three assemblies are currently separate.
These assemblies require about 4.5 minutes with access to the complete resources of my computer (Processor: 2.0 GHz, Memory: 3.8 GB).

----------
----------
----------

--------------------------------------------------
17 January 2017


----------
----------
----------

Create links!


----------
----------
----------

Document the properties for reactions and metabolites.
Include the properties from the model and the properties that I derived.
Describe what the properties are in specific detail.

----------
----------
----------

Additional Properties to Derive from the Metabolic Network

Metabolite
-"centrality_degree": Calculate once the network is in CytoScapeJS.
-"centrality_betweenness": Calculate once the network is in CytoScapeJS.

----------
----------
----------

--------------------------------------------------
16 January 2017

----------
----------
----------

The user needs to distinguish between reactions that involve chemical changes and those that involve transport events.
Reactions with chemical changes have different chemical species in their reactants and products.
Reactions with transport events have reactants and products with different compartments.
I do not know for certain, but some reactions might involve a mixture of chemical changes and transport events.
Maybe an enzyme catalyzes a reaction between metabolites on opposite sides of a membrane.
Maybe some chemical change accompanies a transport event.

I decided to determine several indicators that relate to this distinction between chemical changes and transport events.
Rather than relying on a single definition, the user can choose very specifically.
As I study the model more, I will realize what the possibilities are in mixtures of chemical changes accompanying transport events.

----------
----------
----------

I wondered if a tool was already available to convert information from metabolic models in SBML format to a format compatible with CytoScape.

CySBML (http://apps.cytoscape.org/apps/cysbml) is a plugin for CytoScape for the importation of information from metabolic models in SBML format.
CySBML runs in Java.
It makes information from metabolic models available as networks to the CytoScape application in Java.

I think that CySBML is not appropriate for making information from metabolic models in SBML format available to CytoScapeJS in JSON format.

I think that there is not a tool available to convert information from SBML format to a format compatible for CytoScapeJS.

----------
----------
----------


--------------------------------------------------
13 January 2017

----------
----------
----------

----------
----------
----------

Design Decision

The current representation of the metabolic network in models includes distinct entities for a single metabolite in separate compartments.
Cytosolic pyruvate is a separate entity from mitochondrial pyruvate.
While the metabolite (pyruvate) is chemically identical in both compartments, its behavior in metabolism depends on its compartment.
Compartmentalization influences metabolism in such a way that it is most accurate to treat metabolites in separate compartments as separate entities.

It would be possible to represent the metabolic network without treating metabolites separately for separate compartments.
This representation would match metabolomics data, since metabolomics does not distinguish between compartments.
This representation could still include information on the compartments or sets to which the metabolite belongs.
As reactions and transports are specific to compartments, I do not think that this representation of the metabolic network would be accurate.
At best, a representation without compartment-specific metabolites would be a simplification.

Perhaps the user can decide whether or not to treat metabolites in separate compartments as distinct entities.
The information for the metabolic network should include compartment information and should include separate entities for separate compartments (as current metabolic models do already).
The simplification ignoring compartments could modify the metabolic network, effectively collapsing it.

----------
----------
----------

Organize or structure data to be compatible with CytoScapeJS.
Preserve many aspects of the information for metabolites and reactions from the model.
Derive additional properties from the information in the model.
Omit information that is redundant or irrelevant.

Preserve

Derive
-reaction
--compartments
--products
--reactants
--reversibility
--type_reaction
--type_transport
-metabolite
--
-links
--

Omit
-"genes" array
--This array contains objects for individual genes.
--The only information is the gene's identifier from the HUGO Gene Nomenclature Committee.
--This information is already available from gene reaction rules for reactions.
-"notes" object for each reaction
--This object stores notes that seem irrelevant other than for model construction.

Information within the object for genes is redundant and useless.
The notes for reactions are useless and irrelevant.

For reactions, keep reactants and products within the same "metabolites" object for simple iteration.
Also separate reactans and metabolites into separate arrays.

The model defines compartment most definitively for metabolites.
Reactions do not have a definitive compartment.
Reactions use compartmental metabolites.
I will derive compartments of reactions according to the compartments of their metabolites.
Transport reactions will have 2 compartments, so I will store compartments in an array.

I will derive whether or not a reaction is a transport event or a chemical reaction.
I will need to consider whether or not compartments of reactants and products are different.
Chemical species of reactants and products might be different in some transport reactions.
For example, the malate/aspartate shuttle might carry out a chemical reaction during transport.
I do not know for sure.
A reaction might be able to be both a chemical reaction and a transport event.

Summary

var core = cytoscape({
    elements: [
        
        {
            group: "nodes",
            class: "reaction",
            data: {
                compartments: {
                    c: "cytoplasm",
                    m: "mitochondrion"
                },
                gene_reaction_rule: "gene_1 or gene_2 or gene_3",
                id: "reaction_identifier",
                lower_bound: 0,
                metabolites: {
                    reactant: -1,
                    product: 1
                },
                name: "reaction_name",
                products: ["product_1", "product_2"],
                reactants: ["reactant_1", "reactant_2"],
                reversibility: true,
                subsystem: "pathway_or_process",
                //type: "reaction" or "transport",
                type_reaction: true,
                type_transport: false,
                upper_bound: 1000
            }
        },

        {
            group: "nodes",
            class: "metabolite",
            data: {
                abbreviation: "cit",
                charge: -3,
                compartment: {
                    c: "cytoplasm"
                },
                compartments: {
                    c: "cytoplasm",
                    m: "mitochondrion"
                },
                formula: "C6H5O7",
                id: "cit_c",
                name: "Citrate",
                reactions: {
                    rxn1: "reaction 1",
                    rxn2: "reaction 2",
                    rxn3: "reaction 3"
                }
            }
        },

        
        {group: "edges", data: {id: "ab", source: "a", target: "b", weight: 10}},
        {group: "edges", data: {id: "bc", source: "b", target: "c", weight: 15}},
        {group: "edges", data: {id: "ac", source: "a", target: "c", weight: 20}}
        
    ]

});

----------
----------
----------

Immutability is an important principle in functional programming.
It is also important to preserve the integrity of data.
It is important to consider when JavaScript copies or clones by reference or by value.

http://stackoverflow.com/questions/6605640/javascript-by-reference-vs-by-value
nrabinowitz
7 July 2011
"
Javascript is always pass by value, but when a variable refers to an object (including arrays), the "value" is a reference to the object.
Changing the value of a variable never changes the underlying primitive or object, it just points the variable to a new primitive or object.
However, changing a property of an object referenced by a variable does change the underlying object.
"

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
Object.assign()
This method does not handle deep cloning by itself.

JSON.parse(JSON.stringify())
This method eliminates reference problems and can handle deep cloning.


----------
----------
----------

map
filter
reduce
concat
apply

----------
----------
----------

http://reactivex.io/learnrx/

Essential functions for collections
map (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
filter (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
reduce
concatAll
zip

----------
----------
----------

Functional Programming for User Interfaces
Conversation with Annie Cherkaev

https://stackoverflow.com/questions/2672791/is-functional-gui-programming-possible
"current GUI programming is all about IO and side effects, so purely functional programming isn't possible with most current frameworks."
"is it possible to have a functional approach to GUI programming? ... Or is the solution to just use a hybrid approach, with OOP for the GUI parts and FP for the lobic?"

Functional Reactive Programming

--------------------------------------------------
12 January 2017


https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0#.x1mknemzm

http://reactivex.io/learnrx/

Essential functions
map (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
filter (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
reduce
concatAll
zip

http://eloquentjavascript.net/1st_edition/chapter6.html



----------
----------
----------

Design Decision

Data

A Functional Programming paradigm keeps data separate from functionality in the program.
The data is also immutable, favoring preservation of the data.
Rather than having mutable class attributes, the program will use immutable variables.
It will be necessary to avoid copying objects by reference instead of copying their values.
I will organize functions in modules.
Each module will have definitions of concise functions.
There will be function composition and recursion.
Maybe each module can also have a "main" function that serves as a master script for the functionality of that module.
These functions will try to follow a more declarative, rather than imperative, style.

Interface

To support events in dynamic interaction, the elements of the Document Object Model (DOM) are mutable objects.
The same check box alternatively switches between "true" and "false" states.
A drop-down menu element has a different state depending on which value the user selects.
For animation with D3, the same rows of a table change positions in a sort.
The elements of the DOM themselves are mutable objects.
Even so, it is possible and practical to control these objects functionally.
The D3 and React libraries for JavaScript facilitate interaction between JavaScript and elements of the DOM.
HTML event listeners also facilitate this interaction.

Preferentially, JavaScript control of the DOM interface will be as functional as is practical, following a Functional Programming Paradigm.
If necessary or convenient, only the aspects of the program that interact most directly with elements of the DOM will be object instances of classes according to an Object-Oriented Programming paradigm.
These object instances might possess attributes that support state mutation.

Try to keep non-pure functions with side effects separate from the rest of the program.
For example, keep all functions that control the DOM separate.


----------
----------
----------

Future Directions

1) The metabolic model does not include sufficient information to match with data from proteomics data and transcriptomics data.
It will be necessary to supplement the model with appropriate identifiers for transcripts and proteins.

2) It will be interesting to supplement the metabolic model with additional information about proteins (cofactors, protein-protein interactions).

----------
----------
----------

I need to convert information from the metabolic model in JSON format to a format that is compatible with CytoScapeJS.

Reactions
Iterate over reactions.
Create a new object for each reaction that matches CytoScapeJS format.
Create "group" key with value "nodes".
Create "class" key with value "reaction".
Create "data" object with most of the same keys and values as the original reaction object.
Within this "data" object create "compartment" and "compartment_brief" keys with appropriate values.
It will be necessary to reference the "compartments" object in order to determine full names for compartments.
Within the "data" object create "reactant" and "product" keys with appropriate values from the original "metabolites" object.
Omit the "notes" object from the new "data" object.

Set group to "nodes".
Set class to "reaction".
Set data object to the reaction object.

Links
Iterate over reactions.
Set group to "edges".
Set data object...
-custom identifier (reaction-identifier_metabolite-identifier).
-source... I think the source should always be the reaction (both for reactant and product metabolites)
-target... the metabolite (reactant or product)
-weight... no need for weight unless I want to visualize the network with CytoScape

Metabolites
Iterate over metabolites.
Create a new object for each metabolite that matches CytoScapeJS format.
Create "group" key with value "nodes".
Create "class" key with value "metabolite".
Create "data" object with most of the same keys and values as the original metabolite object.
Within this "data" object create "compartment" and "compartment_brief" keys with appropriate values.
It will be necessary to reference the "compartments" object in order to determine full names for compartments.

The information from the genes object is unnecessary.
This information only has identifiers anyway (HGNC).
http://www.genenames.org/

----------
----------
----------

Data Structure in CytoScapeJS
Consult the Cola Demo to learn how to structure the network information in the CytoscapeJS model.

Summary

var core = cytoscape({
    elements: [
        
        {group: "nodes", class: "metabolite", data: {id: "a", property: "value1"}},
        {group: "nodes", class: "metabolite", data: {id: "b", property: "value2"}},
        {group: "nodes", class: "reaction", data: {id: "c", property: "value3"}},
        
        {group: "edges", data: {id: "ab", source: "a", target: "b", weight: 10}},
        {group: "edges", data: {id: "bc", source: "b", target: "c", weight: 15}},
        {group: "edges", data: {id: "ac", source: "a", target: "c", weight: 20}}
        
    ]

});

----------
----------
----------

Demonstration Cola.js Gene-Gene Graph

cy = cytoscape({
  container: document.getElementById('cy'),
  
  style: [{"selector":"core","style":{"selection-box-color":"#AAD8FF","selection-box-border-color":"#8BB0D0","selection-box-opacity":"0.5"}},{"selector":"node","style":{"width":"mapData(score, 0, 0.006769776522008331, 20, 60)","height":"mapData(score, 0, 0.006769776522008331, 20, 60)","content":"data(name)","font-size":"12px","text-valign":"center","text-halign":"center","background-color":"#555","text-outline-color":"#555","text-outline-width":"2px","color":"#fff","overlay-padding":"6px","z-index":"10"}},{"selector":"node[?attr]","style":{"shape":"rectangle","background-color":"#aaa","text-outline-color":"#aaa","width":"16px","height":"16px","font-size":"6px","z-index":"1"}},{"selector":"node[?query]","style":{"background-clip":"none","background-fit":"contain"}},{"selector":"node:selected","style":{"border-width":"6px","border-color":"#AAD8FF","border-opacity":"0.5","background-color":"#77828C","text-outline-color":"#77828C"}},{"selector":"edge","style":{"curve-style":"haystack","haystack-radius":"0.5","opacity":"0.4","line-color":"#bbb","width":"mapData(weight, 0, 1, 1, 8)","overlay-padding":"3px"}},{"selector":"node.unhighlighted","style":{"opacity":"0.2"}},{"selector":"edge.unhighlighted","style":{"opacity":"0.05"}},{"selector":".highlighted","style":{"z-index":"999999"}},{"selector":"node.highlighted","style":{"border-width":"6px","border-color":"#AAD8FF","border-opacity":"0.5","background-color":"#394855","text-outline-color":"#394855","shadow-blur":"12px","shadow-color":"#000","shadow-opacity":"0.8","shadow-offset-x":"0px","shadow-offset-y":"4px"}},{"selector":"edge.filtered","style":{"opacity":"0"}},{"selector":"edge[group=\"coexp\"]","style":{"line-color":"#d0b7d5"}},{"selector":"edge[group=\"coloc\"]","style":{"line-color":"#a0b3dc"}},{"selector":"edge[group=\"gi\"]","style":{"line-color":"#90e190"}},{"selector":"edge[group=\"path\"]","style":{"line-color":"#9bd8de"}},{"selector":"edge[group=\"pi\"]","style":{"line-color":"#eaa2a2"}},{"selector":"edge[group=\"predict\"]","style":{"line-color":"#f6c384"}},{"selector":"edge[group=\"spd\"]","style":{"line-color":"#dad4a2"}},{"selector":"edge[group=\"spd_attr\"]","style":{"line-color":"#D0D0D0"}},{"selector":"edge[group=\"reg\"]","style":{"line-color":"#D0D0D0"}},{"selector":"edge[group=\"reg_attr\"]","style":{"line-color":"#D0D0D0"}},{"selector":"edge[group=\"user\"]","style":{"line-color":"#f0ec86"}}],
  
  elements: [
    {"data":{"id":"605755","idInt":605755,"name":"PCNA","score":0.006769776522008331,"query":true,"gene":true},"position":{"x":481.0169597039117,"y":384.8210888234145},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":"fn10273 fn6944 fn9471 fn10569 fn8023 fn6956 fn6935 fn8147 fn6939 fn6936 fn6629 fn7928 fn6947 fn8612 fn6957 fn8786 fn6246 fn9367 fn6945 fn6946 fn10024 fn10022 fn6811 fn9361 fn6279 fn6278 fn8569 fn7641 fn8568 fn6943"},
    {"data":{"id":"611408","idInt":611408,"name":"FEN1","score":0.006769776522008331,"query":false,"gene":true},"position":{"x":531.9740635094307,"y":464.8210898234145},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":"fn10273 fn6944 fn9471 fn6284 fn6956 fn6935 fn8147 fn6939 fn6936 fn6949 fn6629 fn7952 fn6680 fn6957 fn8786 fn6676 fn10713 fn7495 fn7500 fn9361 fn6279 fn6278 fn8569 fn7641 fn8568"},
    {"data":{"id":"612341","idInt":612341,"name":"RAD9A","score":0.0028974131563619387,"query":false,"gene":true},"position":{"x":455.8128125018193,"y":555.4591537139819},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":"fn6935 fn6219 fn6680 fn6676 fn10713 fn7552 fn7495"},
    {"data":{"id":"608473","idInt":608473,"name":"RAD9B","score":0.0026928704785200708,"query":false,"gene":true},"position":{"x":363.1144068403203,"y":515.7352912086707},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":"fn6935"},
    {"data":{"id":"611560","idInt":611560,"name":"APEX2","score":0.0026215687185565106,"query":false,"gene":true},"position":{"x":689.1927803956215,"y":634.0100611862405},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    
    {"data":{"source":"605846","target":"599863","weight":0.019407582,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":590,"id":"e588"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    {"data":{"source":"599724","target":"603070","weight":0.012506178,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":591,"id":"e589"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    {"data":{"source":"599724","target":"610236","weight":0.016794344,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":592,"id":"e590"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    {"data":{"source":"599724","target":"599863","weight":0.015911028,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":593,"id":"e591"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    {"data":{"source":"599724","target":"605846","weight":0.019493334,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":594,"id":"e592"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""}]
  });

----------
----------
----------

----------
----------
----------

Functional Programming and Object-Oriented Programming

Elements within the Document Object Model (DOM) of a Web Application are innately object-oriented.
These elements are instances that change with user interaction.
User interaction changes existing elements rather than creating new instances.
This object permanence is necessary for animations.

Functions in the back-end of the program can follow a functional programming paradigm.
There still needs to be some aspect of object permanence for the interface.

I sent the following message to Annie Cherkaev.
"
I realized something. Elements within the Document Object Model (DOM) of a Web Application innately or at least intuitively follow the object-oriented paradigm. These elements (such as a check box) are instances that change with user interaction. It is not intuitive (to me) to create a new instance of these elements for every state change from user interaction. This object permanence is also necessary for animations in D3, I think.
I think that a functional paradigm is most appropriate for back-end, core functionality like data-handling.
"

Design Decision
Aspects of the user interface that are elements of the Document Object Model (DOM) will be permanent instances of objects that mutate state according to an Object-Oriented paradigm.
Aspects of the relevant data and operations thereon will follow a Functional Paradigm.

I subsequently found this informative post on Stack Overflow from Matt Fenwick on 2 April 2014.
Notice that Matt states that the Document Object Model (DOM) is not functional by design.
http://stackoverflow.com/questions/22733712/is-applying-functional-programming-principles-to-javascript-a-seriously-viable-o
"
In my opinion, the short answer to your question is yes -- applying functional programming principles is viable in Javascript! (I believe that this is also true for most other languages -- there's usually something to be gained from applying FP principles).

Here's an example of a functional parser combinator library I built in Javascript. (And here it is in action). It was important to be functional because: 1) it allows me to build parsers by composition, which means I can build and test small parsers independently, then put them together and have confidence that the behavior will be the same, and 2) it makes backtracking super easy to get right (which is important because the choice operator backtracks when an alternative fails).

So these are FP principles (note the absence of recursion, folds, maps, and filters from this list) that I found extremely useful in building my library:

avoiding mutable state
pure functions (i.e. output depends only on input)
composition: building complex apps by gluing together simple pieces
It's usually quite easy and pleasant to apply these in Javascript because of Javascript's support for:

first-class functions
anonymous functions
lexical closures
but here are some things to watch out for:

lack of popular library of efficient functional data structures
lack of tail-call optimization (at least at the moment)
partial application is more syntax-heavy than in Haskell
lots of popular libraries are not especially functional
the DOM is not functional (by design)
However, your last comment -- "I don't want to start putting together my own tool set if it's just going to break everything once it gets too large" -- is a good one. This is basically a problem for every approach, and I can't tell you whether FP in Javascript will be more problematic than "mainstream" techniques when things get too large. But I can tell you that in my experience, FP in Javascript helps me to prevent things from getting too large.
"

http://www.codenewbie.org/blogs/object-oriented-programming-vs-functional-programming

The library React aims to support functional programming to create DOM interfaces.
React
https://medium.com/@floydophone/functional-dom-programming-67d81637d43#.at9jkki3w

https://www.sitepoint.com/introduction-functional-javascript/

I sent this message to Annie Cherkaev.
"
With interactive events, DOM elements themselves are objects with mutable state. Even so, it is possible for the JavaScript program to interact with these elements in a functional way. HTML event listeners and tools from D3 and React libraries are potentially useful.
"


----------
----------
----------

Modules

http://exploringjs.com/es6/ch_modules.html

I think Modules are the best way to organize functions without classes.
Import
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import
Export
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export

--------------------------------------------------
11 January 2017

----------
----------
----------

Functional Programming in JavaScript

With Object-Oriented Programming in JavaScript, classes organize groups of functions with similar purposes.
Separate classes are generally in separate files.
Classes organize the program.

How does one organize a program with Functional Programming in JavaScript?

http://softwareengineering.stackexchange.com/questions/122437/how-to-organize-functional-programs
According to a reply to this question, the developer organizes functional programs into modules or files.
There is a main module that controls all of the functionality to bring the entire program together.
"So, in summary: functions are contained in modules, each of which is made up of a single file. Several modules can make up a program or library; the former generally includes a Main module that is its entry point. Within a file, there are different options for organization, but I prefer to group data types near the top, IO near the bottom and logic in the middle." (Tikhon Jelvis)

Organize functions with similar purpose in modules as separate ".js" files. Use a "main" module as a script to bring all the functionality together into a full program.

I also shared a conversation with Annie Cherkaev about organization of programs in functional programming.
Annie recommends writing functions according to a functional programming paradigm.
She recommends organizing those functions with similar or related functions together in groups within classes.
Specifically, Annie recommends organizing functions into classes according to the type of data that they concern.
Annie recommends not using "member functions" within these classes.
I think that member functions mutate state rather than creating a new instance.
Annie also acknowledges that functional programming might not always be practical in JavaScript.

I shared a brief conversation with Ethan Kerzner on 3 January 2017 about functional programming.
Ethan argued that neither Functional Programming nor Object-Oriented Programming were superior generally.
Each paradigm might be more appropriate for different applications or uses.
Ethan uses both.
"Saying 'FP is better' is like saying a screw driver is better than a hammer. It totally depends on what you're trying to do.  

JS is a cross paradigm language---both objects and functions are first class entities. I use aspects of both OO and FP in my JS apps. But my goal is to emphasize code readability, maintainability, and extendability over mathematical elegance and computational efficiency.  I'd say use what you're most comfortable with---and whatever plays nicely with the frameworks that you're using." (Ethan Kerzner)

UnderScore.JS
http://underscorejs.org/

----------
----------
----------

Meeting with Alexander Lex

Metabolic Model in SBML ---[libSBML, COBRApy]---> Metabolic Model in JSON ---[Custom]---> Metabolic Model in CytoScapeJS ---[Custom]---> Metabolic Model suitable for Network Visualization in D3

We may not even need or want to visualize the network using D3.
It might be practical to visualize the network using CytoScapeJS.

Client-Side Application without a Server
For now, it is reasonable to try implementing the tool as an entirely client-side application without a server.
Keep the Query functionality entirely independent of the Visualization Rendering and User Interface.
If we need to use a server in the future, it will help to have these aspects distinct.

Priority Order
1) Develop the core functionality.
-Organize the network.
-Functionality to query the network for specific subnetworks.
2) Network Visualization
-Represent properties and sets such as compartment in multiple ways, such as by spatial layout and by color or glyph.
3) User Interface
-Also support the supplementary data visualizations, such as distribution of degrees.

Network Layouts and Representation of Properties and Sets
On 11 November 2016, Sean P McKenna recommended consideration of Bubble Sets, Kelp Diagrams, Kelp Fusion, or Line Sets to visualize sets on the network.
Also, the metabolic network model treats metabolites in separate compartments as distinct metabolites.
It might be possible to represent these metabolites as single metabolites belonging to multiple sets.

Goals for 18 January 2017
Convert information for metabolic model from JSON format to format suitable for CytoScapeJS.
Import this information to CytoScapeJS to organize a network model.
Develop methods to query against this network to select specific collections or subnetworks.
Visualize these collections in some rudimentary way.

----------
----------
----------


--------------------------------------------------
10 January 2017

----------
----------
----------

Functional Programming in JavaScript

https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0#.aq905i7cq

http://reactivex.io/learnrx/

Essential functions
map (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
filter (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
reduce
concatAll
zip

http://eloquentjavascript.net/1st_edition/chapter6.html


----------
----------
----------

I will need to convert the network information from CytoScapeJS format to D3 format for visualization with D3.
I assume that we want to visualize the network using D3.
Maybe D3 gives better flexibility than CytoScape.
I do not know for sure which will be the better option.

----------
----------
----------

I need to convert information from the metabolic model in JSON format to a format that is compatible with CytoScapeJS.

Reactions
Iterate over reactions.
Set group to "nodes".
Set class to "reaction".
Set data object to the reaction object.

Links
Iterate over reactions.
Set group to "edges".
Set data object...
-custom identifier (reaction-identifier_metabolite-identifier).
-source... I think the source should always be the reaction (both for reactant and product metabolites)
-target... the metabolite (reactant or product)
-weight... no need for weight unless I want to visualize the network with CytoScape

Metabolites
Iterate over metabolites.
Set group to "nodes".
Set class to "metabolite".
Set data object to the metabolite object.

The information from the genes object is unnecessary.
This information only has identifiers anyway (HGNC).
http://www.genenames.org/



----------
----------
----------

Data Structure in CytoScapeJS
Consult the Cola Demo to learn how to structure the network information in the CytoscapeJS model.

Summary

var core = cytoscape({
    elements: [
        
        {group: "nodes", class: "metabolite", data: {id: "a", property: "value1"}},
        {group: "nodes", class: "metabolite", data: {id: "b", property: "value2"}},
        {group: "nodes", class: "reaction", data: {id: "c", property: "value3"}},
        
        {group: "edges", data: {id: "ab", source: "a", target: "b", weight: 10}},
        {group: "edges", data: {id: "bc", source: "b", target: "c", weight: 15}},
        {group: "edges", data: {id: "ac", source: "a", target: "c", weight: 20}}
        
    ]

});

----------
----------
----------

Demonstration Cola.js Gene-Gene Graph

cy = cytoscape({
  container: document.getElementById('cy'),
  
  style: [{"selector":"core","style":{"selection-box-color":"#AAD8FF","selection-box-border-color":"#8BB0D0","selection-box-opacity":"0.5"}},{"selector":"node","style":{"width":"mapData(score, 0, 0.006769776522008331, 20, 60)","height":"mapData(score, 0, 0.006769776522008331, 20, 60)","content":"data(name)","font-size":"12px","text-valign":"center","text-halign":"center","background-color":"#555","text-outline-color":"#555","text-outline-width":"2px","color":"#fff","overlay-padding":"6px","z-index":"10"}},{"selector":"node[?attr]","style":{"shape":"rectangle","background-color":"#aaa","text-outline-color":"#aaa","width":"16px","height":"16px","font-size":"6px","z-index":"1"}},{"selector":"node[?query]","style":{"background-clip":"none","background-fit":"contain"}},{"selector":"node:selected","style":{"border-width":"6px","border-color":"#AAD8FF","border-opacity":"0.5","background-color":"#77828C","text-outline-color":"#77828C"}},{"selector":"edge","style":{"curve-style":"haystack","haystack-radius":"0.5","opacity":"0.4","line-color":"#bbb","width":"mapData(weight, 0, 1, 1, 8)","overlay-padding":"3px"}},{"selector":"node.unhighlighted","style":{"opacity":"0.2"}},{"selector":"edge.unhighlighted","style":{"opacity":"0.05"}},{"selector":".highlighted","style":{"z-index":"999999"}},{"selector":"node.highlighted","style":{"border-width":"6px","border-color":"#AAD8FF","border-opacity":"0.5","background-color":"#394855","text-outline-color":"#394855","shadow-blur":"12px","shadow-color":"#000","shadow-opacity":"0.8","shadow-offset-x":"0px","shadow-offset-y":"4px"}},{"selector":"edge.filtered","style":{"opacity":"0"}},{"selector":"edge[group=\"coexp\"]","style":{"line-color":"#d0b7d5"}},{"selector":"edge[group=\"coloc\"]","style":{"line-color":"#a0b3dc"}},{"selector":"edge[group=\"gi\"]","style":{"line-color":"#90e190"}},{"selector":"edge[group=\"path\"]","style":{"line-color":"#9bd8de"}},{"selector":"edge[group=\"pi\"]","style":{"line-color":"#eaa2a2"}},{"selector":"edge[group=\"predict\"]","style":{"line-color":"#f6c384"}},{"selector":"edge[group=\"spd\"]","style":{"line-color":"#dad4a2"}},{"selector":"edge[group=\"spd_attr\"]","style":{"line-color":"#D0D0D0"}},{"selector":"edge[group=\"reg\"]","style":{"line-color":"#D0D0D0"}},{"selector":"edge[group=\"reg_attr\"]","style":{"line-color":"#D0D0D0"}},{"selector":"edge[group=\"user\"]","style":{"line-color":"#f0ec86"}}],
  
  elements: [
    {"data":{"id":"605755","idInt":605755,"name":"PCNA","score":0.006769776522008331,"query":true,"gene":true},"position":{"x":481.0169597039117,"y":384.8210888234145},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":"fn10273 fn6944 fn9471 fn10569 fn8023 fn6956 fn6935 fn8147 fn6939 fn6936 fn6629 fn7928 fn6947 fn8612 fn6957 fn8786 fn6246 fn9367 fn6945 fn6946 fn10024 fn10022 fn6811 fn9361 fn6279 fn6278 fn8569 fn7641 fn8568 fn6943"},
    {"data":{"id":"611408","idInt":611408,"name":"FEN1","score":0.006769776522008331,"query":false,"gene":true},"position":{"x":531.9740635094307,"y":464.8210898234145},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":"fn10273 fn6944 fn9471 fn6284 fn6956 fn6935 fn8147 fn6939 fn6936 fn6949 fn6629 fn7952 fn6680 fn6957 fn8786 fn6676 fn10713 fn7495 fn7500 fn9361 fn6279 fn6278 fn8569 fn7641 fn8568"},
    {"data":{"id":"612341","idInt":612341,"name":"RAD9A","score":0.0028974131563619387,"query":false,"gene":true},"position":{"x":455.8128125018193,"y":555.4591537139819},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":"fn6935 fn6219 fn6680 fn6676 fn10713 fn7552 fn7495"},
    {"data":{"id":"608473","idInt":608473,"name":"RAD9B","score":0.0026928704785200708,"query":false,"gene":true},"position":{"x":363.1144068403203,"y":515.7352912086707},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":"fn6935"},
    {"data":{"id":"611560","idInt":611560,"name":"APEX2","score":0.0026215687185565106,"query":false,"gene":true},"position":{"x":689.1927803956215,"y":634.0100611862405},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    
    {"data":{"source":"605846","target":"599863","weight":0.019407582,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":590,"id":"e588"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    {"data":{"source":"599724","target":"603070","weight":0.012506178,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":591,"id":"e589"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    {"data":{"source":"599724","target":"610236","weight":0.016794344,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":592,"id":"e590"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    {"data":{"source":"599724","target":"599863","weight":0.015911028,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":593,"id":"e591"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    {"data":{"source":"599724","target":"605846","weight":0.019493334,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":594,"id":"e592"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""}]
  });

----------
----------
----------



--------------------------------------------------
9 January 2017

CytoscapeJS

CytoScapeJS offers extensive functionality for organizing and analyzing networks.
This project is available under the permissive and open-source MIT license.
It has an active community of developers.
This JavaScript library runs entirely on the user or client's browser and does not require a server.
In this way, it offers a favorable alternative to graph databases.
CytoScapeJS provides structure to organize network information, including topology of nodes and links and attributes of these nodes and links.
It supports parent-child relationships for compound nodes.
It provides functionality to select collections from the core network by topological traversal and by consideration of attributes.
It is possible to identify nodes and edges in the neighborhood by proximity and to identify shortest paths.
It also provides functionality for network analysis, including node degree centrality, closeness centrality, and betweenness centrality.

Table describing CytoScapeJS Functionality...

Network Organization
cy.add()
cy.remove()
eles.remove()
ele.id()
eles.clone()
eles.data()
ele.json()
ele.jsons()
ele.isEdge()
ele.isNode()
ele.group()

Collection Selection
eles.select()
eles.unselect()
cy.collection()
cy.getElementById()
eles.intersection()
eles.diff()
eles.filter()
eles.sort()
eles.min()
eles.max()
eles.neighborhood()
eles.components()
eles.breadthFirstSearch()
eles.depthFirstSearch()
eles.dijkstra()
eles.aStar()
eles.floydWarshall()
eles.bellmanFord()
eles.kruskal()
eles.kargerStein()
eles.pageRank()

Network Analysis
node.degree()
eles.degreeCentrality()
eles.closenessCentrality()
eles.betweennessCentrality()

----------
----------
----------

Meet with Alexander Lex and Jared P Rutter

----------
----------
----------

1) Individual Development Plan (IDP)
-Short-term and long-term goals.
-Projects, publications, conferences.
-Post-doctorate.
--How to set up opportunity?
--Interest in epidemiology.
-Novel Analytical Approaches for Metabolomics Data R03
--Try for it or not?

----------
----------
----------

2) Research Conferences
-Specific preferences.
-Financial support.

-Organizations

--International Society for Computational Biology (ISCB)
---Intelligent Systems for Molecular Biology (ISMB) and European Conference on Computational Biology (ECCB)
----Due abstract: 13 April 2017
---Great Lakes Bioinformatics Conference
----Due abstract: 13 Marcy 2017

--American Medical Informatics Association (AMIA)
--American Society for Biochemistry and Molecular Biology (ASBMB)
--Federation of American Societies For Experimental Biology (FASEB)

----------
----------
----------

3) Publication
-Journals
--PLOS Computational Biology
---Official journal of the International Society For Computational Biology (ISCB)
---Software articles are a specific category
---Software must already have wide adoption amongst users or promise wide adoption
---Presubmission inquiry necessary

----------
----------
----------

4) Project
-Client-side without a server.
-JavaScript library for networks, CytoScapeJS.



--------------------------------------------------
8 January 2017

It is necessary to include the cytoscape.js file within the actual project in order for the browser to read it in.
I do not think that it is possible to reference cytoscape.js from a web server, as it is for d3.

--------------------------------------------------
6 January 2017

I need to figure out how to install CytoScapeJS and use it in my JavaScript program.

Maybe I need to use "npm install"?

https://docs.npmjs.com/getting-started/installing-npm-packages-locally


----------
----------
----------

CellMaps
-http://bioinformatics.oxfordjournals.org/content/early/2016/06/15/bioinformatics.btw332.full
-Server in Java and C for processing network analysis.
-"Network Enrichment: finds all the existing connections between pairs of proteins in a list and then, it applies a test to check if the level of connectivity of the network inferred is significantly higher than it can be expected by chance (Minguez et al., 2009), a testing strategy also adopted by other resources, such as STRING (Franceschini et al., 2013)."

STRING Database
-http://string-db.org/
-https://www.ncbi.nlm.nih.gov/pubmed/25352553
-STRING Database is an excellent resource for exploring networks of protein interactions.
-STRING Database uses an algorithm for Network Enrichment analysis that recognizes enrichment beyond random probability on the basis of topology.

Sigma JS
-http://sigmajs.org/
-Sigma JS is primarily for visualization of networks.
-Sigma does not have much (if any) functionality for network traversal or queries, I think.

--------------------------------------------------
5 January 2017

I installed libSBML and COBRApy and used them successfully to convert Recon 2.2 from SBML format to JSON format.
I explored the properties of metabolites, reactions, and genes in the model.

The information of the model is in a relational data structure.
I need to organize the information from the model.
I need algorithms that can traverse, query, and analyze the network that the model implies.
I would prefer to use an existing and robust tool to manage the network.
I need to import information from the model into a structure that the tool recognizes and can interpret appropriately.


----------
----------
----------

Revisit the information from conversation with the member of the libSBML team.
Figure out how to get libSBML working with COBRApy and import Recon 2.2.

----------
----------
----------

Information in Metabolic Models in SBML or JSON format follow a structure comparable to a relational database. Relations between entities are implicit. These relations are not priority, explicit, elements of the data structure. I think that a graph database model will handle the network data more efficiently.

----------
----------
----------

Message to Visual Design Lab Team.

Hi Team, I'm evaluating libraries in JavaScript for managing graphs/networks. I need graph traversal functionality for 1) queries by topology and attributes and 2) network analysis (articulation, centrality, clique, etc). I intend to run everything client-side without a server, so no graph database. Is anyone familiar with Cytoscape.js, JSNetworkX, TinkerPop, or other comparable tools? Thanks.

My network has about 5000 nodes of Type A and about 7000 nodes of Type B, each of which has many properties, some defining sets. There are tens of thousands of directional, many-to-many links between nodes of Type A and Type B.

----------
----------
----------


Cytoscape.js
-Website: http://js.cytoscape.org/
-Nice layout option: Cose-Bilkent Layout
-Maybe it would be beneficial to use Cytoscape.js at least for network queries.
-Consider using either Cytoscape or D3 for visualization.

JSNetworkX
-JSNetworkX is an adaptation of NetworkX from Python to JavaScript.
-Website: http://jsnetworkx.org/
-GitHub Repository: https://github.com/fkling/JSNetworkX
--The last commit was on 18 July 2015.
--This project is not current, I think.

TinkerPop
-Open source support for Gremlin queries against a client-side, in-memory graph database.
-Website: https://tinkerpop.apache.org/

--------------------------------------------------
22 December 2016

Maybe allow the user to determine the degree and betweenness centrality of a specific metabolite within specific compartments.
It could be interesting to compare the centrality of a metabolite in different compartments.
Where is the metabolite most influential?

Do not require the user to select continuous portions of the network.
Do not make it a necessity to select shortest paths between entities that satisfy some property criterion.

Maybe the user wants to select all reversible reactions in the network.
Maybe the user wants to select all transport events accross the mitochondrial membrane (metabolite[c] --> metabolite[m] or metabolite[m] --> metabolite[c]).
Keep these queries simpler by keeping them discontinuous.
Do not try to fill in with all of the shortest paths.

Maybe for this sort of discontinuous query result provide the user with a list of all of the portions that satisfy the query (like Pathfinder).
Allow the user to select a single result or multiple results to display simultaneously.

--------------------------------------------------
20 December 2016

Software Design Document
http://blog.slickedit.com/2007/05/how-to-write-an-effective-design-document/

Communicate appropriately to specific audience.
My audience includes basic, biological scientists.

Justify every design decision.
Document design decisions.
Document benefits of design.
Document limitations and risks of design.

Describe the users and intended use context.
Describe the problem that the design intends to solve.
Describe the scope of the project.
Describe the requirements of the project.



--------------------------------------------------
19 December 2016

http://vmh.uni.lu/#home
Include ReconMap in survey of current technology, related work.



--------------------------------------------------
15 December 2016

BioGrid
https://thebiogrid.org/

http://www.yeastgenome.org/

--------------------------------------------------
8 December 2016

Current Technology for Comparison

NetworkAnalyst
https://www.ncbi.nlm.nih.gov/pubmed/25950236
http://www.networkanalyst.ca/faces/home.xhtml
NetworkAnalyst is a web application.
It supports exploration and analysis of networks of protein interaction.
It supports association of data with these networks, such as gene or protein abundance.
I think that NetworkAnalyst does not support networks between metabolites.
I think that NetworkAnalyst focuses on the protein-protein dimension of the biological network.

KEGG Atlas

Escher



--------------------------------------------------
7 December 2016

Accommodate subcellular compartments.
Draw somewhat-rectangular regions in the view for compartments.
Determine the areas of these regions by how many nodes in the subset are within each.
Restrict nodes to their respective compartments.
Follow similar principles as bounding nodes within the view itself.

--------------------------------------------------
15 November 2016

I will need to account for replication of high-degree nodes in the search queries.
High-degree nodes might connect parts of the network that are otherwise very unrelated.

--------------------------------------------------
11 November 2016

Meeting with Ethan Kerzner

The input data for this Profondeur system are metabolic models from the community of systems biology in Systems-Biology-Markup-Language (SBML) format.
These models have rich detail on the metabolic network and also benefit from thorough curation.

For simplicity and versatility, keep the Profondeur system functionality as close to the original data as is practical.
It will probably be necessary to convert the model data from SBML format to JSON format.
COBRApy and libSBML in Python will be useful for this format conversion.
This JSON file of the model data will be the input for the Profondeur system.

It will be necessary to restructure the data in order both to perform graph-based queries and to represent the data as a node-link graph in D3.
Do not restructure the data for any sort of permanent file structure.
Rather, preserve the data in its native form.
Instead, write getter functions to retrieve the relevant information from the native data and return the necessary arrays of objects for graph operations.

Write the entire Profondeur system in the JavaScript language to run on the client's browser.
Ethan assured me that queries on graphs with up to 1 million nodes will still be efficient enough to run interactively on the client's browser.
The user will not want to install anything special (like a back-end in Python) on their own machine.
It would be possible to have a back-end in Python on a server.
Passing information between a front-end in JavaScript and a back-end in Python is possible and fairly simple, but it does require some engineering.
For practicality and simplicity, write the entire Profondeur system in the JavaScript language to run on the client's browser.

--------------------------------------------------
10 November 2016

Changes to the network representation such as replicating nodes should result in a total redraw of the network, I think.

Changing the layout of the network to group nodes by property such as cellular compartment should happen on the network nodes and links as currently drawn.

Highlighting should also happen on the network as currently drawn.

--------------------------------------------------
10 November 2016
Visual Design Lab
Code Review Meeting

Ethan Kerzner

----------

Python string casting
u"string"
Tells the interpreter to understand the string in Unicode rather than in ASCI.

Function decorator
Decorator takes a function and wraps it into a new function.
Flask uses decorators.
Flask provides decorators to use.
It is uncommon to need to write your own decorators to use.

----------

System Architecture

In Ethan's example, user interaction with the graphical interface assembles information for a query against a network graph database.

Ethan recommends assembling a JSON object in the interface program that stores all relevant information for the query.
Then pass that JSON object to a platform program to assemble the actual query and carry it out.

The results from this query against the graph database return to the graphical interface as a JSON file.

I think that I should follow a similar architecture model.

----------

Neo4j and Titan are leading graph databases.
Cypher is the query language for Neo4j.

Cypher is a fairly simple and intuitive language.
Cypher also is unable to support some more complex types of queries.
Gremlin and Titan are more complex language, but they also support more complex types of queries.

Querying to find paths from network data in typical databases (SQL) is complex and requires a lot of joins.

----------

Network Data Abstraction

In architecture of any system, try to maximize modularity.
For example, have the client in JavaScript pass only essential elements of query (start, end) to the intermediate platform (Flask Application) to assemble the query in cypher to pass to the database in Neo4j.
That way the client in JavaScript is not only useful for cypher language and database in Neo4j.
Then the interface is versatile.
It would only be necessary to change the intermediate platorm (Flask) in order to support different query languages or databases.

In general, graph databases (including Neo4j) are optimized to handle searches with restrictions by properties of nodes, not links.
It is much more efficient to query the graph database by properties of nodes than it is to query the graph database by properties of links.

In terms of data abstraction, it is helpful to represent the network optimally.
Represent nouns as nodes.
Represent verbs as links.

An example is a network between neurons with synapses.
Cells are nodes.
A cell can connect to multiple synapses.
It would be ideal to represent both cells and synapses as nodes since both have properties.

In the case of my current project, it is ideal to represent both metabolites and reactions as nodes.
In my current encoding, reactions have node properties.
Reactions consist of links between two nodes (in/out).

----------

--------------------------------------------------
9 November 2016

----------

Now make smaller subsets

http://www.jsoneditoronline.org/

http://www.genome.jp/kegg/pathway/eco/eco00020.html

Citrate Cycle
Genes Grouped By Reaction

1)
CS: b0720 (h_c, h2o_c, coa_c, cit_c, oaa_c, accoa_c)
ACONTa/b: b0118, b0771, b1276 (cit_c, h2o_c, acon_C_c, icit_c)
ICDHyr: b1136 (icit_c, nadph_c, co2_c, nadp_c, akg_c)

accoa_c
acon_C_c
akg_c
cit_c
coa_c
co2_c
h_c
h2o_c
icit_c
nadph_c
nadp_c
oaa_c

2)
AKGDH: b0726
b0727
SUCOAS: b0728, b0729

3)
FRD7: b0721, b0722, b0723, b0724, b4151, b4152, b4153, b4154
SUCDi: b0721, b0722, b0723, b0724
FUM: b1611, b1612, b4122
b2210
MDH: b3236

----------

Now that I have a subset of the model of the metabolic network, I need to define nodes and edges.

Reaction encoding of reactant and product metabolites:
Reactant metabolites have value -1.
Product metabolites have value 1.

Nodes
1) Metabolite
----Type specification ("metabolite")
----Need complete data for metabolite
----Just copy metabolites
2) Reaction_In
----Type specification ("reaction")
----Need reference to the reaction
3) Reaction_Out
----Type specification ("reaction")
----Need reference to the reaction

Links
1) Metabolite-To-Reaction_In/Out
----Type specification ("metabolite")
----Do not need any data, really
2) Reaction
----Type specification ("reaction")
----Need complete data for reaction
----Just copy reactions

Reactions With Metabolites

ACONTa_in
-cit_c
ACONTa_out
-h2o_c
-acon_C_c

ACONTb_in
-h2o_c
-acon_C_c
ACONTb_out
-icit_c

AKGDH_in
-nad_c
-akg_c
-coa_c
AKGDH_out
-succoa_c
-co2_c
-nadh_c

CS_in
-h2o_c
-oaa_c
-accoa_c
CS_out
-h_c
-coa_c
-cit_c

FRD7_in
-fum_c
-q8h2_c
FRD7_out
-succ_c
-q8_c

FUM_in
-fum_c
-h2o_c
FUM_out
-mal__L_c

ICDHyr_in
-icit_c
-nadp_c
ICDHyr_out
-nadph_c
-co2_c
-akg_c

MDH_in
-mal__L_c
-nad_c
MDH_out
-h_c
-nadh_c
-oaa_c

SUCDi_in
-succ_c
-q8_c
SUCDi_out
-fum_c
-q8h2_c

SUCOAS_in
-coa_c
-succ_c
-atp_c
SUCOAS_out
-adp_c
-succoa_c
-pi_c

----------

http://www.genome.jp/kegg/pathway/eco/eco00020.html
KEGG
Citrate Cycle (TCA Cycle)
Escherichia coli K-12 MG1655

JSON editor
http://www.jsoneditoronline.org/

Citrate Cycle
Reactions
citrate synthase (CS)
aconitase A (ACONTa)
aconitase B (ACONTb)
isocitrate dehydrogenase (ICDHyr)

succinyl-CoA synthetase (SUCOAS)
succinate dehydrogenase (SUCDi)
fumarase (FUM)
malate dehydrogenase (MDH)

genes (per KEGG)
aconitate hydratase 2 (acnB: b0118)
isocitrate dehydrogenase (icd: b1136)
2-oxoglutarate dehydrogenase E1 (sucA: b0726)
2-oxoglutarate dehydrogenase E2 (sucB: b0727)
succinyl-CoA synthetase beta (sucC: b0728)
succinate dehydrogenase (sdhC: b0721)
fumarate hydratase (fumC: b1611)
malate dehydrogenase (mqo: b2210)
malate dehydrogenase (mdh: b3236)
citrate synthase (gltA: b0720)

Citrate Cycle
Genes Grouped By Reaction
b0720
b0118, b0771, b1276
b1136
b0726
b0727
b0728, b0729
b0721, b0722, b0723, b0724, b4151, b4152, b4153, b4154
b0721, b0722, b0723, b0724
b1611, b1612, b4122
b2210
b3236

Genes Sequential
b0118.
b0720.
b0721.
b0722.
b0723.
b0724.
b0726.
b0727.
b0728.
b0729.
b1136.
b1276.
b1611.
b1612.
b3236.
b4122.
b4151.
b4152.
b4153.
b4154.

Missing
b0771 (compensatory)
b2210 (compensatory)

Metabolites
accoa_c.
acon_C_c.
adp_c.
akg_c.
atp_c.
cit_c.
coa_c.
co2_c.
fum_c.
h_c.
h2o_c.
icit_c.
mal__L_c.
nad_c.
nadh_c.
nadp_c.
nadph_c.
oaa_c.
pi_c.
succoa_c.
succ_c.
q8_c.
q8h2_c.

----------

Message date: 9 November 2016
Message from: T Cameron Waller (cameron.waller@biochem.utah.edu)
Message to: Neil Swainston (neil.swainston@manchester.ac.uk)

Hi Neil,

I am very interested in your current model of human metabolism, Recon 2.2 (https://www.ncbi.nlm.nih.gov/pubmed/27358602). Thank you very much for making this contribution to the scientific community! My team studies metabolism, and I would like to use your model to give general context to our experiments and data. My intention is to use Recon 2.2 as a (framework for a) general model of the metabolic network, representing properties of metabolites, proteins, transcripts, and genes and relations between them. I do not intend to use Recon 2.2 for computational simulations.

I accessed Recon 2.2 from the BioModels Database (http://www.ebi.ac.uk/biomodels-main/MODEL1603150001) with format in SBML Level 2 Version 4. When I tried to load the model into COBRApy (https://opencobra.github.io/cobrapy/) for general exploration and format conversion, I learned that Recon 2.2's version of SBML is apparently pre-FBC Version 2 and so is not the preferred format for use in COBRApy. I think I can resolve compatibility issues using LibSBML.

Before I proceed, I want to make sure to use the most current version of Recon 2.2 and the best strategy for compatibility. Do you have recommendations for using Recon 2.2 in COBRApy? Do you have a version of Recon 2.2 in a more current version of SBML?

Thank you,

T Cameron Waller

Department of Biochemistry
University of Utah

--------------------------------------------------
8 November 2016

----------

Mark Newman
"How Can You Tell What A Network Looks Like When It's Too Large To Look At?"
24 October 2016
Indiana University Network Science Institute

[00:03:43 - 00:04:25]
"The thing that all of these pictures have in common is that they're kind of cheating. They've all been cherry-picked to be beautiful, simple examples where you can make a nice picture of them where you see what's going on. Most networks are not like this. Most networks are like this. You try and make a picture of them, and I'm sure that this is a best effort, but you really can't see what's going on. Because it's just too dense, there's too many nodes, there's too many edges, and you just end up with this hairball. This one here, so this is a picture of a metabolic network, for example."

[00:04:46 - 00:05:10]
"It's not possible to make a good picture of this network. It's just too dense. So a large part of what we do, is we're interested in understanding what these networks look like when we can't actually make a picture of them because of this problem here. There's too large and complicated objects."

Two Strategies

Small-Scale Structure:
Look at properties of small subsets of the network.
Degrees, correlations, small subgraphs, centrality

Large-Scale Structure:
Mark's Focus for the remainder of his talk
Communities (topo-community structure), core-periphery structure, hierarchy, ranking, latent-space structure
Synthesize information from across the entire network.
Methods for quantifying large-scale structure:
Statistical Inference (Mark's focus)
Spectral Methods

Maximum likelihood

Mark describes statistical inference in the context of deriving an estimate for mean and standard deviation for a set of data with normal distribution.

[00:12:50]

Mark feel like analysis of community structure in networks has been "done to death".


--------------------------------------------------
7 November 2016

----------
Apparently Recon 2.2 (http://www.ebi.ac.uk/biomodels-main/MODEL1603150001) is in an SBML format prior to FBC 2.
As a result, COBRApy (https://opencobra.github.io/cobrapy/) cannot import it without LibSBML.
I have been unable to install and import LibSBML into my Python Interpreter.
Contact the author(s) of Recon 2.2 to request a version of Recon 2.2 that is in SBML format with FBC 2.

----------
http://cobrapy.readthedocs.io/en/stable/io.html?highlight=libsbml
I need libSBML to load the Recon 2.2 model in COBRA.
http://sbml.org/Software/libSBML

----------
Comparison to available technology helps me to get a clear idea of the contribution of this project.
A major distinguishing characteristic of this project is the emphasis on network topology.
A lot of tools (Escher, GeneMania) assign interactions or relatedness between metabolites or genes if they are in the same pathway.
Pathways are sets that rely on human annotation.
Pathways do not account for degree of relation.
Two metabolites in a pathway might relate via 1 reaction or via 10 reactions.
Those relationships (1 or 10) are not equal.
Additionally, any metabolite can participate in multiple pathways.
These problems exist in Gene Set Enrichment Analysis and Metabolite Set Enrichment Analysis.
Profondeur emphasizes network topology.
In order to do so, Profondeur will rely on methods for queries and dynamic layout of the network.

----------
I realized that multiple reactant metabolites and multiple product metabolites can participate in a single reaction.
Drawing distinct links between every reactant and product would cause visual clutter.
I would prefer to use super links between groups of reactants and products.


----------
Eventually, I would like to position nodes in groups by properties, such as cellular compartment.
I wonder if Mike Bostock's clustered force-directed layout would have some clues.
Basically I want to use a force directed layout within multiple separate regions (maybe circles).

----------
Network View
Hover on node: highlight node, highlight edges, display tool tip with details about node.

----------
Maybe the Navigation View could show information on the counts of nodes and links in a subset of the network.
Maybe this view could also show a histogram for the degrees of nodes in the subset of the network.
Options
Color nodes by degree.
Color nodes by compartment.
Position nodes (layout) by compartment.

----------
I have some ideas about the architecture of the tool, Profondeur.

Query View
A class contains properties and methods for this view of the interface.
This class provides methods to build and execute queries to select subsets of the network data.
Methods of this class actually modify the model for the network data (JSON file) to contain only the relevant parts of the network.
This class passes the subset network data as a JSON object to the Navigation View.

Navigation View
A class contains properties and methods for this view of the interface.
This class provides methods to narrow the subset of the network data further and to modify the visual representation of the network.
As soon as it receives data from the Query View, this class saves the original data and makes a copy for modification.
This class passes the subset network data as a JSON object directly to the Network View.
This class also passes newly annotated subsets of the network data as a JSON object to the Network View as the user interacts with options to modify the network subset or visual representation.

Network View
A class contains properties and methods for this view of the interface.
This class provides methods to visualize the subset of the network.

--------------------------------------------------
4 November 2016

I prepared a summary of the model for E coli core metabolism with single entries for metabolite, gene, and reaction.
The summary helps me to understand the information that the model includes and the format of these data.

The model gives basic information about the metabolic network itself.
The available information includes

Metabolites
Name
Identifiers in multiple databases
Chemical formulas
Charges
Subcellular compartment(s)

Reactions
Name
Metabolites that participate as reactants or products
Reversibility
Requisite gene products (such as protein enzymes)

Genes
Identifier
Name

There is very little information for the gene entry.
In addition to gene, I would like to have information for transcripts and proteins.
I could assemble information using a python script.
Maybe I could figure out an API query against UniProt to determine protein cofactors.



--------------------------------------------------
2 November 2016

----------
Try to accomodate pretty much any metabolic model of reasonable quality.

----------
Paths in graph theory
https://en.wikipedia.org/wiki/Path_(graph_theory)
Algorithms exist to identify sequences of edges that connect nodes.
Algorithms exist to do so with consideration for edge directionality.
Allow user to restrict or not to restrict directionality when appropriate.
Dijkstra's Algorithm
Bellman-Ford Algorithm
Floyd-Warshall Algorithm

What algorithm(s) did PathFinder use?

I want to find the shortest path(s) that connect a set of nodes or multiple nodes while considering properties of the nodes and edges in these paths.

I would like to support more intricate algorithms that consider properties of nodes and edges in detail.

https://www.cs.princeton.edu/~rs/talks/PathsInGraphs07.pdf

----------
I need tools to work with the metabolic network once I load it into JavaScript as a JSON.
I need to recognize nodes and edges and their properties.
I need to find paths between multiple nodes.

I need to format my network representations in custom ways.
I need to highlight nodes that match a selection criterion.
I need to position sets of nodes according to properties such as compartment.
I need to control the representation of nodes and edges for different types of nodes and edges.

Here are some tools.

SigmaJS
http://sigmajs.org/

CytoScape.js
http://js.cytoscape.org/

----------
COBRApy integrates well with Escher.
Indeed, it is possible to read a SBML metabolic model into COBRApy, test and modify it in COBRApy, export it to JSON, and import to Escher to build metabolic maps from it.

Here is an example script for Escher.
http://nbviewer.jupyter.org/github/zakandrewking/escher/blob/master/docs/notebooks/Generate%20JSON%20models%20in%20COBRApy.ipynb

"
import cobra
import cobra.io
import cobra.test

# Load a cobra model from anywhere you like
model = cobra.io.read_sbml_model(cobra.test.ecoli_sbml)
# generate a json file to load into Escher
cobra.io.save_json_model(model, 'E coli core.json')
"

Obviously Escher already has utility to read relevant information from the metabolic model in JSON format.

Escher does not support dynamic queries against a comprehensive network model to select subsets of interest.
Escher does not support dynamic layout of the subsets of interest.

----------

Maybe refer to Cytoscape or PathFinder to determine good algorithms to find paths between nodes in network database.

----------

Here is a potential architecture.

Data System
Implement in Python and maybe Caleydo.
Load metabolic model in SBML format using cobra Python package.
Maybe use Python program to enrich metabolic model with supplemental properties such as cofactors of proteins via curated database (UniProt, etc).
Save new database in appropriate format.
Pass database to User Interface.

User Interface
Load network database.
I thought it would be nice to handle queries against the database and just pass subsets to the User Interface.
However, if I want dynamic queries, it seems that I might need to handle queries in User Interface.
Find paths between nodes and according to conditions in query interface.
Draw network graph.
Allow user to modify network graph further, but store the original in order to revert.

----------

I need to interface with the SBML format or convert to a more convenient format.
I also want to select a subset of the metabolic network (such as Glycolysis or Citrate Cycle).

COBRApy is a useful package for Python that provides tools for working with models in SBML format.
This package has capability to convert models between SBML and JSON format.
http://cobrapy.readthedocs.io/en/latest/index.html
cobra.io.read_sbml_model(join(data_dir, "file_name.xml"))
cobra.io.load_json_model(join(data_dir, "file_name.json"))
cobra.io.save_json_model(textbook_model, "file_name.json"))

https://opencobra.github.io/
https://opencobra.github.io/cobrapy/

In terminal...
C:\Python27\Scripts\pip.exe install cobra

1) Install cobra python package
In terminal:
"pip install cobra"
Installation of cobra worked properly.
In Python script:
"import cobra"
"from cobra.test import test_all"
"test_all()"
I can now use cobra in Python.
Complete!

2) Load Recon 2.2 model from SBML into cobra
Or for now use a smaller, simpler model.
Complete!

3) Explore the model
Complete!

4) Figure out how to subset/query the model
Not Complete...

5) Save the model as a JSON
Complete!

6) Load the JSON into a JavaScript program and explore.

--------------------------------------------------
1 November 2016

Recon 2.2 is a model that includes the most current knowledge of human metabolism. If I can interface with it then I can benefit from the community's updates and curation. Models like Recon 2.2 in systems biology are a bit complex, and I'm working to understand it. I'll need to manage the structure and organization of these data so that I can use them in my project.

Recon 2.2 is available in the SBML format.
http://www.ebi.ac.uk/biomodels-main/MODEL1603150001

I need to learn how to work with the SBML format.
I also need to learn how to convert the SBML format into a useful format for JavaScript.

http://sbml.org/
http://sbml.org/Basic_Introduction_to_SBML

--------------------------------------------------
31 October 2016

I met with Sean P McKenna.
We discussed my use of his "Design Activity Framework" in my visual design project.
We also discussed my visual design project, and he offered feedback.

Sean encouraged me to consider alternative visual representations of the network than the node-link diagram.
An adjacency matrix or grid is a great option.

Force-Directed Node-Link Diagram
https://bl.ocks.org/mbostock/4062045

Adjacency Matrix
https://bost.ocks.org/mike/miserables/

Grouping is very important for a grid representation to be informative.

Think abstractly about what tasks the user needs to do.
Use this concept to prioritize alternative visual representations, such as the grid versus node-link diagram.

Dimensionality Reduction
Consider the types of nodes and links that are most important.
Limit the model to these priority nodes and links for simplicity.
For example, omit genes and transcripts from the node-link diagram.
Just include reference from a protein to its transcript and gene in order to accomodate those data.

--------------------------------------------------
28 October 2016

A common format for computational biological models is The Systems Biology Markup Language (SBML).
There is a website with more information on this format (http://sbml.org/).
This website gives information on the format and on how to work with the format.

I definitely neither want to construct my own metabolic model nor want to curate and maintain my own database or model.
It will definitely be best to interface with models and databases that the community curates and maintains.
Ready assemblies of metabolic models from the community are good options.
I want a model that includes lots of properties, including compartments, cofactors, regulation, etc.

When organizing the data for the network, distinguish between different kinds of relations.
The network is a multilayer network, or a network with multiple dimensions, multiple types of nodes and relations between them.
Also distinguish between direct relations and sets.
For example, all genes are a set.
All transcriptional regulators are a set.
All metabolic enzymes are a set.
All mitochondrial proteins are a set.
All proteins with a specific cofactor are a set.
All catabolic, anabolic, oxidative, or reductive reactions are a set.
Notice that cellular compartment is a set, not a direct relation.
There are very many possible sets.
Accomodate sets defined by any properties that multiple entities or relations share in common.
A set should be a collection of entities or relations that a query defines.

I think that genome-scale metabolic models are the best option for structured data.

I need to figure out how to pass this information to Caleydo and then convert it to a format that I can use (probably a JSON).

Query Interface
Some other strategies use complex Degree Of Interest (DOI) functions.
I read a report about a project that used those.
I prefer not to implement complex DOI functions.
I prefer to support thorough queries so the user can define her or his own interest set.
Maybe prioritize query results by some ranking criteria.
Maybe rank by trends in experimental data.
Maybe high-light the query nodes in the network view.
Maybe anchor these nodes.
Somehow help the user to establish and maintain a sense of context and reference points.

----------
Notes on the big-picture plan.

Here is the general plan.
The Data Visualization course is a great priority because it helps me to learn principles of data visualization as well as relevant tools and techniques.
The project for the Data Visualization course is a great opportunity to obtain some basic experience in visual design and software development.

Here is the plan for the project.
1) Learn from past and current technology.
Study the scientific literature to learn about the analysis and visualization of networks in social science, computer science, and biology.
The subject of multilayer networks, or networks with multiple dimensions, is especially relevant and interesting.
2) Learn from domain experts.
Fortunately, I am a domain expert and a potential user myself.
I also have ample opportunity to observe domain needs and state-of-the-art technology in presentations from the Rutter Team and the Metabolic Research Community at the University Of Utah.
Consultations with domain experts during the design and development process will also be helpful.
Entering consultations with some low-level prototypes (even sketches of design concepts) will help domain experts to recognize possibilities and open up to ideas.
3) Design and develop a prototype.
Use data from comprehensive-scale metabolic models.
Possibly develop methods to easily import additional information (cofactors, compartments) from external databases, such as UniProt).
Organize data using Caleydo in the back-end.
Develop interface using JavaScript and D3.
4) Evaluate and improve the prototype.
Compare prototype to existing tools.
Collect evaluations and feedback from domain experts.
Consider using formal surveys and evaluations.
Improve the prototype.


--------------------------------------------------
27 October 2016

I am trying to search the literature to learn more about the state-of-the-art of visualization and analysis of biological and nonbiological networks.

I especially want to learn about networks with multiple dimensions, multilayer networks.

I attended the Seminar In Metabolism.

The presenter was Kimberley Evason, MD, PhD.
Kimberley Evason, MD, PhD
Principal Investigator, Dept. of Oncological Sciences
Assistant Professor, Dept. of Pathology
Huntsman Cancer Institute
University of Utah

The title of her presentation was "Hepatocellular carcinoma, serotonin signaling, and lipid metabolism".

Kimberley has performed Transcriptomics analysis by microArray.
She has also performed lipidomics.
She also performed small-molecule metabolomics.
In all cases, the analysis of the -omics data was not within any context of the metabolic network.
It seemed to me that analysis of both transcriptomics and lipidomics could benefit by tools to consider the data in the context of the metabolic network.

Kimberley Evason is another potential user.

--------------------------------------------------
23 October 2016

Domain Tasks
Consider the ideas that I put into my presentation the Rutter Team on 14 October 2016.
Try to keep domain tasks/problems specific.
Consider the guidelines in 2012_Selmair_IEEE.
Then translate the domain tasks to abstract tasks/problems.


Interactive Elements
tool-tip
pop-over
modal-window

Sketching For The Design Process
http://52weeksofux.com/post/346650933/sketch-sketch-sketch
http://ui-patterns.com/blog/User-interface-sketching-tips-part-1
https://www.smashingmagazine.com/2011/12/the-messy-art-of-ux-sketching/
https://www.viget.com/articles/5-lessons-from-a-cartoonist-applied-to-the-website-creation-process
https://simplysecure.org/blog/2016-sketching-storyboards
http://www.inspireux.com/2010/06/28/50-sketching-resources-for-user-experience-designers/
Sketches organize and communicate ideas effectively.
It is important for sketches to be efficient.
Hence many references recommend sketching by hand rather than using computer tools.
It is also important for sketches to be neat.
There are arguments both for manual sketching and computational sketching.

Design Process Methodology
I have some feedback for Sean P McKenna from early-on in the design process. The material for Alexander Lex's data visualization course recommends using the "Five Design Sheet" (FDS) methodology (http://fds.design/). I did a brief study of this methodology after a similarly brief study of McKenna's "Design Activity Framework" (DAF).  My initial impression is that FDS starts too far into the design process, skipping prerequisites. In contrast DAF's "Understand" activity provides helpful guidance through a very important preliminary process. I will try to provide more feedback as I proceed further into the design process.

--------------------------------------------------
20 October 2016

Meeting with Alexander Lex

Alex advises me to progress on 2 goals.
1) Familiarize myself with the technological development tools.
These include Python, JavaScript, D3, and Caleydo.
2) Design visualization features to solve domain-specific problems.
Consider the needs or requirements of the domain of studying the biological metabolic network system.
Consult and interview domain experts.
Translate those domain-specific needs into abstract tasks (searches, queries, etc).
Develop features to solve domain-specific problems.

My project for the data visualization course will progress toward both of those goals.
I will familiarize myself with the technology by actually writing code.
For this purpose, whatever I develop does not have to be perfect.
It just needs to give me an opportunity to learn the tools.
I will also explore ways of visualizing the data.

Eventually I want to have advanced algorithms for searches and queries as well as analysis of experimental data in the context of the network.
I think that aspect of the project should come later.
For now I should focus on how to visualize the data.
Alex agrees.

Alex also recommends that I learn and interface with Caleydo from the beginning.



Start with a list of requirements and goals.
What are the needs in the domain?

Worry about features later.

Look at Miriah's Design Study Methodology paper.

Work with the tools to make some basic visualizations (force-directed layout).

Integrate with Caleydo early on.
Learn about Caleydo from the actual documentation.

What problems do I want to solve with my tool?
Use the domain terminology.
Then translate those needs to visualization abstract tasks.


----------

Feedback from biologists


Several biologists have demonstrated interest in the idea of improving methods to explore and analyze (including visually) metabolism and the biological system.
There has been interest in the idea of visualizing the network system using three spatial dimensions and virtual reality.
Indeed, Cascade (https://www.ncbi.nlm.nih.gov/pubmed/26810393) is a recent program that uses three spatial dimensions in its display.

Several biologists have demonstrated skepticism and concern about this project's real contribution.
What are my plan and strategy for the project?
How will I actually conduct the project?
Will I really be able to develop something useful and new?
Will I need to simplify my goal by focusing on a smaller (less comprehensive) aspect of the problem?
Will I really be able to obtain the necessary information about the network?
How will my project improve on previous and current efforts to visualize the biological network?


Plan
I need to review current technology in general network visualization and in biological network visualization.
I need to know what I will change and improve.
Early on, I think I should explore alternative ways to visualize the metabolic network interactively.
Later on, I think I should incorporate advanced queries and analytical algorithms for experimental data.

Current technologies probably do not really detract from the novelty of our project.
We are not worried about the competition.

Ideas

Using a web platform will improve accessibility and compatibility.

The metabolic network has multiple dimensions of entities and relationships.
Consider ways to enhance the two spatial dimensions of the display to represent multiple dimensions effectively.
1) Use two spatial dimensions on the display, but give a sense for a third, layered, spatial, depth dimension in a reference or context view (Arena3D, http://www.arena3d.org/).
The user could select or scroll between associated dimensions (adding a sort of temporal dimension) and could also collapse multiple dimensions into the same view.

Current Technology
Cytoscape
VisAnt
Arena3D
VisualGraphX

--------------------------------------------------
6 October 2016

I attended the Metabolism Seminar. The presenter used metabolomics and proteomics with broad coverage to characterize metabolic differences in heart failure.

 It was an interesting example of the state of the art. The presenter showed very many pathways and bar charts.

The presenter was
Junco Warren, PhD
Assistant Professor
Cardiovascular Research and Training Institute
Department of Internal Medicine
University of Utah

The title of her presentation was "A Novel Role of the Histone Methyltransferase Smyd1 in Cardiac Metabolism: A Multisystems Approach".

Junco Warren is a potential user of the network visualization and analysis tool.
She is familiar with the state of the art.

--------------------------------------------------
29 September 2016

Meeting with Janet Iwasa

Hypothesis
Define questions or problems, and design methods to solve.
Define specific scientific problems facing real research.


Balance between versatility and practical functionality.


The research design needs to consider both more applied and basic audiences.
Tune publications and presentations to audience, biology versus computer science.

How to bridge gap between computer science and biology.
Develop understanding of and focus on problems and hypotheses important to biology.
Talk with multiple biologists to appreciate real probelms in biology.


Talk With
Janet Lindsley (Communication, education perspective)
Orly Alter

--------------------------------------------------
23 September 2016

Goals

1) Learn in the Data Visualization course.

2) Establish design requirements by consultation with potential users.
-How methodical should this consultation be?
-Should I administer formal surveys?
-Should I ask prospective users to rank features?
-I will probably need to meet with people to explain concepts.

3) Comparison to available tools
-Should I consider available tools at this stage?

4) Familiarize Caleydo and PathFinder.

Ideas

Even a theoretical project to illustrate a concept (visualization of metabolic network) and the scope of possibility will be interesting to the metabolic community.
Give a concept demonstration prototype with some data analysis to demonstrate relevance and usefulness.

Query network to find paths between nodes.
Rank paths by topology (connectivity) and by attributes (experimental data).

In network visualization with dynamic layout, it is a challenge for the human user to maintain contextual reference.
Consider anchoring a particularly important node or nodes spatially as a reference point.

PathFinder simplifies queries for computational efficiency.
A new direction is to establish methods for heuristic queries of a large network database in order to evaluate the data more completely.

Use the best channel of visual perception (position) for the most important data.
Whenever possible, position should represent some absolute and important aspect of the information.
Do not use arbitrary geographic layout of the metabolic network, or at least be cautious.
Use color sparingly, mostly for highlighting.
Use definable queries and dynamic, interactive ranking to work with big data.
Try to interface with curated, maintained, current (up-to-date) databases.

Sashimi Plot
Miso Algorithm for cluster grouping

--------------------------------------------------
12 September 2016

Slide 1: Title, Metabolism Within The Biological System
-Title: "Visual Exploration and Analysis of the Metabolic Network."
-Script: "Thank you for attending my presentation. I am going to introduce my very new research project, about which I am very enthusiastic. Metabolism is a central and integral part of the biological system. A holistic perspective on this system is important to understand the often widespread changes to metabolism in human diseases such as cancer, diabetes, and obesity. Modern 'omics technologies provide broad data on the biological system, but analyzing these data is a challenge. There is a need for methods to study the vast complexity of the metabolic network."

Slide 2: Holistic Study Of Metabolism
-Data
--Data are available for broad, holistic study of metabolism.
-Analysis
--1) Consider all known connections in analysis and interpretation.
---Connections might be atypical, compensatory, or subtle
----Pyruvate metabolism
----Lysine degradation
---Two proteins might share a common kinase as a regulator.
---Two transcripts might share a common transcription factor as a regulator.
--2) Discover new connections.
---Some connections might be case specific.
---Maybe connections only become significant upon some disease or other perturbation of the network.
-Examples
--Metabolic Map
-Script: "I used to study the Mitochondrial Pyruvate Carrier (MPC) that transports pyruvate from the cytosol into the mitochondrion. Here is a metabolic map that I drew manually while working on that project. I drew this map specifically to represent relationships between metabolites that I could measure by metabolomics. This map conveys a lot of information, and drawing it was a lot of work. I searched through several databases to confirm reaction steps, enzymes, and enzyme locations in subcellular compartments. This map is pretty complex, right? Well, that is true, but this map is also a gross simplification of metabolism. Even worse is that it is an arbitrary misrepresentation of metabolism due to my own bias and selection. I will offer pyruvate as an example."

Slide 3: Metabolic Network - Entities, Attributes, Relevant Data
-Metabolic Network
--Entities:
---Genes: ~70000
---Transcripts: >70000 (splice variation)
---Proteins: ~30000
----Enzymes or Transporters: ~5000
----Many more types of proteins than enzymes and transporters have roles in metabolism.
---Metabolites: ~30000
--Entity Attributes:
---Abundance
---Cellular Compartment (Set/Super-Relation)
---Modifications (Mutants, Variants, Chromatin, Post-Translational Modifications)
---Cofactors
--Entity Relevant Data:
---Genomics, Transcriptomics, Proteomics, Metabolomics
-Script: "Metabolism is a vast and complex network of relationships between genes, transcripts, proteins, and metabolites."

Slide 4: Metabolic Network - Relations, Attributes, Relevant Data
-Metabolic Network
--Entities: genes, transcripts, proteins, metabolites
--Relations:
---Encoding: Biological Sequences, Genetic Code (gene-transcript-protein)
---Expression: Regulation of transcription and translation (metabolite-protein, protein-gene, protein-transcript)
---Regulation: Allosteric regulation (metabolite-protein), Post-translational modification of proteins (protein-protein)
---Transport: Metabolite transport (protein-metabolite)
---Catalysis: Enzymatic catalysis (protein-metabolite)
---Reaction: Chemical reactions (metabolite-metabolite)
--Relation Attributes:
---Metabolic Process Or Pathway (Set/Super-Relation)
---Catabolism Or Anabolism
---Oxidation Or Reduction
---Reaction Rate
--Relations Relevant Data:
---Encoding: Biological Sequences, Genetic Code
---Expression: Chromatin Immunoprecipitation, Ribosome Profiling
---Regulation: Hicks Allostery, Proteomics, Tandem Affinity Purification, Yeast Two-Hybrid
---Transport: Metabolic Characterization
---Catalysis: Metabolic Characterization
---Reaction: Metabolic Characterization
-Script: "These entities relate to each other in multiple ways even beyond the typical central biological dogma and enzymatic catalysis. For example, Kevin Hicks in the Rutter Lab is studying allosteric regulation between metabolites and various proteins."

Slide 5: Network Visualization: Node-Link Diagram
-Slide
--Show a simple example of a network
--Annotate it with details during explanation
-Node-Link Diagrams
--Node types: gene, transcript, protein, metabolite
--Link types: encoding, expression, transport, catalysis, reaction, regulation
--Sets of Nodes and Links: metabolic process/pathway, cellular compartment, catabolic or anabolic process, oxidative or reductive process, enzymatic cofactor
--Attributes of Nodes and Links: reaction rate, modification, abundance
-Script: "Now let us consider the information of the metabolic network in the context of a node-link diagram. ... Even a simple network with 31 nodes of a single type and edges of a single type become difficult to consider. Computers are excellent at handling this sort of data."

Slide 6: Network Visualization: Exploration and Analysis
-Useful operations:

Slide 6: Network Visualization, Example Hairball
-Example of Node-Link Diagram
--Force-Directed Layout of Large-Scale Network (Figure from Alex)
---Useless

Slide 5: Network Visualization, Example KEGG Atlas
-Examples of Node-Link Diagrams
--KEGG Atlas
---Map Layout
--Sigma Metabolic Atlas
---Map Layout
-Problems:
--Map layout artificially biases network by layout
---Distance between nodes does not correlate to degree of relation
---This distortion would obscure trends when visualizing experimental data on the network
---Map layout somewhat arbitrarily associates nodes with specific pathways even if they also function in others
--Network is not interactive in the sense of dynamically generating subsets according to interest
---There is no way to modify the network in order to visualize features of interest

Slide 7: Network Visualization, Query-Based Exploration
-Query Network
--Node-Link Diagram is a visual representation of data about the network.
--It is possible to query the network to facilitate exploration.
--PathFinder
---Introduce Alexander Lex at this point.
--Give some examples of how this could be useful.
--Give examples of types of queries that could be useful.

Slide 8: Network Analysis
-Relate to the concept of querying the network.
-Associate experimental data with the metabolic network.
--Potentially relate data from multiple -omics technologies.

Slide 9: Application Meta-Analysis



Slide _:Acknowledgement
-Courses:
--Computer Programming For Biomedical Informatics
---Brian E Chapman
---Python
--Data Visualization
---Alexander Lex
---HTML, CSS, JavaScript
-Mentors And Teams:
--Alexander Lex, Visual Design Team
--Jared Rutter
-Supervisory Committee:
--Former Members
--Current Members

--------------------------------------------------
9 September 2016

Plan for presentation to the Department of Biochemistry on 15 September 2016.

Introduce the metabolic network as part of the biological system.
Describe the complexity of the metabolic network.
Describe the need to consider metabolism holistically, especially in order to interpret data from modern -omics technologies.

Metabolism
-Central part of biological system
-Influential in disease
-Vast, intricate network of relationships

Holistic Study
-Modern "-omics" technologies
-Need to recognize and interpret trends
-Computational models and simulations

Interface
-Need for interface to communicate between computational models and human user

--------------------------------------------------
26 August 2016

Study the literature on visualization of biological networks.
We might even consider writing a review article.
The last major review article on the subject was from 2010 by Nils Gehlenborg.

We will plan to publish in computer science or bioinformatics journals.
We wil consider whether to publish once or twice.
The ideal situation would be to publish first a prototype with rich technical detail in a computer science journal.
Then we would publish a project with a stronger biological component in a bioinformatics journal.

March 31 2017 is the submission deadline for the 2017 IEEEVis.
InfoVis is a subconference of IEEEVis.
My goal should be to have a manuscript ready to submit for the 2017 IEEEVis.

Analysis of the types of biological networks.
Ecosystems are another type of biological networks.
We will probably focus on molecular networks and on the biological networks within a single organism.
Population-wide heterogeneity in the human genome has a network aspect.
We would acknowledge inter-organismal networks (social, phylogenetic, ecosystem, population) while focusing on individual organisms.

Alex prepares visualization graphics that represent data using SVG coding and D3.
He uses GUI-based tools (like InkScape) for illustrations that do not represent data.
