--------------------------------------------------
Notes
Research With Alexander Lex
--------------------------------------------------

--------------------------------------------------
1 March 2017

----------
Identifiers for Metabolic Processes

process_1, process_2, process_3, etc
Determine when assembling the set.
Replace the names in reaction nodes.

----------

TODO: include a "process" field for every reaction node.
If the process is undefined, set it to "null".

----------

New Queries

Select an ego network within a specific compartment.

Select a process network within a specific compartment.


----------

Transport events are general and do not have annotations for specific processes.
As a result, networks for processes are disjoint with separate networks for separate compartments.

I can include transport events in the process networks by connecting identical metabolites in separate compartments (pyr_c, pyr_m, pyr_x).
That matching algorithm would be a little complex.

----------
Metabolic Process

Count of reactions in model: 7785
Count of reactions with annotation for metabolic process: 6931
Count of reactions without annotation for metabolic process: 854

----------

--------------------------------------------------
28 February 2017

----------
Query Selection

Selection by Attribute

All queries by attributes will consider nodes only.

Select nodes in a network.
network.nodes().filter(***selector or function***);

Select nodes by name.
***I need a function to check for names that include a query string.

Select nodes by class.
network.filter("node.className");
network.nodes().filter(".className");

Select nodes by data attribute or attributes.
network.filter("node[attributeName = numericValue]");
network.nodes().filter("[attributeName1 = numericValue]");
network.nodes().filter("[attributeName2 = 'characterValue']");
Join by logical and operator.
network.nodes().filter("[attributeName1 = numericValue][attributeName2 = 'characterValue']");
Join by logical or operator.
network.nodes().filter("[attributeName1 = numericValue], [attributeName2 = 'characterValue']");

Examples

Select nodes for metabolites in the peroxisomal compartment.
network.nodes().filter(".metabolite[compartment = 'x']");

Selection by Attribute and Topology

Select all reactions that participate in a specific process or pathway.
Then select all metabolites that participate in these reactions.

--------------------------------------------------
27 February 2017

----------

Before implementing new algorithms for queries for shortest paths, Alex recommended implementing functionality for filters by properties.
Then I can also combine those filters with topological queries.

I can use the A Star algorithm to find the directional or nondirectional shortest paths between 2 nodes.
There are a few additional things that I need for shortest path queries.

1) Many shortest paths pass through nodes with extremely high degrees, such as water or protons.
Alex recommended giving the user control over whether or not to ignore these nodes in shortest path queries.
He also recommended giving the user control over which nodes to ignore in shortest path queries.
Maybe I can simply filter or omit them from the network before the shortest path query.
Filter these nodes from the network.
Pass the resulting network to the shortest path query.

2) I need to consider multiple shortest paths between nodes.
The single shortest path that the query returns might not be the only shortest path, or there might be other paths that are relevant.
Alex approves of my using a breadth-first search to assemble these multiple shortest simple paths.

3) I need to consider shortest paths between multiple (>2) nodes.
I might just find shortest paths between all pairs of nodes and then take the union.
I might be able to apply my multiple shortest simple paths algorithm recursively.
Alex approves of this strategy.

----------

This conversation on Stack Overflow is helpful for modifying a breadth-first search to find k shortest paths in an unweighted network.

http://stackoverflow.com/questions/14144071/finding-all-the-shortest-paths-between-two-nodes-in-unweighted-undirected-graph

Here is what I need.
Find k (multiple) shortest simple (no replicate visits to nodes) paths between 2 nodes in a directed, unweighted graph with multiple links between nodes (a multi digraph).

--------------------------------------------------
23 February 2017

----------
Alex observed that both the Dijkstra's algorithm and the K Simple Shortest Paths algorithm (Jin Y Yen, 1971) are for general, weighted graphs.
Dijkstra's algorithm is a special type of breadth-first search to accommodate weights.

My graph (as I treat it) is not weighted.
I should be able to find k simple shortest paths using an algorithm built on top of a breadth-first search.

Maybe I should implement my own recursive breadth-first-search that has optional restriction for link directionality in both directions and proceeds to a specific depth.

Then I can use that function to drive both my ego network function and my function for k simple shortest paths.

Do I need to worry since my network is a multi-di-graph?
That is, my network has directional links.
Also, I can have multiple, parallel links in opposite directions between two nodes.

https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm
http://stackoverflow.com/questions/8379785/how-does-a-breadth-first-search-work-when-looking-for-shortest-path


http://www.eecs.yorku.ca/course_archive/2006-07/W/2011/Notes/BFS_part2.pdf
http://networkx.readthedocs.io/en/stable/reference/generated/networkx.algorithms.simple_paths.shortest_simple_paths.html


----------

There are a few additional topological queries that I think would be useful.

1) Shortest path between 2 nodes with consideration of link directionality.
Solution: A Star algorithm, available in CytoScape.js as eles.aStar().

2) Shortest paths between more than 2 nodes with consideration of link directionality. I'm considering a recursive application of the A Star algorithm.
Solution: Use a single-source version of Dijkstra's algorithm to determine shortest paths between each node of interest and all other nodes in the network.
Then select for each node of interest the paths to all other nodes of interest.
Combine these.
Use CytoScape.js eles.dijkstra(), filter appropriately, and use eles.union().

3) Multiple alternative shortest paths between 2 nodes, "K Shortest Paths".
NetworkX, the Python library, has a function for "shortest_simple_paths".
There is no similar solution either in CytoScape.js or in JSNetworkX.
Solution: Consider implementing the K Simple Shortest Paths algorithm (Jin Y Yen, 1971) for CytoScape.js.
Use the currently available implementation of Dijkstra's algorithm or A Star algorithm if possible.

----------

Dijkstra's Algorithm
https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm
Dijkstra's Algorithm "is asymptotically the fastest known single-source shortest-path algorithm for arbitrary directed graphs with unbounded non-negative weights".

A Star Algorithm
A Star algorithm relies on a heuristic function to prioritize paths in progress.
Without this heuristic function, I think that the A Star algorithm is essentially identical to Dijkstra's algorithm.

In order to determine the paths (shortest or otherwise) between nodes, any search algorithm must traverse a substantial portion of the network.
This traversal is computationally expensive, and it will be more efficient to perform it a single time.
To find paths between multiple nodes, it will be more efficient to traverse the network a single time, store information about all paths, and then select the information for paths between desired nodes.

In contrast, my implementation of functionality to collect ego networks does not need to traverse the entire network.
In that case, I think that my implementation was more efficient that determine the lengths of all paths and filtering.

----------
Shortest Paths beween Multiple Nodes

I would like to implement a recursive application of the aStar algorithm that can find shortest paths between all nodes in a list of more than 2 nodes.
I suppose that I could consider the option of adapting the algorithm that finds shortest paths between all pairs of nodes in a network.

----------
K Shortest Paths
https://en.wikipedia.org/wiki/K_shortest_path_routing

NetworkX has a function for "shortest_simple_paths" (http://networkx.readthedocs.io/en/stable/reference/generated/networkx.algorithms.simple_paths.shortest_simple_paths.html).
This function returns a count of simple paths (no loops or revisits) up to a specific limit between a source node and a target node in a network.
It is thus possible to select how many shortest paths you want.

JSNetworkX does not yet have "shortest_simple_paths" from NetworkX.
JSNetworkX has not had any updates since 18 July 2015.

CytoScape.js does not have a function to compute all simple paths.

--------------------------------------------------
22 February 2017

----------
Tasks

Selection
The user can combine these selections for specificity.

1. Select metabolites and reactions by topology.
1.1. Select metabolites and reactions within a specific topological proximity to a single query metabolite or reaction.
Example: Select metabolites and reactions within 1 reaction of pyruvate.
Example: Select metabolites and reactions within 3 reactions of pyruvate.
Solution: I implemented function collectEgoNetwork to collect nodes and links in an ego network around a single focal node.
This function can also consider link directionality in its traversal of the network.

1.2. Select metabolites and reactions within shortest paths between multiple metabolites, reactions, or combinations thereof.
Example: Select metabolites and reactions in the shortest paths between glucose and pyruvate.
Requirements: Functionality for traversal for neighborhood and shortest paths.
Solution: The aStar function in CytoScape.js finds the shortest path between two nodes.
This function can consider link directionality in its traversal of the network.
Will it be helpful to consider k shortest paths (https://en.wikipedia.org/wiki/K_shortest_path_routing), more than just the single shortest path?
Will it be helpful to find shortest paths connecting more than two nodes?
I can probably perform the aStar function multiple times for each pair of nodes and then combine the results.

2. Select metabolites and reactions by property, attribute, or category.
2.1. Select metabolites and reactions by inclusion criteria.
Example: Select transport reactions and their metabolites.
Example: Select metabolites and reactions that appear or occur in the mitochondrial matrix.
2.2. Select metabolites and reactions by exclusion criteria.
Example: Select metabolites and reactions that do not appear or occur in the cytoplasm.
Requirements: Functionality for selections and filters by a variety of properties.
Structure 1: Ignore transport reactions.

3. Select metabolites and reactions by combinations of topology and property, attribute, or category.
3.1. Select metabolites and reactions by multiple topological criteria.
Example: Select metabolites and reactions in the shortest paths between glucose and pyruvate.
Then select metabolites and reactions within 1 reaction of all of these metabolites and reactions.
3.2. Select metabolites and reactions by multiple properties, attributes, or categories.
Example: Select transport reactions and their metabolites between the cytoplasm and the mitochondrial matrix.
3.3. Select metabolites and reactions by combinations of topological criteria and properties, attributes, or categories.
Example: Exclude metabolites with especially high degrees (water, proton, carbon dioxide, etc) from consideration in the network.
Then select metabolites and reactions within 1 reaction of pyruvate.
Example: Select metabolites and reactions within 1 reaction of mitochondrial pyruvate.
Example: Select metabolites and reactions within 1 reaction of pyruvate.
Then select only the metabolites and reactions that appear or occur in the mitochondrion.
Example: Select metabolites and reactions that appear or occur in the mitochondrion.
Then select only the metabolites and reactions that are also in the shortest paths between pyruvate and citrate.

Visualization

1. Represent nodes and links for the network.
Distinct nodes for compartmental metabolites or not...
2. Represents properties and attributes, including those that define sets, clearly and in multiple ways.
Spatial clusters, color highlighting
3. User interaction.

Analysis

Betweenness Centrality
Degree Centrality
Communities, clusters, and cliques in the network might be relevant and interesting, but they are probably beyond the interest of the typical user.

----------
Network

JSNetworkX
My network is a MultiDiGraph.
JSNetworkX supports attributes of nodes and links.

----------
Plans

Queries need to be more specific.

----------
Meet with Alexander Lex

Alex recommended representing the ego network in a table along with the node-link diagram.
This table would have columns for nodes at specific depths from the ego or focal node.

----------
Observations

pyr_x at depth 2 links: 22 nodes (metabolites and reactions)
pyr_x at depth 3 links: 1510 nodes (metabolites and reactions)
pyr_c at depth 2 links: 117 nodes (metabolites and reactions)
cit_c at depth 2 links: 45 nodes (metabolites and reactions)
cit_c at depth 3 links: 2557 nodes (metabolites and reactions)

From a biological perspective, I knew before that pyruvate and citrate were both central nodes in cellular metabolism.
I also knew that the metabolic network was highly interconnected.
Still, even this rather simple analysis of the metabolic network has a certain degree of novelty to biology.
Even this rather simple analysis impresses me from a biological perspective as just how extreme the interconnection of the metabolic network is and how central these metabolites are.

I am eager to evaluate the degrees of metabolites in the network.
This global-level analysis might be very interesting.

--------------------------------------------------
21 February 2017

I completed the implementation of a function to collect nodes and links in an ego network around a focal node.
The function considers link directionality and traverses outward from the focal node to a specific depth.

Ego networks for many metabolites become very complex and enormous very quickly.
At depth 2 or 3, ego networks for many metabolites become very complex and enormous.

The user will need very specific control over queries in order to select sufficiently specific and narrow subsets of the network.
In particular, I think it will be very important for the user to be able to add additional depth by clicking on nodes on the visual network.
That way the user can expand depth in very specific directions.

----------

http://www.pathwaycommons.org/

----------

I met with Tramy Nguyen and Leandro Watanabe, who are members of Christopher J Myers' research team.
I understand from Tramy and Leandro that some tools already exist to visualize networks from systems biology, specifically networks from Systems Biology Markup Language (SBML).
The most popular tool for visualizing these networks is CytoScape (the desktop implementation in Java), using the importer cySBML, for example.
SBGN and associated tools are also useful for visualizing these networks.
Tramy and Leandro mentioned several tools, including iBioSim, BioPAX, CytoScape, Escher, KEGG Translator, and SBGN.

BioPAX seems to be a potentially useful standard for representing biological pathways with more general information than models in SBML tend to include.
When I checked, however, it seems that thorough models of human metabolism are not available in BioPAX as they are in SBML.
It seems that BioPAX more commonly includes general biological pathways.

----------

I wish I knew a better, or at least neater, way to convert a collection to a core in CytoScape.js.
In order to visualize a subNetwork, I need to use the JSON representation of the element in a collection to initiate an entirely new network instance.
I need to specify container, layout, and style in this initiation.

The function collection.cy() returns a core instance from the collection.
The function collection.cy().elements() does not work for defining the elements upon initation of a new network instance.

----------

--------------------------------------------------
20 February 2017

----------

"CySBML: a Cytoscape plugin for SBML"
Bioinformatics
2012
https://www.ncbi.nlm.nih.gov/pubmed/22772946

CySBML imports information from metabolic models in SBML format to the Java version of CytoScape.
I anticipate that an interactive implementation in the JavaScript version of CytoScape will be much more accessible to biologists.

----------

Cola layout
https://github.com/cytoscape/cytoscape.js-cola

----------

The algorithms in CytoScape.js for finding shortest paths only find the shortest path from a root node to all other nodes in the network.
There is not option to restrict the algorithms to a specific depth.
Calculation all path lengths and then using this would be tedious and inefficient.

--------------------------------------------------
17 February 2017

----------

Ego Network with specific directionality

The user of Profondeur might want to know the ego network surrounding a metabolite either without consideration of link direction, or with specific restriction for link directionality in either direction towards or from the focal metabolite.

CytoScape.js has an implementation of the breadth-first search algorithm.
This implementation has an option to either ignore link direction or to follow link direction forward from source to target.
It cannot follow links in reverse direction from target to source.

With the current implementation of the breadth-first search algorithm in CytoScape.js, I cannot allow the user to select an ego network coming towards the focal metabolite.

I think that it will be beneficial for me to implement a custom function to select or collect an ego network with bidirectional control.

My implementation will involve a recursive version of the breadth first search algorithm.
https://en.wikipedia.org/wiki/Breadth-first_search


----------
NetworkX ego_graph
http://networkx.readthedocs.io/en/stable/reference/generated/networkx.generators.ego.ego_graph.html?highlight=ego
This function provides nearly the functionality that I need.

----------

Social Network Application for CytoScape
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4760270/
https://github.com/BaderLab/SocialNetworkApp

----------

I learned that Christopher J Myers and his team (http://www.async.ece.utah.edu/) study biological systems.
They have knowledge and expertise in biological models in Systems Biology Markup Language.
I contacted Chris to request an informal discussion about our projects.

Tramy Nguyen from Chris Meyers' team especially works on this subject.

I know Tramy's sister, Yennhi Thi Nguyen, who is a member of the team of Jeffrey Weiss.

--------------------------------------------------
16 February 2017

----------

Before I implement any new algorithms for topological traversal, I need to understand the available algorithms in CytoScape.js thoroughly.

Neighborhood
The neighborhood of a source node includes all nodes within 1 link of the source node and links between these nodes.
A neighborhood is always for direct relationships between nodes 1 link away from eachother.
A neighborhood is an ego network with a depth of 1.

Ego Network
http://www.faculty.ucr.edu/~hanneman/nettext/C9_Ego_networks.html
An ego network is a network with center around a single ego or focal node.


----------

In topological queries or graph searches, include all links between the nodes in the selection.
Neighborhoods include links between the nodes that they include (https://en.wikipedia.org/wiki/Neighbourhood_(graph_theory)).

For a "recursive neighborhood", or search by proximity, I might be able to use a depth-first search algorithm.

----------

In the core functionality (functions), I would prefer to distinguish between selections by properties/attributes and selections by topology.
Rather than considering properties (compartment, for example) at each step of a traversal, the query will be the same by narrowing a collection by properties and then calling the topological query on that narrowed collection.

I do think that topological functions should at least be able to consider link directionality.

----------
Network Selection in Cytoscape.js

Select single element by identifier
core.getElementById("id");
core.collection("#id");
core.nodes("#id");
core.edges("#id");
core.elements("#id");
core.elements("node#id");

Selection by multiple identifiers


Selection by single attribute
core.elements("node[attribute = value]"); // From core elements, select nodes with attribute equal to value.

Selection by multiple attributes
core.elements("node[attribute1 = value1][attribute2 = value2]")

Combination of selection criteria
-elements.union()
-elements.difference()
-elements.absoluteComplement()
-elements.intersection()

--------------------------------------------------
15 February 2017

----------

I changed the organization of sets for compartments, metabolites, and genes.
Now these sets use dictionary objects with keys.

Assembly of the sets and network elements now only requires 2 minutes.
The file size of the JSON model is 6774 kilobytes.

----------

Meeting with Alexander Lex

Alex recommended organizing information for sets in dictionaries rather than in arrays.
For example, the metabolites should be in a dictionary object with identifiers as keys.
Accessing information from dictionaries by direct reference to a key is more efficient that filtering an array.

Alex recommended 3 levels of queries.
1) Query against the full model to select a subset selection.
2) Filter that subset selection to refine it further.
3) Select portions of the selection for highlighting.
For example...
1) Query against the full model to include only mitochondrial metabolites and reactions.
2) Filter this subset to include only metabolites and reactions in valine biosynthesis.
3) Select transport reactions for highlighting.

Selection of Primary Data Structure
I drew Sketch 2017-02-15_1 to compare and contrast the representations of the metabolic network with and without distinct nodes for compartmental metabolites.
This sketch illustrates challenges in representing reactions between metabolites in multiple (>1) compartments without distinct nodes for compartmental metabolites.
Representation of reversible transport reactions is a special challenge.
Topological traversal and path tracing are not intuitive without distinct nodes for compartmental metabolites.

Assembly of Sets and Network
-Checks of properties of metabolites, reactions, genes, and processes
-Discrepancies in formulas, and names of compartmental records for metabolites

Current Functionality
1) Assemble sets and network elements for a model, checking properties (3.5 minutes)
2) Saves model to user's computer (6727 kilobytes)
3) Load model from user's computer to memory
4) Initiate a CytoScape.js network from network elements
5) Organize sets, network elements, and network instance all in a model object

Future Functionality
1) Query against the model (sets and network) to obtain specific subsets
2) Visualize those subsets

----------

Model properties

-Metabolites
--Each compartmental metabolite with a record participates in at least a single reaction.

-Reactions
--Each reaction has annotation for participation from at least a single metabolite.
--Each compartmental metabolite that participates in a reaction has a corresponding record.
--Some reactions do not have annotations for genes.
--Each gene that participates in a reaction has a corresponding record.
--Some reactions do not have annotations for subsystem or metabolic process.
--Lower bound of each reaction is either 0 or -1000.
--Upper bound of each reaction is always 1000.
--Each reaction either proceeds in forward direction or is reversible.
--Some reactions involve multiple compartments in either reactants or products, such that they involve more than 2 compartments in total.
--Some reactions involve both multiple compartments (>1) in total and chemical changes in metabolites.
--Some reactions that involve multiple compartments (>1) in total are also reversible.

Genes
--Each gene with a record participates in at least a single reaction.

--------------------------------------------------
14 February 2017

----------
The program...
1) assembles sets and network elements for a model
2) saves this model to the user's computer
3) loads the model from the user's computer into memory
4) initiates a CytoScape.js network from the network elements
5) organizes sets, network elements, and network instance all in a model object

Future directions...
1) query against the model (sets and network) to obtain specific subsets
2) visualize those subsets


----------

The program reads from the original metabolic model, converted from SBML to JSON format, and assembles a new model object with sets and network elements.
I decided to store network elements under key "network_elements" within this model object without creating a CytoScape.js network instance from them at first.
Without creating a CytoScape.js network instance, it is not necessary to export the network using json() for saving.
Also, CytoScape.js adds a lot of excess information when it initiates a network and then exports to JSON.
The JSON file for the model of sets and CytoScape.js network has a file size of 12639 kilobytes.
The JSON file for the model of sets and network elements without a CytoScape.js network instance has a file size of 6727 kilobytes.

The network elements in the model are compatible for direct creation of a CytoScape.js network instance.
I will create the CytoScape.js network instance after saving the model's JSON file and then loading it for analysis.
Store the network instance under a new key in the model object for "network".

Model version of 18 January 2017 with redundant and derived properties had a JSON file size of 22071 kilobytes.
Model version of 14 February 2017 with relational sets and JSON version of CytoScape.js network had a JSON file size of 12639 kilobytes.
Model version of 14 February 2017 with relational sets and network elements had a JSON file size of 6727 kilobytes.
I think this version of 6727 kilobytes is still larger than the original metabolic model in JSON format (4000 kilobytes) due to additional information for links.

----------

Complete assembly of the model from sets and network requires about 3.5 minutes.

----------

CytoscapeJS can accept elements in a variety of formats to assemble a network.

I prefer Option 1.
Even if the user initializes a network with Option 2, Cytoscape.js assembles the network in a structure more like Option 1.

Option 1
http://blog.js.cytoscape.org/2016/06/08/glycolysis/

var network = cytoscape({
  elements: {
    edges: [
      {edge_1},
      {edge_2}
    ],
    nodes: [
      {node_1},
      {node_2},
      {node_3}
    ]
    {edge_1},
    {edge_2}
  }
}

Option 2
http://js.cytoscape.org/#notation/elements-json
http://blog.js.cytoscape.org/2016/05/24/getting-started/

var network = cytoscape({
  elements: [
    {node_1},
    {node_2},
    {node_3},
    {edge_1},
    {edge_2}
  ]
}

----------

Some reactions have long and intricate gene reaction rules.
Examples:
//HGNC:21481 or HGNC:28335 or HGNC:30866 or (HGNC:6535 and HGNC:6541) or HGNC:6535 or HGNC:6541 or HGNC:6544
//(HGNC:10606 and HGNC:121 and HGNC:2754 and (HGNC:3247 or HGNC:5213)) or (HGNC:121 and HGNC:2754 and (HGNC:3247 or HGNC:5213) and HGNC:82)

----------
Style

Pass the minimal practical amount of information between functions.
Example: function(thing.id)

List the arguments to a function in order of decreasing specificity or relevance to the function.
More specific or relevant arguments come before more general arguments.
Example: function(searchQuery, elementsToSearchAgainst)

----------


--------------------------------------------------
13 February 2017

Create set records for genes.

----------

Future quality controls

Consider confirming or correcting the charges of metabolites by calculating formal charges on the basis of their formulas.

Consider confirming that all metabolites and reactions in the model have unique identifiers.

----------

Queries
-Select all reactions and their metabolites of a specific metabolic process.

--------------------------------------------------
9 February 2017

----------

Several metabolites have discrepancies in charge, formula, and name properties in their compartmental records.
Even though those compartmental records are for the same metabolite, they have different properties.
These discrepancies are either uncertainties or errors in the model.

1. Non-Specific Formulas
For most metabolites in the model, the standard is to have a generic formula for the general metabolite.
This standard is reasonable because general metabolites are chemically identical even if they appear in different compartments.
Several metabolites have some records with specific formulas and some records with non-specific formulas.
The same metabolite can have multiple different non-specific formulas.
An example of a specific formula is "C41H77O16P2".
An example of a corresponding non-specific formula is "C26H46O16P2R".
To solve this problem, use the specific formula that does not include an "R".
If a specific formula is unavailable, use the consensus formula from the majority of matching records.

2. Compartmental Names
For most metabolites in the model, the standard is to have a generic name for the general metabolite without consideration of compartment.
An example of a general name is "pyruvate".
Several metabolites have compartmental identifiers in the name property, such that the name property is not common for all compartmental metabolite records.
An example of a compartmental name is "Mc185_3Z_6Z_9Z_12_Z_15Zcoa_m".
To solve this problem, remove the part of the name after the last underscore if that part is a single character that is identical to the record's compartment.

3. Stereoisomers
Some metabolites have records that indicate opposite stereoisomers for metabolites with the same name.
Examples of stereoisomers are "15(R)-HEPE" and "15(S)-HEPE".
Both of these metabolites have identical formulas and identifiers.
These stereoisomers are chemically distinct, and the model should accurately represent them in separate records.
However, changing their identifiers would require me to also change the identifiers within their reactions.
To solve this problem, reduce the specificity of the metabolites names so they do not specify stereoisomers.
For example, change both "15(R)-HEPE" and "15(S)-HEPE" to "15(R/S)-HEPE" (identifier "CE7081").

4. Typographical Errors
The metabolite with identifier "hedepecoa" has names "2,4,7,10,13-hexadecapentenoylcoa" and "2,4,7,10,13-hexadecapentaenoylcoa".

Only make the corrections if there are discrepancies in the properties of records for the same metabolite.

--------------------------------------------------
7 February 2017

----------
Design Decision

It would be possible to represent the Metabolic Model with a network without distinct nodes for compartmental metabolites.
This model fails to represent transport reactions intuitively.
In this model, topological traversal with consideration of compartments is very complex.
This traversal would require custom traversal algorithms in order to consider transport reactions.
Queries involving topological traversal (neighborhood proximity and shortest path) would be difficult.

It will be most intuitive and explicit to represent the Metabolic Model with a network with distinct nodes for compartmental metabolites.
To support compartment-agnostic queries, aggregation functions will be necessary to work with this representation of the model.

I propose that the representation with distinct nodes for compartmental metabolites is the most accurate.
This representation is the most explicit and versatile.
I also propose that even queries that involve compartment-agnostic (include any compartments) topological traversal should not ignore transport reactions (perhaps even in path lengths).
These transport reactions exist in reality and are relevant steps in the network.

I will need to convert to a representation without distinct nodes for compartmental metabolites for visualization.

----------

Model Structure

Options
1. Organize the network with nodes for general metabolites and reactions with directional links (indicating reaction direction and reversibility) between them.
2. Organize the network with nodes for compartmental metabolites and reactions with directional links (indicating reaction direction and reversibility) between them.

1. Organization, Query
For organization, query, and analysis of the network, either structure could work, I think.
I need to decide which main structure will be the most efficient for data organization and query.
The model structure or structure of the network 

2. Visualization
For visual representation of the network, it will definitely be important to support both structures of the network.
If the user wants to view transport reactions and cluster metabolites by compartment, then distinct nodes for compartmental metabolites will be necessary.

3. Analysis
Derived properties of the network such as degree and betweenness centrality depend on the structure of the network.
Each metabolite has distinct general degree and betweenness centrality and compartmental degree and betweenness centrality.
Degree and betweenness centrality of a compartmental metabolite (cytosolic pyruvate) is different from degree and betweenness centrality for a general metabolite (pyruvate).
It will be important to support both structures of the network.

Options
1. Organize the network with nodes for general metabolites and reactions with directional links (indicating reaction direction and reversibility) between them.
-In reality, reactions (chemical and transport) determine the compartments of metabolites.
-This structure avoids any nodes for compartmental metabolites that exist in isolation without any reactions to put them in their compartment.
-In reality, metabolites in separate compartments are chemically identical.
-Metabolomics measures metabolites in entire tissues and cells without distinction for compartments.
-This structure represents the model more concisely.
-Queries without consideration for compartments are simpler.
-This structure is vague in its representation of transport reactions, especially reversible transport reactions.
-Queries with this structure involve a lot of filter operations.

2. Organize the network with nodes for compartmental metabolites and reactions with directional links (indicating reaction direction and reversibility) between them.
-In reality, metabolites are compartmental.
-In reality, reactions are specific to compartmental metabolites.
-This structure represents the metabolic network as it behaves in reality.
-This structure represents transport reactions, especially reversible transport reactions, clearly.
-Queries with this structure involve a lot of aggregation operations.

----------
Tasks
I need to understand the task requirements so that I can select the optimal data structure and a network library with appropriate functionality.

Selection
The user can combine these selections for specificity.

1. Select metabolites and reactions by topology.
1.1. Select metabolites and reactions within a specific topological proximity to a single query metabolite or reaction.
Example: Select metabolites and reactions within 1 reaction of pyruvate.
Example: Select metabolites and reactions within 3 reactions of pyruvate.
1.2. Select metabolites and reactions within shortest paths between multiple metabolites, reactions, or combinations thereof.
Example: Select metabolites and reactions in the shortest paths between glucose and pyruvate.
Requirements: Functionality for traversal for neighborhood and shortest paths.

2. Select metabolites and reactions by property, attribute, or category.
2.1. Select metabolites and reactions by inclusion criteria.
Example: Select transport reactions and their metabolites.
Example: Select metabolites and reactions that appear or occur in the mitochondrial matrix.
2.2. Select metabolites and reactions by exclusion criteria.
Example: Select metabolites and reactions that do not appear or occur in the cytoplasm.
Requirements: Functionality for selections and filters by a variety of properties.
Structure 1: Ignore transport reactions.

3. Select metabolites and reactions by combinations of topology and property, attribute, or category.
3.1. Select metabolites and reactions by multiple topological criteria.
Example: Select metabolites and reactions in the shortest paths between glucose and pyruvate.
Then select metabolites and reactions within 1 reaction of all of these metabolites and reactions.
3.2. Select metabolites and reactions by multiple properties, attributes, or categories.
Example: Select transport reactions and their metabolites between the cytoplasm and the mitochondrial matrix.
3.3. Select metabolites and reactions by combinations of topological criteria and properties, attributes, or categories.
Example: Exclude metabolites with especially high degrees (water, proton, carbon dioxide, etc) from consideration in the network.
Then select metabolites and reactions within 1 reaction of pyruvate.
Example: Select metabolites and reactions within 1 reaction of mitochondrial pyruvate.
Example: Select metabolites and reactions within 1 reaction of pyruvate.
Then select only the metabolites and reactions that appear or occur in the mitochondrion.
Example: Select metabolites and reactions that appear or occur in the mitochondrion.
Then select only the metabolites and reactions that are also in the shortest paths between pyruvate and citrate.

Visualization

1. Represent nodes and links for the network.
Distinct nodes for compartmental metabolites or not...
2. Represents properties and attributes, including those that define sets, clearly and in multiple ways.
Spatial clusters, color highlighting
3. User interaction.

Analysis

Betweenness Centrality
Degree Centrality
Communities, clusters, and cliques in the network might be relevant and interesting, but they are probably beyond the interest of the typical user.

----------

Tests for the Metabolic Model

Metabolites
1. Do all compartmental metabolites participate in reactions?
It would be misleading to have compartmental metabolites that had no way of getting in their compartments.

Reactions
1. Do any reactions involve multiple compartments in either reactants or products, such that they involve more than 2 compartments in total?
If reactions only involve 1 or 2 compartments, then I can represent in and out compartments for reactions.
It would be difficult to represent reactions involving more than 2 compartments without distinct nodes for compartmental metabolites.
Without distinct nodes for compartmental metabolites, the reaction could indicate the compartments of all reactants and products.

- Yes
Many reactions in the model involve multiple compartments in either reactants or products, such that they involve more than 2 compartments in total.

2. Do any reactions involve both multiple compartments in total and chemical changes in metabolites?
It would be helpful to know that all reactions involve exclusively either transport events or chemical changes.

- Yes
Many reactions involve both multiple compartments and chemical changes.

3. Are any reactions involving multiple compartments in total reversible?
It would be difficult to represent reversible transport reactions without nodes for compartmental metabolites.
Without distinct nodes for compartmental metabolites, the reaction could still indicate its reversibility.

if (countReactionCompartments(reaction) > 1 && determineReversibility(reaction))

- Yes
Many reactions in the model involve multiple compartments and are also reversible.

4. Do lower_bound and upper_bound properties ever have values other than -1000, 0, or 1000?
If these bounds are either -1000, 0, or 1000, then they convey little information beyond reaction directionality and reversibility.
In that case, I could eliminate these properties and instead just keep an indicator of reversibility.

- No

5. Do any reactions have lower_bound > 0 or upper_bound < 0?
These values might suggest that the reaction primarily proceeds in the reverse direction.
Reversible reaction: lower_bound < 0 and 0 < upper_bound

- No

6. Do any reaction have upper_bound = 0?
These values might suggest that the reaction proceeds in the reverse direction.

- No

----------

--------------------------------------------------
6 February 2017

----------
The user might benefit from summaries of properties and derived properties of the model during the query stage.
For example, it might be helpful to provide a summary of the number of reactions that involve multiple compartments or that involve chemical changes.
There are a lot of options, and the user needs to know what information is available.

--------------------------------------------------
3 February 2017

----------
Network Selection in Cytoscape.js

Selection by single identifier
core.getElementById("id");
core.collection("#id");
core.nodes("#id");
core.edges("#id");
core.elements("#id");
core.elements("node#id");

Selection by multiple identifiers


Selection by single attribute
core.elements("node[attribute = value]"); // From core elements, select nodes with attribute equal to value.

Selection by multiple attributes
core.elements("node[attribute1 = value1][attribute2 = value2]")

----------

I think it is most versatile to structure the model using explicit nodes for compartmental metabolites.
Transport reactions exist to relate metabolites in separate compartments.
This representation of the metabolic network is the most comprehensive and accurate.

----------
Code Review with Team Members

Be sure to understand the needs of the user.
Be sure to consider needs of the user when making major design decisions, such as how to structure the network (with or without nodes for compartmental metabolites).

Consider the versatility and customizability of the event handlers for interaction with the network in Cytoscape.js.

Consider the versatility and customizability of the visual representation of the network.
Consider layout options.

Balance conciseness with readability and clarity in programming style.
Avoid excessive variable declarations.

--------------------------------------------------
2 February 2017

----------
Library

SigmaJS
Uses Canvas for graphics rendering.
Has few options (pretty much just force-directed) for layouts.

JSNetworkX
Supports attributes for nodes and edges.
Excellent graph analysis functionality.
Only supports visualization through D3's SVG renderer with force-directed layout.
Does not have great functionality for selection of subsets of the network.

GraphLib
I do not think that GraphLib supports attributes for nodes and links.

I decided (again) that Cytoscape.js probably offers all the functionality that I need for this project, including network organization (nodes, links, attributes), searches or queries, visualization, and interaction.
It will be helpful to have all necessary functionality in a single library so that I do not need to convert data formats and manage compatibility.
Also, Cytoscape.js is a very current project with active development and maintenance.
Also, Cytoscape.js has a lot of users and a lot of financial support.
It will be good to use a library that is familiar among my target audience.

----------
Canvas versus SVG

http://joeloughton.com/blog/web-applications/svg-vs-canvas-performance/
The author of this article tested the performance (frame rate) of multiple browsers on capable personal computers using SVG and Canvas graphics renderers.
In all cases, the canvas renderers out-perform the SVG renderers substantially with only 1000 elements in the DOM.

With nodes for metabolites and reactions and links between those nodes, it is likely that the user will need to visualize selections of the metabolic network with 1000 or more elements.
In order for the browser to support interactivity, a Canvas renderer will probably be necessary.

----------

Tests for the Metabolic Model

Do all compartmental metabolites participate in reactions?
It would be misleading to have compartmental metabolites that had no way of getting in their compartments.

Do any reactions involve multiple compartments in either reactants or products?
Do any reactions involve more than 2 compartments in total?
If reactions only involve 1 or 2 compartments, then I can represent in and out compartments for reactions.
It would be difficult to represent reactions between more than 2 compartments without nodes for compartmental metabolites.

Do any reactions involve both multiple compartments (such as transport) and chemical changes in metabolites?

Do lower_bound and upper_bound properties ever have values other than 0 or 1000?
If these bounds are either 0 or 1000, then they convey little information beyond reversibility, I think.

Are any transport reactions reversible?
It would be difficult to represent reversible transport reactions without nodes for compartmental metabolites.

----------

Model Structure

Options
1. Organize the network with nodes for general metabolites and reactions with directional links (indicating reaction direction and reversibility) between them.
2. Organize the network with nodes for compartmental metabolites and reactions with directional links (indicating reaction direction and reversibility) between them.

1. Organization, Query
For organization, query, and analysis of the network, either structure could work, I think.
I need to decide which main structure will be the most efficient for data organization and query.
The model structure or structure of the network 

2. Visualization
For visual representation of the network, it will definitely be important to support both structures of the network.
If the user wants to view transport reactions and cluster metabolites by compartment, then distinct nodes for compartmental metabolites will be necessary.

3. Analysis
Derived properties of the network such as degree and betweenness centrality depend on the structure of the network.
Each metabolite has distinct general degree and betweenness centrality and compartmental degree and betweenness centrality.
Degree and betweenness centrality of a compartmental metabolite (cytosolic pyruvate) is different from degree and betweenness centrality for a general metabolite (pyruvate).
It will be important to support both structures of the network.

Options
1. Organize the network with nodes for general metabolites and reactions with directional links (indicating reaction direction and reversibility) between them.
-In reality, reactions (chemical and transport) determine the compartments of metabolites.
-This structure avoids any nodes for compartmental metabolites that exist in isolation without any reactions to put them in their compartment.
-In reality, metabolites in separate compartments are chemically identical.
-Metabolomics measures metabolites in entire tissues and cells without distinction for compartments.
-This structure represents the model more concisely.
-Queries without consideration for compartments are simpler.
-This structure is vague in its representation of transport reactions, especially reversible transport reactions.
-Queries with this structure involve a lot of filter operations.

2. Organize the network with nodes for compartmental metabolites and reactions with directional links (indicating reaction direction and reversibility) between them.
-In reality, metabolites are compartmental.
-In reality, reactions are specific to compartmental metabolites.
-This structure represents the metabolic network as it behaves in reality.
-This structure represents transport reactions, especially reversible transport reactions, clearly.
-Queries with this structure involve a lot of aggregation operations.

--------------------------------------------------
1 February 2017

----------
Tasks
I need to understand the task requirements so that I can select the optimal data structure and a network library with appropriate functionality.

Selection
The user can combine these selections for specificity.

1. Select metabolites and reactions by topology.
1.1. Select metabolites and reactions within a specific topological proximity to a single query metabolite or reaction.
Example: Select metabolites and reactions within 1 reaction of pyruvate.
Example: Select metabolites and reactions within 3 reactions of pyruvate.
1.2. Select metabolites and reactions within shortest paths between multiple metabolites, reactions, or combinations thereof.
Example: Select metabolites and reactions in the shortest paths between glucose and pyruvate.
Requirements: Functionality for traversal for neighborhood and shortest paths.

2. Select metabolites and reactions by property, attribute, or category.
2.1. Select metabolites and reactions by inclusion criteria.
Example: Select transport reactions and their metabolites.
Example: Select metabolites and reactions that appear or occur in the mitochondrial matrix.
2.2. Select metabolites and reactions by exclusion criteria.
Example: Select metabolites and reactions that do not appear or occur in the cytoplasm.
Requirements: Functionality for selections and filters by a variety of properties.
Structure 1: Ignore transport reactions.

3. Select metabolites and reactions by combinations of topology and property, attribute, or category.
3.1. Select metabolites and reactions by multiple topological criteria.
Example: Select metabolites and reactions in the shortest paths between glucose and pyruvate.
Then select metabolites and reactions within 1 reaction of all of these metabolites and reactions.
3.2. Select metabolites and reactions by multiple properties, attributes, or categories.
Example: Select transport reactions and their metabolites between the cytoplasm and the mitochondrial matrix.
3.3. Select metabolites and reactions by combinations of topological criteria and properties, attributes, or categories.
Example: Exclude metabolites with especially high degrees (water, proton, carbon dioxide, etc) from consideration in the network.
Then select metabolites and reactions within 1 reaction of pyruvate.
Example: Select metabolites and reactions within 1 reaction of mitochondrial pyruvate.
Example: Select metabolites and reactions within 1 reaction of pyruvate.
Then select only the metabolites and reactions that appear or occur in the mitochondrion.
Example: Select metabolites and reactions that appear or occur in the mitochondrion.
Then select only the metabolites and reactions that are also in the shortest paths between pyruvate and citrate.

Visualization

1. Represent nodes and links for the network.
Distinct nodes for compartmental metabolites or not...
2. Represents properties and attributes, including those that define sets, clearly and in multiple ways.
Spatial clusters, color highlighting
3. User interaction.

Analysis

Betweenness Centrality
Degree Centrality
Communities, clusters, and cliques in the network might be relevant and interesting, but they are probably beyond the interest of the typical user.

----------

Meet with Alexander Lex

1. Problem Characterization Paper?
The "Design Study Methodology" paper (https://www.cs.ubc.ca/nest/imager/tr/2012/dsm/), describes the possibility of a paper that just characterizes a domain problem.
Alex explained that this sort of paper is a big challenge to publish and advised that we instead plan for a design study paper that includes implementation of a tool.
Alex also advised that our paper should include some sort of observation or concept that has general relevance to data visualization.

2. Alternative Structures for Metabolic Models?
In my sketches 2017-01-21_1 and 2017-01-21_2, I planned two alternative structures for the information on the metabolic model.
Structure 1 has distinct nodes for compartmental metabolites, whereas structure 2 has general metabolites.
The metabolic models from the systems biology community have distinct nodes for compartmental metabolites.
From the structure with distinct nodes for compartmental metabolites, it would be possible to represent compartments, metabolites, and subsystems as sets of these nodes (either by positional grouping/clustering or by color highlighting).

Alex advised not to use multiple, distinct structures for the data.
Instead, Alex advised to select a single structure and then derive the appropriate information according to the user's interest and interaction.
The structure will preserve all of the relevant information for the model.
Alex also advised to consider the convenience of the alternative structures for the data.
Alex advised to consider the relative convenience of filter operations (usually more convenient) versus aggregation operations (usually less convenient).
He did not mean to consider computational efficiency, but convenience of implementation.

3. Cytoscape.js or an Alternative JavaScript Library for Network Analysis and Visualization?
The library should be a robust solution, meaning that it should have appropriate maintenance and support for the lifetime of the project.
The library should provide sufficient functionality for network organization (nodes, links, properties), analysis (centrality, communities, cliques), search (traversal, properties), and visualization (styles, layouts).
Cytoscape.js meets these criteria, I think.
I think Cytoscape.js especially provides good support for attributes and properties of nodes and edges.

While some other libraries offer more extensive functionality for graph algorithms (communities, cliques), Alex advised that our project does not require complex graph algorithms.
We can implement any supplemental functionality that we need.
Alex advised that I should use Cytoscape.js if it is a convenient solution.
I should only switch to another option if Cytoscape.js is somehow insufficient.
Alex advised that Cytoscape.js's visualization with Canvas instead of SVG is suitable.
Alex also advised that we probably do not want to implement a custom layout algorithm.

4. Next Steps?
Alex advised to implement functionality for queries against the network to select appropriate subsets.
Once we can select appropriate subsets, we will have a better idea for the sorts of challenges we face in visualizing these subsets.
Alex also advised to implement functionality for visualization of these subsets.

----------
Graph Network Analysis (Traversal)

Summary of Graph Algorithms
https://neo4j.com/blog/graph-search-algorithm-basics/

Requirements
Structure for graph or network nodes and links along with properties.
Functionality to query and traverse the network, graph algorithms.
Visual representation of subsets of the network with a variety of layout options and other options.

Lists of options.
http://anvaka.github.io/graph-drawing-libraries/#/all
http://www.jsgraphs.com/

Cytoscape.js
http://js.cytoscape.org/

Vis
http://visjs.org/
https://github.com/almende/vis
-Only supports visual representation drawing, I think.

VivaGraph
https://github.com/anvaka/VivaGraphJS
-Only supports visual representation drawing, I think.

SigmaJS
http://sigmajs.org/
https://github.com/jacomyal/sigma.js
-Primarily for visual representation drawing.
-Primarily a rendering engine.
-Minimal functionality for network analysis (graph algorithms).

JSNetworkX
http://jsnetworkx.org/index.html
https://github.com/fkling/JSNetworkX
-Aim is to be full functional library for network analysis and visualization.
-Out-dated project.

GraphLib
https://github.com/cpettitt/graphlib
-Provides structure for network.
-Provides functionality for graph algorithms and traversal.
-Provides little structure for properties or attributes of nodes and links.
-Not very popular or current, perhaps because graph databases are so common.

GraphJS
https://github.com/devenbhooshan/graph.js

I searched some more for JavaScript libraries for networks or graphs. For search and analysis with graph algorithms, there are 1) JSNetworkX (http://jsnetworkx.org/), 2) Cytoscape.js (http://js.cytoscape.org/), 3) GraphLib (https://github.com/cpettitt/graphlib), and 4) GraphJS (https://github.com/devenbhooshan/graph.js). For visualization, there are 1) D3 (https://d3js.org/), 2) SigmaJS (http://sigmajs.org/), 3) Cytoscape.js (http://js.cytoscape.org/), 4) Vis (http://visjs.org/), and 5) VivaGraph (https://github.com/anvaka/VivaGraphJS).

----------

----------
Cytoscape.js Tutorials
http://blog.js.cytoscape.org/2016/05/24/getting-started/
http://blog.js.cytoscape.org/2016/06/08/glycolysis/
http://blog.js.cytoscape.org/2016/07/04/social-network/

----------

Include labels for nodes

----------
https://groups.google.com/forum/#!msg/cytoscape-discuss/bEgh67aw1BI/H0MOI7T4wBQJ
Cytoscape.js renders graphics in the Document Object Model (DOM) using a canvas renderer instead of a SVG renderer.
Apparently the team first used a SVG renderer, but switched to the canvas renderer for performance reasons.
Using Cytoscape.js with a SVG renderer would not be simple.

https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Drawing_DOM_objects_into_a_canvas
----------

----------
----------
----------

CySBML (http://apps.cytoscape.org/apps/cysbml) is a plugin for CytoScape for the importation of information from metabolic models in SBML format.
CySBML runs in Java.
It makes information from metabolic models available as networks to the CytoScape application in Java.

Cytoscape can export network information in JSON format to be accessible to Cytoscape.js.
http://wiki.cytoscape.org/Cytoscape_3/UserManual/CytoscapeJs

I do not know how clean the conversion from SBML to CytoScape and from CytoScape to Cytoscape.js would be.

It is probably more reliable to format the data myself.

----------
----------
----------

--------------------------------------------------
31 January 2017

----------
Network Visualization and Analysis with CytoScape.js
http://blog.js.cytoscape.org/2016/05/24/getting-started/

Create a CytoScape network for the entire network of the model.
Create separate CytoScape networks for selections from the master network to visualize.

----------
Cose Layout
http://www.sciencedirect.com/science/article/pii/S0020025508004799

----------
Link Directionality

Use multiple links in both directions between metabolites and reactions to represent reversible reactions.

--------------------------------------------------
30 January 2017

----------

Google JavaScript Style Guide
https://google.github.io/styleguide/jsguide.html

JSDoc
http://usejsdoc.org/
http://usejsdoc.org/tags-param.html
http://usejsdoc.org/tags-returns.html
http://usejsdoc.org/tags-type.html

Indicate parameter and return types using syntax of the Closure sytem.
https://github.com/google/closure-compiler/wiki/Types-in-the-Closure-Type-System

Specify properties of return object.
https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=jsdoc+returns+object+properties

----------

JavaScript distinguishes between primitives and objects for strings, numbers, and booleans.

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Distinction_between_string_primitives_and_String_objects

----------

Programming Style

Document concisely and clearly.

Structure code with good organization.

Follow principles of functional programming as much as is practical.
Emphasize modularity.

Avoid excessive variable creation to avoid excessive garbage collection.

Minimize the burden of passing data around.
Only pass the minimal necessary information to a function so that the function can perform sufficiently.

----------

Data Structure and Organization
Sketches 2017-01-21_1 and 2017-01-21_2 summarize the structure of the data.
These sketches are basically entity-relation diagrams.

I will have a single, dictionary-like object that I name "model".
This object will include relational tables for set information that is relevant to multiple nodes.
This object will also include the network information for nodes and links in the format that is appropriate for cytoscape.

Summary

var core = cytoscape({
    elements: [
        
        {
            group: "nodes",
            class: "reaction",
            data: {
                compartments: {
                    c: "cytoplasm",
                    m: "mitochondrion"
                },
                gene_reaction_rule: "gene_1 or gene_2 or gene_3",
                id: "reaction_identifier",
                lower_bound: 0,
                metabolites: {
                    reactant: -1,
                    product: 1
                },
                name: "reaction_name",
                products: ["product_1", "product_2"],
                reactants: ["reactant_1", "reactant_2"],
                reversibility: true,
                subsystem: "pathway_or_process",
                //type: "reaction" or "transport",
                type_reaction: true,
                type_transport: false,
                upper_bound: 1000
            }
        },

        {
            group: "nodes",
            class: "metabolite",
            data: {
                abbreviation: "cit",
                charge: -3,
                compartment: {
                    c: "cytoplasm"
                },
                compartments: {
                    c: "cytoplasm",
                    m: "mitochondrion"
                },
                formula: "C6H5O7",
                id: "cit_c",
                name: "Citrate",
                reactions: {
                    rxn1: "reaction 1",
                    rxn2: "reaction 2",
                    rxn3: "reaction 3"
                }
            }
        },

        
        {group: "edges", data: {id: "ab", source: "a", target: "b", weight: 10}},
        {group: "edges", data: {id: "bc", source: "b", target: "c", weight: 15}},
        {group: "edges", data: {id: "ac", source: "a", target: "c", weight: 20}}
        
    ]

});



----------

Gephi
https://gephi.org/
Gephi is a stand-alone program for graph analysis and visualization.
It might be an interesting model for useful functionality for graph analysis and visualization.

----------

"Design Study Methodology: Reflections from the Trenches and the Stacks"
2012
https://www.cs.ubc.ca/nest/imager/tr/2012/dsm/
"
Our definitions imply that a design study paper does not require a novel algorithm or technique contribution.
Instead, a proposed visualization design is often a well-justified combination of existing techniques.
While a design study paper is the most common outcome of a design study, other types of research papers are also possible such as technique or algorithm, evaluation, system, or even a pure problem characterization paper.
"

Would it be advantageous for us to develop and publish a paper characterizing the domain-specific needs of metabolism research as they relate to information visualization?

--------------------------------------------------
21 January 2017

Data Organization and Structure

----------
----------
----------
Data Structure
Represent compartmental metabolites with distinct nodes

"model"

-"sets": The properties that define sets of nodes
--"compartments"
---Model Properties or Attributes
----"id": Identifier for the compartment
----"name": Name of the compartment
---Derived Properties or Attributes
----"count_reactions": Count of reactions in each compartment (c: 3000, m: 1000)
----"count_metabolites": Count of metabolites in each compartment (c: 3000, m: 1000)
----"metabolites": Metabolites that appear in the compartment
----"reactions": Reactions that occur in the compartment
----"share_metabolites": Count of metabolites shared with each other compartment
----"share_transports": Count of transports shared with each other compartment
--"metabolites"
---Model Properties or Attributes
----"charge": Chemical charge of the metabolite
----"formula": Chemical formula of the metabolite
----"id": Identifier for the metabolite (Example: "pyr")
----"name": Name of the metabolite (Example: "pyruvate")
---Derived Properties or Attributes
----"centrality_betweenness": The betweenness centrality of the metabolite without restriction by compartment
----"centrality_betweenness_compartment": The betweenness centrality of the metabolite within each compartment
----"centrality_degree": The degree centrality of the metabolite without restriction by compartment
----"centrality_degree_compartment": The degree centrality of the metabolite within each compartment
----"compartments": Compartments in which the metabolite appears
----"count_reactions_compartment": Count of reactions in which the metabolite participates in each compartment
----"reactions": Reactions in which the metabolite participates in all compartments.
--"processes": The pathways or subsystems of the metabolic network
---Model Properties or Attributes
----"name"
---Derived Properties or Attributes
----"count_reactions": Count of reactions in each process
----"compartments": Compartments in which reactions occur in each process

-"network": The primary graph representation of nodes and links
--"nodes"
---"metabolites"
----Model Properties or Attributes
-----"compartment": Specific compartment of the metabolite node (Example: "c")
-----"id": Identifier for metabolite node ("pyr_c")
-----"metabolite": Identifier for metabolite ("pyr")
----Derived Properties or Attributes
----"centrality_betweenness": The betweenness centrality of the metabolite within its compartment
----"centrality_degree": The degree centrality of the metabolite within its compartment
----"reactions": Reactions in which the metabolite participates within its compartment
---"reactions"
----Model Properties or Attributes
-----"gene_reaction_rule"
-----"id"
-----"lower_bound"
-----"metabolites"
-----"name"
-----"subsystem"
-----"upper_bound"
----Derived Properties or Attributes
-----"chemicals_change": Whether or not the reactants and products differ chemically
-----"compartments": The compartments of metabolites in the reaction
-----"compartments_change": Whether or not the compartments of reactants and products differ
-----"multiple_compartments": Whether or not the reaction involves metabolites in multiple compartments
-----"products": Metabolites that are products in the reaction
-----"reactants": Metabolites that are reactants in the reaction
-----"reversibility": Whether or not the reaction is reversible
--"edges"
---"id": Source identifier underscore target identifier
---"source": Link source is node for reactant metabolite or node for reaction. Reversible reactions also have links in reverse direction.
---"target": Link target is node for reaction or node for product metabolite. Reversible reactions also have links in reverse direction.

----------
----------
----------

Data Structure
Represent metabolites as nodes without compartmental distinction
Omit reactions that represent transport events (reactions with multiple compartments)

"model"

-"sets": The properties that define sets of nodes
--"compartments"
---Model Properties or Attributes
----"id": Identifier for the compartment
----"name": Name of the compartment
---Derived Properties or Attributes
----"count_reactions": Count of reactions in each compartment (c: 3000, m: 1000)
----"count_metabolites": Count of metabolites in each compartment (c: 3000, m: 1000)
----"metabolites": Metabolites that appear in the compartment
----"reactions": Reactions that occur in the compartment
----"share_metabolites": Count of metabolites shared with each other compartment
----"share_transports": Count of transports shared with each other compartment
--"processes": The pathways or subsystems of the metabolic network
---Model Properties or Attributes
----"name"
---Derived Properties or Attributes
----"count_reactions": Count of reactions in each process
----"compartments": Compartments in which reactions occur in each process

-"network": The primary graph representation of nodes and links
--"nodes"
---"metabolites"
----Model Properties or Attributes
----"charge": Chemical charge of the metabolite
----"formula": Chemical formula of the metabolite
----"id": Identifier for the metabolite node (Example: "pyr")
----"name": Name of the metabolite (Example: "pyruvate")
----Derived Properties or Attributes
----"centrality_betweenness": The betweenness centrality of the metabolite without restriction by compartment
----"centrality_betweenness_compartment": The betweenness centrality of the metabolite within each compartment
----"centrality_degree": The degree centrality of the metabolite without restriction by compartment
----"centrality_degree_compartment": The degree centrality of the metabolite within each compartment
----"compartments": Compartments in which the metabolite appears
----"count_reactions_compartment": Count of reactions in which the metabolite participates in each compartment
----"reactions": Reactions in which the metabolite participates in all compartments
---"reactions"
----Model Properties or Attributes
-----"compartment": The compartment of metabolites in the reaction... Due to the restriction of this representation, all reactions will have a single compartment
-----"gene_reaction_rule"
-----"id"
-----"lower_bound"
-----"metabolites"
-----"name"
-----"subsystem"
-----"upper_bound"
----Derived Properties or Attributes
-----"chemicals_change": Whether or not the reactants and products differ chemically
-----"products": Metabolites that are products in the reaction
-----"reactants": Metabolites that are reactants in the reaction
-----"reversibility": Whether or not the reaction is reversible
--"edges"
---"id": Source identifier underscore target identifier
---"source": Link source is node for reactant metabolite or node for reaction. Reversible reactions also have links in reverse direction.
---"target": Link target is node for reaction or node for product metabolite. Reversible reactions also have links in reverse direction.

Note

Betweenness Centrality and shortest paths will be most informative with consideration of directionality in the network.
The CytoScapeJS function "eles.betweennessCentrality()" can either consider directionality or ignore it.

If I use multiple links to represent directionality in reversible reactions, then I might need to account for these multiple edges in calculations of node degree.
The CytoScapeJS function "edges.parallelEdges()" might be useful in this situation.
Actually, I think that if a metabolite participates in a reversible reaction, then its degree centrality should rightfully reflect that.


----------
----------
----------

--------------------------------------------------
19 January 2017

----------
----------
----------

----------
----------
----------

Modules

http://exploringjs.com/es6/ch_modules.html
No browsers support export and import of modules in JavaScript.
For now, I should probably just use scripts.

----------
----------
----------

Dimensions of the metabolic network
1) Entities are compartmental metabolites (compartment-specific) and reactions.
2) Entities are metabolites (not compartment-specific) and reactions.
3) Entities are compartments with relations between them (shared metabolites, transports).
4) Entities are subsystems or pathways.

I do not think that the parent-child compound nodes in CytoScapeJS would be very useful to represent these sets.
I think it makes more sense to treat these sets as sets and to define properties of them.

Maybe the user could choose at run-time between a few options of how to represent the network.
The most important distinction is whether or not to treat compartmental metabolites as distinct nodes.

In that case, there will be different functions for assembling the network.
Modular functions for deriving additional properties and attributes will be helpful.

----------
----------
----------

Separate network assembly from derivation of properties.

1) Assemble network (using the information already in the model)

2) Derive properties (including network theory properties like degree and betweenness centrality)

Derive properties or attributes in advance or as they become necessary?
Only derive properties in advance if they will benefit interactive queries and such later.
Otherwise have the functionality available to derive these properties on-the-fly.
Balance priorities.
Derive attributes as they become necessary to keep the data base concise or derive attributes in advance to make the program more interactive.

T Cameron Waller to Ethan Kerzner
"
I'm balancing the pros and cons... 1) Derive attributes as they become necessary to keep the database concise 2) Derive attributes in advance and store in database to make the program more interactive. I think 1) is preferable in my situation unless the program's performance suffers.

 2) would increase the size of my data dramatically, and the user would have to download and/or support it in memory.

 
Do you agree?
"
Ethan Kerzner to T Cameron Waller
"
Hard to say. It depends on the size of the attributes and computational complexity of deriving them.
I think you're asking the wrong questions for a research application though.
I would look at:

-what is easier and faster for you to implement?
-if it turns out there's a bug in how you're deriving the attributes, which way will be easier to debug and modify?
-if you want to add additional attributes, which one would be easier to extend?


The answers to these are personal preference based in your workflow.
"
T Cameron Waller to Ethan Kerzner
"
I think that's good advice. Thank you. ... By the way, the goal of my project is a blend of a research prototype and a functional tool. That goal shifts priorities a little.
"
Ethan Kerzner to T Cameron Waller
"
You bet!


Beware though: vis tools often need many iterations before they are actually useful. And i'd say being useful is a prerequisite to having a deployable tool. Trying to productize software or optimize it prematurely can be a huge time sink. And very disheartening if you have to change directions of your application. Just my 2 cents though.


"

Design Decision

Simplify the data.
Store in the data properties and attributes that describe the entities and relations of the network.
Store the minimal data to describe the network completely.
Derive additional properties and attributes as they become necessary for queries or summaries.
Only derive properties and attributes in advance and store in the data if they are necessary to sustain interactive performance of the program.

Consider deriving attributes and properties at the time of query execution to define subnetworks.

Separating network assembly from property derivation will make the program more modular and flexible.
Separating property derivation into distinct processes will also make the program more modular and flexible.

Derived properties and attributes will only become necessary later on in the development process for advanced queries and summaries.
For now, the fundamental information about the network is the priority.

----------
----------
----------

Data Structure
Represent compartmental metabolites with distinct nodes

"model"

-"sets": The properties that define sets of nodes
--"compartments"
---Model Properties or Attributes
----"id": Identifier for the compartment
----"name": Name of the compartment
---Derived Properties or Attributes
----"count_reactions": Count of reactions in each compartment (c: 3000, m: 1000)
----"count_metabolites": Count of metabolites in each compartment (c: 3000, m: 1000)
----"metabolites": Metabolites that appear in the compartment
----"reactions": Reactions that occur in the compartment
----"share_metabolites": Count of metabolites shared with each other compartment
----"share_transports": Count of transports shared with each other compartment
--"metabolites"
---Model Properties or Attributes
----"charge": Chemical charge of the metabolite
----"formula": Chemical formula of the metabolite
----"id": Identifier for the metabolite (Example: "pyr")
----"name": Name of the metabolite (Example: "pyruvate")
---Derived Properties or Attributes
----"centrality_betweenness": The betweenness centrality of the metabolite without restriction by compartment
----"centrality_betweenness_compartment": The betweenness centrality of the metabolite within each compartment
----"centrality_degree": The degree centrality of the metabolite without restriction by compartment
----"centrality_degree_compartment": The degree centrality of the metabolite within each compartment
----"compartments": Compartments in which the metabolite appears
----"count_reactions_compartment": Count of reactions in which the metabolite participates in each compartment
----"reactions": Reactions in which the metabolite participates in all compartments.
--"processes": The pathways or subsystems of the metabolic network
---Model Properties or Attributes
----"name"
---Derived Properties or Attributes
----"count_reactions": Count of reactions in each process
----"compartments": Compartments in which reactions occur in each process

-"network": The primary graph representation of nodes and links
--"nodes"
---"metabolites"
----Model Properties or Attributes
-----"compartment": Specific compartment of the metabolite node (Example: "c")
-----"id": Identifier for metabolite node ("pyr_c")
-----"metabolite": Identifier for metabolite ("pyr")
----Derived Properties or Attributes
----"centrality_betweenness": The betweenness centrality of the metabolite within its compartment
----"centrality_degree": The degree centrality of the metabolite within its compartment
----"reactions": Reactions in which the metabolite participates within its compartment
---"reactions"
----Model Properties or Attributes
-----"gene_reaction_rule"
-----"id"
-----"lower_bound"
-----"metabolites"
-----"name"
-----"subsystem"
-----"upper_bound"
----Derived Properties or Attributes
-----"chemicals_change": Whether or not the reactants and products differ chemically
-----"compartments": The compartments of metabolites in the reaction
-----"compartments_change": Whether or not the compartments of reactants and products differ
-----"multiple_compartments": Whether or not the reaction involves metabolites in multiple compartments
-----"products": Metabolites that are products in the reaction
-----"reactants": Metabolites that are reactants in the reaction
-----"reversibility": Whether or not the reaction is reversible
--"edges"
---"id": Source identifier underscore target identifier
---"source": Link source is node for reactant metabolite or node for reaction. Reversible reactions also have links in reverse direction.
---"target": Link target is node for reaction or node for product metabolite. Reversible reactions also have links in reverse direction.

----------
----------
----------

Data Structure
Represent metabolites as nodes without compartmental distinction
Omit reactions that represent transport events (reactions with multiple compartments)

"model"

-"sets": The properties that define sets of nodes
--"compartments"
---Model Properties or Attributes
----"id": Identifier for the compartment
----"name": Name of the compartment
---Derived Properties or Attributes
----"count_reactions": Count of reactions in each compartment (c: 3000, m: 1000)
----"count_metabolites": Count of metabolites in each compartment (c: 3000, m: 1000)
----"metabolites": Metabolites that appear in the compartment
----"reactions": Reactions that occur in the compartment
----"share_metabolites": Count of metabolites shared with each other compartment
----"share_transports": Count of transports shared with each other compartment
--"processes": The pathways or subsystems of the metabolic network
---Model Properties or Attributes
----"name"
---Derived Properties or Attributes
----"count_reactions": Count of reactions in each process
----"compartments": Compartments in which reactions occur in each process

-"network": The primary graph representation of nodes and links
--"nodes"
---"metabolites"
----Model Properties or Attributes
----"charge": Chemical charge of the metabolite
----"formula": Chemical formula of the metabolite
----"id": Identifier for the metabolite node (Example: "pyr")
----"name": Name of the metabolite (Example: "pyruvate")
----Derived Properties or Attributes
----"centrality_betweenness": The betweenness centrality of the metabolite without restriction by compartment
----"centrality_betweenness_compartment": The betweenness centrality of the metabolite within each compartment
----"centrality_degree": The degree centrality of the metabolite without restriction by compartment
----"centrality_degree_compartment": The degree centrality of the metabolite within each compartment
----"compartments": Compartments in which the metabolite appears
----"count_reactions_compartment": Count of reactions in which the metabolite participates in each compartment
----"reactions": Reactions in which the metabolite participates in all compartments
---"reactions"
----Model Properties or Attributes
-----"compartment": The compartment of metabolites in the reaction... Due to the restriction of this representation, all reactions will have a single compartment
-----"gene_reaction_rule"
-----"id"
-----"lower_bound"
-----"metabolites"
-----"name"
-----"subsystem"
-----"upper_bound"
----Derived Properties or Attributes
-----"chemicals_change": Whether or not the reactants and products differ chemically
-----"products": Metabolites that are products in the reaction
-----"reactants": Metabolites that are reactants in the reaction
-----"reversibility": Whether or not the reaction is reversible
--"edges"
---"id": Source identifier underscore target identifier
---"source": Link source is node for reactant metabolite or node for reaction. Reversible reactions also have links in reverse direction.
---"target": Link target is node for reaction or node for product metabolite. Reversible reactions also have links in reverse direction.

Note

Betweenness Centrality and shortest paths will be most informative with consideration of directionality in the network.
The CytoScapeJS function "eles.betweennessCentrality()" can either consider directionality or ignore it.

If I use multiple links to represent directionality in reversible reactions, then I might need to account for these multiple edges in calculations of node degree.
The CytoScapeJS function "edges.parallelEdges()" might be useful in this situation.
Actually, I think that if a metabolite participates in a reversible reaction, then its degree centrality should rightfully reflect that.

----------
----------
----------

Data Structure and Organization

Relational Data Model and Graph Data Model

https://neo4j.com/developer/graph-database/
https://neo4j.com/developer/guide-data-modeling/
https://neo4j.com/developer/graph-db-vs-rdbms/

The Relation Data Model normalizes data, avoiding redundancy.
Complex relations require complex joins.
Denormalization is sometimes a solution to simplify joins.
Denormalization introduces redundancy and complicates update and maintenance.

The Graph Data Model emphasizes relations between entities.

It is practical to organize data using a blend of the Relational Data Model and the Graph Data Model.
Avoid redundancy.

I think it will be advantageous to include in the data properties that I derive.

Plan

Use a blend of the Relational Data Model and the Graph Data Model.
Represent both metabolites and reactions as nodes in a graph, since they are both entities with properties and sets.
Store information that is specific to graph nodes as properties of those nodes in the graph.
Include information that I derive.
Store supplemental information in relational tables that accompany the graph.

----------
----------
----------

Degree and betweenness centralities of metabolites might inform the selection of specific metabolites as promising diagnostic markers.
Metabolites with greater betweenness centralities have greater influence on the network.
These metabolites will be especially useful targets for profiling with metabolomics.

----------
----------
----------

--------------------------------------------------
18 January 2017

----------
----------
----------

Work through how to perform all relevant types of queries.

Figure out how to handle a list of discontinuous subnetworks that result from queries.

Selection Functionality
network.getElementById()
network.$(selector)
network.elements(selector)
network.nodes(selector)
network.edges(selector)
network.filter(selector)
network.filter(function(index, element))

network.filter(function (index, element) {
  if (element.isNode() && element.data("weight") > 50 ) {
    return true;
  }
  return false;
});

network.elements.size()
network.elements.eq()

network.elements.clone()
network.elements.data()
network.element.id()




Read on from "Collection"



----------
----------
----------

Data Organization

I think it will be helpful to associate with nodes all the properties (including those I derive) that might be useful in queries.

----------
----------
----------

Design Decision

Compartments separate portions of the metabolic network.
Metabolites participate in the metabolic network within their specific compartment.
Pyruvate in the cytosol participates in different reactions than does pyruvate in the mitochondrion.
Transport events between compartments are real events that matter.

Treating compartmental metabolites as distinct entities in the metabolic network is accurately representative of how these metabolites behave.
Still, pyruvate in the mitochondrion is chemically identical to pyruvate in the cytosol.
It might be useful to represent the metabolic network in such a way as to accurately portray the compartmental and general properties of metabolites.
Keep distinct nodes for compartmental metabolites, but also summarize the behavior of the chemical species as a whole between multiple compartments.

----------
----------
----------

Meeting with Alexander Lex

Goals
1) Organize the network's information concisely and efficiently.
-Avoid replication of information.
-All information that is specific to a node should reside with the node.
--This information includes values that I derive in pre-processing.
-Do not replicate information such as the human-readable descriptions of reactions.
--Store this information in some sort of dictionary reference.
-Develop look-up functions to access the appropriate information for a node.
-Organize the reference information within a separate portion of a master dictionary.
-Structure:
--model
---metabolites
----Information that is general to a metabolite.
---reactions
----Information that is general to a reaction.
---network
----Information that is specific to nodes within the network.
----Information that is necessary for queries against the network.
-How reasonable is it to use look-up functions when querying the network in CytoScapeJS?
2) Learn to query the network in CytoScapeJS.
3) Learn CytoScapeJS options for network visualization.
-Visualize network in CytoScapeJS or in D3 if more favorable.

Current Model
Metabolites are nodes.
Reactions are nodes.
Links are between metabolites and reactions.

Optional Model
Metabolites are nodes.
Reactions are links between two nodes.
Links are between reactant metabolites and reaction in node.
Links are between product metabolites and reaction out node.

Optional model is favorable for visualization (at least with D3) because it orients a reaction's arrow appropriately.

Current model is appropriate for querying and analyzing the network.
Continue to use the current model for querying, analyzing, and visualizing the network for now.

----------
----------
----------

Access files from client's computer.

"Using files from web applications"
https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications


----------
----------
----------

The browser stalls substantially after I print the entire CytoScapeJS network to the console.
Maybe I can improve performance by not printing the network to the console.

It might also be beneficial to save the network information to file so that I can then load it directly from file rather than waiting for assembly after every refresh.
Save network information to file.
JSON.stringify(network.json())

http://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser
http://stackoverflow.com/questions/16329293/save-json-string-to-client-pc-using-html5-api
http://stackoverflow.com/questions/3665115/create-a-file-in-memory-for-user-to-download-not-through-server

Uniform Resource Identifier (URI)

----------
----------
----------

eles.filter()
network.nodes().filter();
network.elements.filterFn(function (element) {
    return element.data.id === "pyr_c"
})

eles.closedNeighborhood()

----------
----------
----------

Collect nodes and links into a network in CytoScapeJS.

----------
----------
----------

I completed the implementation for assembly of nodes for reactions and metabolites and links for reactions.
These three assemblies are currently separate.
These assemblies require about 4.5 minutes with access to the complete resources of my computer (Processor: 2.0 GHz, Memory: 3.8 GB).

----------
----------
----------

--------------------------------------------------
17 January 2017


----------
----------
----------

Create links!


----------
----------
----------

Document the properties for reactions and metabolites.
Include the properties from the model and the properties that I derived.
Describe what the properties are in specific detail.

----------
----------
----------

Additional Properties to Derive from the Metabolic Network

Metabolite
-"centrality_degree": Calculate once the network is in CytoScapeJS.
-"centrality_betweenness": Calculate once the network is in CytoScapeJS.

----------
----------
----------

--------------------------------------------------
16 January 2017

----------
----------
----------

The user needs to distinguish between reactions that involve chemical changes and those that involve transport events.
Reactions with chemical changes have different chemical species in their reactants and products.
Reactions with transport events have reactants and products with different compartments.
I do not know for certain, but some reactions might involve a mixture of chemical changes and transport events.
Maybe an enzyme catalyzes a reaction between metabolites on opposite sides of a membrane.
Maybe some chemical change accompanies a transport event.

I decided to determine several indicators that relate to this distinction between chemical changes and transport events.
Rather than relying on a single definition, the user can choose very specifically.
As I study the model more, I will realize what the possibilities are in mixtures of chemical changes accompanying transport events.

----------
----------
----------

I wondered if a tool was already available to convert information from metabolic models in SBML format to a format compatible with CytoScape.

CySBML (http://apps.cytoscape.org/apps/cysbml) is a plugin for CytoScape for the importation of information from metabolic models in SBML format.
CySBML runs in Java.
It makes information from metabolic models available as networks to the CytoScape application in Java.

I think that CySBML is not appropriate for making information from metabolic models in SBML format available to CytoScapeJS in JSON format.

I think that there is not a tool available to convert information from SBML format to a format compatible for CytoScapeJS.

----------
----------
----------


--------------------------------------------------
13 January 2017

----------
----------
----------

----------
----------
----------

Design Decision

The current representation of the metabolic network in models includes distinct entities for a single metabolite in separate compartments.
Cytosolic pyruvate is a separate entity from mitochondrial pyruvate.
While the metabolite (pyruvate) is chemically identical in both compartments, its behavior in metabolism depends on its compartment.
Compartmentalization influences metabolism in such a way that it is most accurate to treat metabolites in separate compartments as separate entities.

It would be possible to represent the metabolic network without treating metabolites separately for separate compartments.
This representation would match metabolomics data, since metabolomics does not distinguish between compartments.
This representation could still include information on the compartments or sets to which the metabolite belongs.
As reactions and transports are specific to compartments, I do not think that this representation of the metabolic network would be accurate.
At best, a representation without compartment-specific metabolites would be a simplification.

Perhaps the user can decide whether or not to treat metabolites in separate compartments as distinct entities.
The information for the metabolic network should include compartment information and should include separate entities for separate compartments (as current metabolic models do already).
The simplification ignoring compartments could modify the metabolic network, effectively collapsing it.

----------
----------
----------

Organize or structure data to be compatible with CytoScapeJS.
Preserve many aspects of the information for metabolites and reactions from the model.
Derive additional properties from the information in the model.
Omit information that is redundant or irrelevant.

Preserve

Derive
-reaction
--compartments
--products
--reactants
--reversibility
--type_reaction
--type_transport
-metabolite
--
-links
--

Omit
-"genes" array
--This array contains objects for individual genes.
--The only information is the gene's identifier from the HUGO Gene Nomenclature Committee.
--This information is already available from gene reaction rules for reactions.
-"notes" object for each reaction
--This object stores notes that seem irrelevant other than for model construction.

Information within the object for genes is redundant and useless.
The notes for reactions are useless and irrelevant.

For reactions, keep reactants and products within the same "metabolites" object for simple iteration.
Also separate reactans and metabolites into separate arrays.

The model defines compartment most definitively for metabolites.
Reactions do not have a definitive compartment.
Reactions use compartmental metabolites.
I will derive compartments of reactions according to the compartments of their metabolites.
Transport reactions will have 2 compartments, so I will store compartments in an array.

I will derive whether or not a reaction is a transport event or a chemical reaction.
I will need to consider whether or not compartments of reactants and products are different.
Chemical species of reactants and products might be different in some transport reactions.
For example, the malate/aspartate shuttle might carry out a chemical reaction during transport.
I do not know for sure.
A reaction might be able to be both a chemical reaction and a transport event.

Summary

var core = cytoscape({
    elements: [
        
        {
            group: "nodes",
            class: "reaction",
            data: {
                compartments: {
                    c: "cytoplasm",
                    m: "mitochondrion"
                },
                gene_reaction_rule: "gene_1 or gene_2 or gene_3",
                id: "reaction_identifier",
                lower_bound: 0,
                metabolites: {
                    reactant: -1,
                    product: 1
                },
                name: "reaction_name",
                products: ["product_1", "product_2"],
                reactants: ["reactant_1", "reactant_2"],
                reversibility: true,
                subsystem: "pathway_or_process",
                //type: "reaction" or "transport",
                type_reaction: true,
                type_transport: false,
                upper_bound: 1000
            }
        },

        {
            group: "nodes",
            class: "metabolite",
            data: {
                abbreviation: "cit",
                charge: -3,
                compartment: {
                    c: "cytoplasm"
                },
                compartments: {
                    c: "cytoplasm",
                    m: "mitochondrion"
                },
                formula: "C6H5O7",
                id: "cit_c",
                name: "Citrate",
                reactions: {
                    rxn1: "reaction 1",
                    rxn2: "reaction 2",
                    rxn3: "reaction 3"
                }
            }
        },

        
        {group: "edges", data: {id: "ab", source: "a", target: "b", weight: 10}},
        {group: "edges", data: {id: "bc", source: "b", target: "c", weight: 15}},
        {group: "edges", data: {id: "ac", source: "a", target: "c", weight: 20}}
        
    ]

});

----------
----------
----------

Immutability is an important principle in functional programming.
It is also important to preserve the integrity of data.
It is important to consider when JavaScript copies or clones by reference or by value.

http://stackoverflow.com/questions/6605640/javascript-by-reference-vs-by-value
nrabinowitz
7 July 2011
"
Javascript is always pass by value, but when a variable refers to an object (including arrays), the "value" is a reference to the object.
Changing the value of a variable never changes the underlying primitive or object, it just points the variable to a new primitive or object.
However, changing a property of an object referenced by a variable does change the underlying object.
"

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
Object.assign()
This method does not handle deep cloning by itself.

JSON.parse(JSON.stringify())
This method eliminates reference problems and can handle deep cloning.


----------
----------
----------

map
filter
reduce
concat
apply

----------
----------
----------

http://reactivex.io/learnrx/

Essential functions for collections
map (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
filter (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
reduce
concatAll
zip

----------
----------
----------

Functional Programming for User Interfaces
Conversation with Annie Cherkaev

https://stackoverflow.com/questions/2672791/is-functional-gui-programming-possible
"current GUI programming is all about IO and side effects, so purely functional programming isn't possible with most current frameworks."
"is it possible to have a functional approach to GUI programming? ... Or is the solution to just use a hybrid approach, with OOP for the GUI parts and FP for the lobic?"

Functional Reactive Programming

--------------------------------------------------
12 January 2017


https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0#.x1mknemzm

http://reactivex.io/learnrx/

Essential functions
map (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
filter (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
reduce
concatAll
zip

http://eloquentjavascript.net/1st_edition/chapter6.html



----------
----------
----------

Design Decision

Data

A Functional Programming paradigm keeps data separate from functionality in the program.
The data is also immutable, favoring preservation of the data.
Rather than having mutable class attributes, the program will use immutable variables.
It will be necessary to avoid copying objects by reference instead of copying their values.
I will organize functions in modules.
Each module will have definitions of concise functions.
There will be function composition and recursion.
Maybe each module can also have a "main" function that serves as a master script for the functionality of that module.
These functions will try to follow a more declarative, rather than imperative, style.

Interface

To support events in dynamic interaction, the elements of the Document Object Model (DOM) are mutable objects.
The same check box alternatively switches between "true" and "false" states.
A drop-down menu element has a different state depending on which value the user selects.
For animation with D3, the same rows of a table change positions in a sort.
The elements of the DOM themselves are mutable objects.
Even so, it is possible and practical to control these objects functionally.
The D3 and React libraries for JavaScript facilitate interaction between JavaScript and elements of the DOM.
HTML event listeners also facilitate this interaction.

Preferentially, JavaScript control of the DOM interface will be as functional as is practical, following a Functional Programming Paradigm.
If necessary or convenient, only the aspects of the program that interact most directly with elements of the DOM will be object instances of classes according to an Object-Oriented Programming paradigm.
These object instances might possess attributes that support state mutation.

Try to keep non-pure functions with side effects separate from the rest of the program.
For example, keep all functions that control the DOM separate.


----------
----------
----------

Future Directions

1) The metabolic model does not include sufficient information to match with data from proteomics data and transcriptomics data.
It will be necessary to supplement the model with appropriate identifiers for transcripts and proteins.

2) It will be interesting to supplement the metabolic model with additional information about proteins (cofactors, protein-protein interactions).

----------
----------
----------

I need to convert information from the metabolic model in JSON format to a format that is compatible with CytoScapeJS.

Reactions
Iterate over reactions.
Create a new object for each reaction that matches CytoScapeJS format.
Create "group" key with value "nodes".
Create "class" key with value "reaction".
Create "data" object with most of the same keys and values as the original reaction object.
Within this "data" object create "compartment" and "compartment_brief" keys with appropriate values.
It will be necessary to reference the "compartments" object in order to determine full names for compartments.
Within the "data" object create "reactant" and "product" keys with appropriate values from the original "metabolites" object.
Omit the "notes" object from the new "data" object.

Set group to "nodes".
Set class to "reaction".
Set data object to the reaction object.

Links
Iterate over reactions.
Set group to "edges".
Set data object...
-custom identifier (reaction-identifier_metabolite-identifier).
-source... I think the source should always be the reaction (both for reactant and product metabolites)
-target... the metabolite (reactant or product)
-weight... no need for weight unless I want to visualize the network with CytoScape

Metabolites
Iterate over metabolites.
Create a new object for each metabolite that matches CytoScapeJS format.
Create "group" key with value "nodes".
Create "class" key with value "metabolite".
Create "data" object with most of the same keys and values as the original metabolite object.
Within this "data" object create "compartment" and "compartment_brief" keys with appropriate values.
It will be necessary to reference the "compartments" object in order to determine full names for compartments.

The information from the genes object is unnecessary.
This information only has identifiers anyway (HGNC).
http://www.genenames.org/

----------
----------
----------

Data Structure in CytoScapeJS
Consult the Cola Demo to learn how to structure the network information in the CytoscapeJS model.

Summary

var core = cytoscape({
    elements: [
        
        {group: "nodes", class: "metabolite", data: {id: "a", property: "value1"}},
        {group: "nodes", class: "metabolite", data: {id: "b", property: "value2"}},
        {group: "nodes", class: "reaction", data: {id: "c", property: "value3"}},
        
        {group: "edges", data: {id: "ab", source: "a", target: "b", weight: 10}},
        {group: "edges", data: {id: "bc", source: "b", target: "c", weight: 15}},
        {group: "edges", data: {id: "ac", source: "a", target: "c", weight: 20}}
        
    ]

});

----------
----------
----------

Demonstration Cola.js Gene-Gene Graph

cy = cytoscape({
  container: document.getElementById('cy'),
  
  style: [{"selector":"core","style":{"selection-box-color":"#AAD8FF","selection-box-border-color":"#8BB0D0","selection-box-opacity":"0.5"}},{"selector":"node","style":{"width":"mapData(score, 0, 0.006769776522008331, 20, 60)","height":"mapData(score, 0, 0.006769776522008331, 20, 60)","content":"data(name)","font-size":"12px","text-valign":"center","text-halign":"center","background-color":"#555","text-outline-color":"#555","text-outline-width":"2px","color":"#fff","overlay-padding":"6px","z-index":"10"}},{"selector":"node[?attr]","style":{"shape":"rectangle","background-color":"#aaa","text-outline-color":"#aaa","width":"16px","height":"16px","font-size":"6px","z-index":"1"}},{"selector":"node[?query]","style":{"background-clip":"none","background-fit":"contain"}},{"selector":"node:selected","style":{"border-width":"6px","border-color":"#AAD8FF","border-opacity":"0.5","background-color":"#77828C","text-outline-color":"#77828C"}},{"selector":"edge","style":{"curve-style":"haystack","haystack-radius":"0.5","opacity":"0.4","line-color":"#bbb","width":"mapData(weight, 0, 1, 1, 8)","overlay-padding":"3px"}},{"selector":"node.unhighlighted","style":{"opacity":"0.2"}},{"selector":"edge.unhighlighted","style":{"opacity":"0.05"}},{"selector":".highlighted","style":{"z-index":"999999"}},{"selector":"node.highlighted","style":{"border-width":"6px","border-color":"#AAD8FF","border-opacity":"0.5","background-color":"#394855","text-outline-color":"#394855","shadow-blur":"12px","shadow-color":"#000","shadow-opacity":"0.8","shadow-offset-x":"0px","shadow-offset-y":"4px"}},{"selector":"edge.filtered","style":{"opacity":"0"}},{"selector":"edge[group=\"coexp\"]","style":{"line-color":"#d0b7d5"}},{"selector":"edge[group=\"coloc\"]","style":{"line-color":"#a0b3dc"}},{"selector":"edge[group=\"gi\"]","style":{"line-color":"#90e190"}},{"selector":"edge[group=\"path\"]","style":{"line-color":"#9bd8de"}},{"selector":"edge[group=\"pi\"]","style":{"line-color":"#eaa2a2"}},{"selector":"edge[group=\"predict\"]","style":{"line-color":"#f6c384"}},{"selector":"edge[group=\"spd\"]","style":{"line-color":"#dad4a2"}},{"selector":"edge[group=\"spd_attr\"]","style":{"line-color":"#D0D0D0"}},{"selector":"edge[group=\"reg\"]","style":{"line-color":"#D0D0D0"}},{"selector":"edge[group=\"reg_attr\"]","style":{"line-color":"#D0D0D0"}},{"selector":"edge[group=\"user\"]","style":{"line-color":"#f0ec86"}}],
  
  elements: [
    {"data":{"id":"605755","idInt":605755,"name":"PCNA","score":0.006769776522008331,"query":true,"gene":true},"position":{"x":481.0169597039117,"y":384.8210888234145},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":"fn10273 fn6944 fn9471 fn10569 fn8023 fn6956 fn6935 fn8147 fn6939 fn6936 fn6629 fn7928 fn6947 fn8612 fn6957 fn8786 fn6246 fn9367 fn6945 fn6946 fn10024 fn10022 fn6811 fn9361 fn6279 fn6278 fn8569 fn7641 fn8568 fn6943"},
    {"data":{"id":"611408","idInt":611408,"name":"FEN1","score":0.006769776522008331,"query":false,"gene":true},"position":{"x":531.9740635094307,"y":464.8210898234145},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":"fn10273 fn6944 fn9471 fn6284 fn6956 fn6935 fn8147 fn6939 fn6936 fn6949 fn6629 fn7952 fn6680 fn6957 fn8786 fn6676 fn10713 fn7495 fn7500 fn9361 fn6279 fn6278 fn8569 fn7641 fn8568"},
    {"data":{"id":"612341","idInt":612341,"name":"RAD9A","score":0.0028974131563619387,"query":false,"gene":true},"position":{"x":455.8128125018193,"y":555.4591537139819},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":"fn6935 fn6219 fn6680 fn6676 fn10713 fn7552 fn7495"},
    {"data":{"id":"608473","idInt":608473,"name":"RAD9B","score":0.0026928704785200708,"query":false,"gene":true},"position":{"x":363.1144068403203,"y":515.7352912086707},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":"fn6935"},
    {"data":{"id":"611560","idInt":611560,"name":"APEX2","score":0.0026215687185565106,"query":false,"gene":true},"position":{"x":689.1927803956215,"y":634.0100611862405},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    
    {"data":{"source":"605846","target":"599863","weight":0.019407582,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":590,"id":"e588"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    {"data":{"source":"599724","target":"603070","weight":0.012506178,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":591,"id":"e589"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    {"data":{"source":"599724","target":"610236","weight":0.016794344,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":592,"id":"e590"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    {"data":{"source":"599724","target":"599863","weight":0.015911028,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":593,"id":"e591"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    {"data":{"source":"599724","target":"605846","weight":0.019493334,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":594,"id":"e592"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""}]
  });

----------
----------
----------

----------
----------
----------

Functional Programming and Object-Oriented Programming

Elements within the Document Object Model (DOM) of a Web Application are innately object-oriented.
These elements are instances that change with user interaction.
User interaction changes existing elements rather than creating new instances.
This object permanence is necessary for animations.

Functions in the back-end of the program can follow a functional programming paradigm.
There still needs to be some aspect of object permanence for the interface.

I sent the following message to Annie Cherkaev.
"
I realized something. Elements within the Document Object Model (DOM) of a Web Application innately or at least intuitively follow the object-oriented paradigm. These elements (such as a check box) are instances that change with user interaction. It is not intuitive (to me) to create a new instance of these elements for every state change from user interaction. This object permanence is also necessary for animations in D3, I think.
I think that a functional paradigm is most appropriate for back-end, core functionality like data-handling.
"

Design Decision
Aspects of the user interface that are elements of the Document Object Model (DOM) will be permanent instances of objects that mutate state according to an Object-Oriented paradigm.
Aspects of the relevant data and operations thereon will follow a Functional Paradigm.

I subsequently found this informative post on Stack Overflow from Matt Fenwick on 2 April 2014.
Notice that Matt states that the Document Object Model (DOM) is not functional by design.
http://stackoverflow.com/questions/22733712/is-applying-functional-programming-principles-to-javascript-a-seriously-viable-o
"
In my opinion, the short answer to your question is yes -- applying functional programming principles is viable in Javascript! (I believe that this is also true for most other languages -- there's usually something to be gained from applying FP principles).

Here's an example of a functional parser combinator library I built in Javascript. (And here it is in action). It was important to be functional because: 1) it allows me to build parsers by composition, which means I can build and test small parsers independently, then put them together and have confidence that the behavior will be the same, and 2) it makes backtracking super easy to get right (which is important because the choice operator backtracks when an alternative fails).

So these are FP principles (note the absence of recursion, folds, maps, and filters from this list) that I found extremely useful in building my library:

avoiding mutable state
pure functions (i.e. output depends only on input)
composition: building complex apps by gluing together simple pieces
It's usually quite easy and pleasant to apply these in Javascript because of Javascript's support for:

first-class functions
anonymous functions
lexical closures
but here are some things to watch out for:

lack of popular library of efficient functional data structures
lack of tail-call optimization (at least at the moment)
partial application is more syntax-heavy than in Haskell
lots of popular libraries are not especially functional
the DOM is not functional (by design)
However, your last comment -- "I don't want to start putting together my own tool set if it's just going to break everything once it gets too large" -- is a good one. This is basically a problem for every approach, and I can't tell you whether FP in Javascript will be more problematic than "mainstream" techniques when things get too large. But I can tell you that in my experience, FP in Javascript helps me to prevent things from getting too large.
"

http://www.codenewbie.org/blogs/object-oriented-programming-vs-functional-programming

The library React aims to support functional programming to create DOM interfaces.
React
https://medium.com/@floydophone/functional-dom-programming-67d81637d43#.at9jkki3w

https://www.sitepoint.com/introduction-functional-javascript/

I sent this message to Annie Cherkaev.
"
With interactive events, DOM elements themselves are objects with mutable state. Even so, it is possible for the JavaScript program to interact with these elements in a functional way. HTML event listeners and tools from D3 and React libraries are potentially useful.
"


----------
----------
----------

Modules

http://exploringjs.com/es6/ch_modules.html

I think Modules are the best way to organize functions without classes.
Import
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import
Export
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export

--------------------------------------------------
11 January 2017

----------
----------
----------

Functional Programming in JavaScript

With Object-Oriented Programming in JavaScript, classes organize groups of functions with similar purposes.
Separate classes are generally in separate files.
Classes organize the program.

How does one organize a program with Functional Programming in JavaScript?

http://softwareengineering.stackexchange.com/questions/122437/how-to-organize-functional-programs
According to a reply to this question, the developer organizes functional programs into modules or files.
There is a main module that controls all of the functionality to bring the entire program together.
"So, in summary: functions are contained in modules, each of which is made up of a single file. Several modules can make up a program or library; the former generally includes a Main module that is its entry point. Within a file, there are different options for organization, but I prefer to group data types near the top, IO near the bottom and logic in the middle." (Tikhon Jelvis)

Organize functions with similar purpose in modules as separate ".js" files. Use a "main" module as a script to bring all the functionality together into a full program.

I also shared a conversation with Annie Cherkaev about organization of programs in functional programming.
Annie recommends writing functions according to a functional programming paradigm.
She recommends organizing those functions with similar or related functions together in groups within classes.
Specifically, Annie recommends organizing functions into classes according to the type of data that they concern.
Annie recommends not using "member functions" within these classes.
I think that member functions mutate state rather than creating a new instance.
Annie also acknowledges that functional programming might not always be practical in JavaScript.

I shared a brief conversation with Ethan Kerzner on 3 January 2017 about functional programming.
Ethan argued that neither Functional Programming nor Object-Oriented Programming were superior generally.
Each paradigm might be more appropriate for different applications or uses.
Ethan uses both.
"Saying 'FP is better' is like saying a screw driver is better than a hammer. It totally depends on what you're trying to do.  

JS is a cross paradigm language---both objects and functions are first class entities. I use aspects of both OO and FP in my JS apps. But my goal is to emphasize code readability, maintainability, and extendability over mathematical elegance and computational efficiency.  I'd say use what you're most comfortable with---and whatever plays nicely with the frameworks that you're using." (Ethan Kerzner)

UnderScore.JS
http://underscorejs.org/

----------
----------
----------

Meeting with Alexander Lex

Metabolic Model in SBML ---[libSBML, COBRApy]---> Metabolic Model in JSON ---[Custom]---> Metabolic Model in CytoScapeJS ---[Custom]---> Metabolic Model suitable for Network Visualization in D3

We may not even need or want to visualize the network using D3.
It might be practical to visualize the network using CytoScapeJS.

Client-Side Application without a Server
For now, it is reasonable to try implementing the tool as an entirely client-side application without a server.
Keep the Query functionality entirely independent of the Visualization Rendering and User Interface.
If we need to use a server in the future, it will help to have these aspects distinct.

Priority Order
1) Develop the core functionality.
-Organize the network.
-Functionality to query the network for specific subnetworks.
2) Network Visualization
-Represent properties and sets such as compartment in multiple ways, such as by spatial layout and by color or glyph.
3) User Interface
-Also support the supplementary data visualizations, such as distribution of degrees.

Network Layouts and Representation of Properties and Sets
On 11 November 2016, Sean P McKenna recommended consideration of Bubble Sets, Kelp Diagrams, Kelp Fusion, or Line Sets to visualize sets on the network.
Also, the metabolic network model treats metabolites in separate compartments as distinct metabolites.
It might be possible to represent these metabolites as single metabolites belonging to multiple sets.

Goals for 18 January 2017
Convert information for metabolic model from JSON format to format suitable for CytoScapeJS.
Import this information to CytoScapeJS to organize a network model.
Develop methods to query against this network to select specific collections or subnetworks.
Visualize these collections in some rudimentary way.

----------
----------
----------


--------------------------------------------------
10 January 2017

----------
----------
----------

Functional Programming in JavaScript

https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0#.aq905i7cq

http://reactivex.io/learnrx/

Essential functions
map (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
filter (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
reduce
concatAll
zip

http://eloquentjavascript.net/1st_edition/chapter6.html


----------
----------
----------

I will need to convert the network information from CytoScapeJS format to D3 format for visualization with D3.
I assume that we want to visualize the network using D3.
Maybe D3 gives better flexibility than CytoScape.
I do not know for sure which will be the better option.

----------
----------
----------

I need to convert information from the metabolic model in JSON format to a format that is compatible with CytoScapeJS.

Reactions
Iterate over reactions.
Set group to "nodes".
Set class to "reaction".
Set data object to the reaction object.

Links
Iterate over reactions.
Set group to "edges".
Set data object...
-custom identifier (reaction-identifier_metabolite-identifier).
-source... I think the source should always be the reaction (both for reactant and product metabolites)
-target... the metabolite (reactant or product)
-weight... no need for weight unless I want to visualize the network with CytoScape

Metabolites
Iterate over metabolites.
Set group to "nodes".
Set class to "metabolite".
Set data object to the metabolite object.

The information from the genes object is unnecessary.
This information only has identifiers anyway (HGNC).
http://www.genenames.org/



----------
----------
----------

Data Structure in CytoScapeJS
Consult the Cola Demo to learn how to structure the network information in the CytoscapeJS model.

Summary

var core = cytoscape({
    elements: [
        
        {group: "nodes", class: "metabolite", data: {id: "a", property: "value1"}},
        {group: "nodes", class: "metabolite", data: {id: "b", property: "value2"}},
        {group: "nodes", class: "reaction", data: {id: "c", property: "value3"}},
        
        {group: "edges", data: {id: "ab", source: "a", target: "b", weight: 10}},
        {group: "edges", data: {id: "bc", source: "b", target: "c", weight: 15}},
        {group: "edges", data: {id: "ac", source: "a", target: "c", weight: 20}}
        
    ]

});

----------
----------
----------

Demonstration Cola.js Gene-Gene Graph

cy = cytoscape({
  container: document.getElementById('cy'),
  
  style: [{"selector":"core","style":{"selection-box-color":"#AAD8FF","selection-box-border-color":"#8BB0D0","selection-box-opacity":"0.5"}},{"selector":"node","style":{"width":"mapData(score, 0, 0.006769776522008331, 20, 60)","height":"mapData(score, 0, 0.006769776522008331, 20, 60)","content":"data(name)","font-size":"12px","text-valign":"center","text-halign":"center","background-color":"#555","text-outline-color":"#555","text-outline-width":"2px","color":"#fff","overlay-padding":"6px","z-index":"10"}},{"selector":"node[?attr]","style":{"shape":"rectangle","background-color":"#aaa","text-outline-color":"#aaa","width":"16px","height":"16px","font-size":"6px","z-index":"1"}},{"selector":"node[?query]","style":{"background-clip":"none","background-fit":"contain"}},{"selector":"node:selected","style":{"border-width":"6px","border-color":"#AAD8FF","border-opacity":"0.5","background-color":"#77828C","text-outline-color":"#77828C"}},{"selector":"edge","style":{"curve-style":"haystack","haystack-radius":"0.5","opacity":"0.4","line-color":"#bbb","width":"mapData(weight, 0, 1, 1, 8)","overlay-padding":"3px"}},{"selector":"node.unhighlighted","style":{"opacity":"0.2"}},{"selector":"edge.unhighlighted","style":{"opacity":"0.05"}},{"selector":".highlighted","style":{"z-index":"999999"}},{"selector":"node.highlighted","style":{"border-width":"6px","border-color":"#AAD8FF","border-opacity":"0.5","background-color":"#394855","text-outline-color":"#394855","shadow-blur":"12px","shadow-color":"#000","shadow-opacity":"0.8","shadow-offset-x":"0px","shadow-offset-y":"4px"}},{"selector":"edge.filtered","style":{"opacity":"0"}},{"selector":"edge[group=\"coexp\"]","style":{"line-color":"#d0b7d5"}},{"selector":"edge[group=\"coloc\"]","style":{"line-color":"#a0b3dc"}},{"selector":"edge[group=\"gi\"]","style":{"line-color":"#90e190"}},{"selector":"edge[group=\"path\"]","style":{"line-color":"#9bd8de"}},{"selector":"edge[group=\"pi\"]","style":{"line-color":"#eaa2a2"}},{"selector":"edge[group=\"predict\"]","style":{"line-color":"#f6c384"}},{"selector":"edge[group=\"spd\"]","style":{"line-color":"#dad4a2"}},{"selector":"edge[group=\"spd_attr\"]","style":{"line-color":"#D0D0D0"}},{"selector":"edge[group=\"reg\"]","style":{"line-color":"#D0D0D0"}},{"selector":"edge[group=\"reg_attr\"]","style":{"line-color":"#D0D0D0"}},{"selector":"edge[group=\"user\"]","style":{"line-color":"#f0ec86"}}],
  
  elements: [
    {"data":{"id":"605755","idInt":605755,"name":"PCNA","score":0.006769776522008331,"query":true,"gene":true},"position":{"x":481.0169597039117,"y":384.8210888234145},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":"fn10273 fn6944 fn9471 fn10569 fn8023 fn6956 fn6935 fn8147 fn6939 fn6936 fn6629 fn7928 fn6947 fn8612 fn6957 fn8786 fn6246 fn9367 fn6945 fn6946 fn10024 fn10022 fn6811 fn9361 fn6279 fn6278 fn8569 fn7641 fn8568 fn6943"},
    {"data":{"id":"611408","idInt":611408,"name":"FEN1","score":0.006769776522008331,"query":false,"gene":true},"position":{"x":531.9740635094307,"y":464.8210898234145},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":"fn10273 fn6944 fn9471 fn6284 fn6956 fn6935 fn8147 fn6939 fn6936 fn6949 fn6629 fn7952 fn6680 fn6957 fn8786 fn6676 fn10713 fn7495 fn7500 fn9361 fn6279 fn6278 fn8569 fn7641 fn8568"},
    {"data":{"id":"612341","idInt":612341,"name":"RAD9A","score":0.0028974131563619387,"query":false,"gene":true},"position":{"x":455.8128125018193,"y":555.4591537139819},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":"fn6935 fn6219 fn6680 fn6676 fn10713 fn7552 fn7495"},
    {"data":{"id":"608473","idInt":608473,"name":"RAD9B","score":0.0026928704785200708,"query":false,"gene":true},"position":{"x":363.1144068403203,"y":515.7352912086707},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":"fn6935"},
    {"data":{"id":"611560","idInt":611560,"name":"APEX2","score":0.0026215687185565106,"query":false,"gene":true},"position":{"x":689.1927803956215,"y":634.0100611862405},"group":"nodes","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    
    {"data":{"source":"605846","target":"599863","weight":0.019407582,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":590,"id":"e588"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    {"data":{"source":"599724","target":"603070","weight":0.012506178,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":591,"id":"e589"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    {"data":{"source":"599724","target":"610236","weight":0.016794344,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":592,"id":"e590"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    {"data":{"source":"599724","target":"599863","weight":0.015911028,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":593,"id":"e591"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""},
    {"data":{"source":"599724","target":"605846","weight":0.019493334,"group":"spd","networkId":1230,"networkGroupId":24,"intn":true,"rIntnId":594,"id":"e592"},"position":{},"group":"edges","removed":false,"selected":false,"selectable":true,"locked":false,"grabbed":false,"grabbable":true,"classes":""}]
  });

----------
----------
----------



--------------------------------------------------
9 January 2017

CytoscapeJS

CytoScapeJS offers extensive functionality for organizing and analyzing networks.
This project is available under the permissive and open-source MIT license.
It has an active community of developers.
This JavaScript library runs entirely on the user or client's browser and does not require a server.
In this way, it offers a favorable alternative to graph databases.
CytoScapeJS provides structure to organize network information, including topology of nodes and links and attributes of these nodes and links.
It supports parent-child relationships for compound nodes.
It provides functionality to select collections from the core network by topological traversal and by consideration of attributes.
It is possible to identify nodes and edges in the neighborhood by proximity and to identify shortest paths.
It also provides functionality for network analysis, including node degree centrality, closeness centrality, and betweenness centrality.

Table describing CytoScapeJS Functionality...

Network Organization
cy.add()
cy.remove()
eles.remove()
ele.id()
eles.clone()
eles.data()
ele.json()
ele.jsons()
ele.isEdge()
ele.isNode()
ele.group()

Collection Selection
eles.select()
eles.unselect()
cy.collection()
cy.getElementById()
eles.intersection()
eles.diff()
eles.filter()
eles.sort()
eles.min()
eles.max()
eles.neighborhood()
eles.components()
eles.breadthFirstSearch()
eles.depthFirstSearch()
eles.dijkstra()
eles.aStar()
eles.floydWarshall()
eles.bellmanFord()
eles.kruskal()
eles.kargerStein()
eles.pageRank()

Network Analysis
node.degree()
eles.degreeCentrality()
eles.closenessCentrality()
eles.betweennessCentrality()

----------
----------
----------

Meet with Alexander Lex and Jared P Rutter

----------
----------
----------

1) Individual Development Plan (IDP)
-Short-term and long-term goals.
-Projects, publications, conferences.
-Post-doctorate.
--How to set up opportunity?
--Interest in epidemiology.
-Novel Analytical Approaches for Metabolomics Data R03
--Try for it or not?

----------
----------
----------

2) Research Conferences
-Specific preferences.
-Financial support.

-Organizations

--International Society for Computational Biology (ISCB)
---Intelligent Systems for Molecular Biology (ISMB) and European Conference on Computational Biology (ECCB)
----Due abstract: 13 April 2017
---Great Lakes Bioinformatics Conference
----Due abstract: 13 Marcy 2017

--American Medical Informatics Association (AMIA)
--American Society for Biochemistry and Molecular Biology (ASBMB)
--Federation of American Societies For Experimental Biology (FASEB)

----------
----------
----------

3) Publication
-Journals
--PLOS Computational Biology
---Official journal of the International Society For Computational Biology (ISCB)
---Software articles are a specific category
---Software must already have wide adoption amongst users or promise wide adoption
---Presubmission inquiry necessary

----------
----------
----------

4) Project
-Client-side without a server.
-JavaScript library for networks, CytoScapeJS.



--------------------------------------------------
8 January 2017

It is necessary to include the cytoscape.js file within the actual project in order for the browser to read it in.
I do not think that it is possible to reference cytoscape.js from a web server, as it is for d3.

--------------------------------------------------
6 January 2017

I need to figure out how to install CytoScapeJS and use it in my JavaScript program.

Maybe I need to use "npm install"?

https://docs.npmjs.com/getting-started/installing-npm-packages-locally


----------
----------
----------

CellMaps
-http://bioinformatics.oxfordjournals.org/content/early/2016/06/15/bioinformatics.btw332.full
-Server in Java and C for processing network analysis.
-"Network Enrichment: finds all the existing connections between pairs of proteins in a list and then, it applies a test to check if the level of connectivity of the network inferred is significantly higher than it can be expected by chance (Minguez et al., 2009), a testing strategy also adopted by other resources, such as STRING (Franceschini et al., 2013)."

STRING Database
-http://string-db.org/
-https://www.ncbi.nlm.nih.gov/pubmed/25352553
-STRING Database is an excellent resource for exploring networks of protein interactions.
-STRING Database uses an algorithm for Network Enrichment analysis that recognizes enrichment beyond random probability on the basis of topology.

Sigma JS
-http://sigmajs.org/
-Sigma JS is primarily for visualization of networks.
-Sigma does not have much (if any) functionality for network traversal or queries, I think.

--------------------------------------------------
5 January 2017

I installed libSBML and COBRApy and used them successfully to convert Recon 2.2 from SBML format to JSON format.
I explored the properties of metabolites, reactions, and genes in the model.

The information of the model is in a relational data structure.
I need to organize the information from the model.
I need algorithms that can traverse, query, and analyze the network that the model implies.
I would prefer to use an existing and robust tool to manage the network.
I need to import information from the model into a structure that the tool recognizes and can interpret appropriately.


----------
----------
----------

Revisit the information from conversation with the member of the libSBML team.
Figure out how to get libSBML working with COBRApy and import Recon 2.2.

----------
----------
----------

Information in Metabolic Models in SBML or JSON format follow a structure comparable to a relational database. Relations between entities are implicit. These relations are not priority, explicit, elements of the data structure. I think that a graph database model will handle the network data more efficiently.

----------
----------
----------

Message to Visual Design Lab Team.

Hi Team, I'm evaluating libraries in JavaScript for managing graphs/networks. I need graph traversal functionality for 1) queries by topology and attributes and 2) network analysis (articulation, centrality, clique, etc). I intend to run everything client-side without a server, so no graph database. Is anyone familiar with Cytoscape.js, JSNetworkX, TinkerPop, or other comparable tools? Thanks.

My network has about 5000 nodes of Type A and about 7000 nodes of Type B, each of which has many properties, some defining sets. There are tens of thousands of directional, many-to-many links between nodes of Type A and Type B.

----------
----------
----------


Cytoscape.js
-Website: http://js.cytoscape.org/
-Nice layout option: Cose-Bilkent Layout
-Maybe it would be beneficial to use Cytoscape.js at least for network queries.
-Consider using either Cytoscape or D3 for visualization.

JSNetworkX
-JSNetworkX is an adaptation of NetworkX from Python to JavaScript.
-Website: http://jsnetworkx.org/
-GitHub Repository: https://github.com/fkling/JSNetworkX
--The last commit was on 18 July 2015.
--This project is not current, I think.

TinkerPop
-Open source support for Gremlin queries against a client-side, in-memory graph database.
-Website: https://tinkerpop.apache.org/

--------------------------------------------------
22 December 2016

Maybe allow the user to determine the degree and betweenness centrality of a specific metabolite within specific compartments.
It could be interesting to compare the centrality of a metabolite in different compartments.
Where is the metabolite most influential?

Do not require the user to select continuous portions of the network.
Do not make it a necessity to select shortest paths between entities that satisfy some property criterion.

Maybe the user wants to select all reversible reactions in the network.
Maybe the user wants to select all transport events accross the mitochondrial membrane (metabolite[c] --> metabolite[m] or metabolite[m] --> metabolite[c]).
Keep these queries simpler by keeping them discontinuous.
Do not try to fill in with all of the shortest paths.

Maybe for this sort of discontinuous query result provide the user with a list of all of the portions that satisfy the query (like Pathfinder).
Allow the user to select a single result or multiple results to display simultaneously.

--------------------------------------------------
20 December 2016

Software Design Document
http://blog.slickedit.com/2007/05/how-to-write-an-effective-design-document/

Communicate appropriately to specific audience.
My audience includes basic, biological scientists.

Justify every design decision.
Document design decisions.
Document benefits of design.
Document limitations and risks of design.

Describe the users and intended use context.
Describe the problem that the design intends to solve.
Describe the scope of the project.
Describe the requirements of the project.



--------------------------------------------------
19 December 2016

http://vmh.uni.lu/#home
Include ReconMap in survey of current technology, related work.



--------------------------------------------------
15 December 2016

BioGrid
https://thebiogrid.org/

http://www.yeastgenome.org/

--------------------------------------------------
8 December 2016

Current Technology for Comparison

NetworkAnalyst
https://www.ncbi.nlm.nih.gov/pubmed/25950236
http://www.networkanalyst.ca/faces/home.xhtml
NetworkAnalyst is a web application.
It supports exploration and analysis of networks of protein interaction.
It supports association of data with these networks, such as gene or protein abundance.
I think that NetworkAnalyst does not support networks between metabolites.
I think that NetworkAnalyst focuses on the protein-protein dimension of the biological network.

KEGG Atlas

Escher



--------------------------------------------------
7 December 2016

Accommodate subcellular compartments.
Draw somewhat-rectangular regions in the view for compartments.
Determine the areas of these regions by how many nodes in the subset are within each.
Restrict nodes to their respective compartments.
Follow similar principles as bounding nodes within the view itself.

--------------------------------------------------
15 November 2016

I will need to account for replication of high-degree nodes in the search queries.
High-degree nodes might connect parts of the network that are otherwise very unrelated.

--------------------------------------------------
11 November 2016

Meeting with Ethan Kerzner

The input data for this Profondeur system are metabolic models from the community of systems biology in Systems-Biology-Markup-Language (SBML) format.
These models have rich detail on the metabolic network and also benefit from thorough curation.

For simplicity and versatility, keep the Profondeur system functionality as close to the original data as is practical.
It will probably be necessary to convert the model data from SBML format to JSON format.
COBRApy and libSBML in Python will be useful for this format conversion.
This JSON file of the model data will be the input for the Profondeur system.

It will be necessary to restructure the data in order both to perform graph-based queries and to represent the data as a node-link graph in D3.
Do not restructure the data for any sort of permanent file structure.
Rather, preserve the data in its native form.
Instead, write getter functions to retrieve the relevant information from the native data and return the necessary arrays of objects for graph operations.

Write the entire Profondeur system in the JavaScript language to run on the client's browser.
Ethan assured me that queries on graphs with up to 1 million nodes will still be efficient enough to run interactively on the client's browser.
The user will not want to install anything special (like a back-end in Python) on their own machine.
It would be possible to have a back-end in Python on a server.
Passing information between a front-end in JavaScript and a back-end in Python is possible and fairly simple, but it does require some engineering.
For practicality and simplicity, write the entire Profondeur system in the JavaScript language to run on the client's browser.

--------------------------------------------------
10 November 2016

Changes to the network representation such as replicating nodes should result in a total redraw of the network, I think.

Changing the layout of the network to group nodes by property such as cellular compartment should happen on the network nodes and links as currently drawn.

Highlighting should also happen on the network as currently drawn.

--------------------------------------------------
10 November 2016
Visual Design Lab
Code Review Meeting

Ethan Kerzner

----------

Python string casting
u"string"
Tells the interpreter to understand the string in Unicode rather than in ASCI.

Function decorator
Decorator takes a function and wraps it into a new function.
Flask uses decorators.
Flask provides decorators to use.
It is uncommon to need to write your own decorators to use.

----------

System Architecture

In Ethan's example, user interaction with the graphical interface assembles information for a query against a network graph database.

Ethan recommends assembling a JSON object in the interface program that stores all relevant information for the query.
Then pass that JSON object to a platform program to assemble the actual query and carry it out.

The results from this query against the graph database return to the graphical interface as a JSON file.

I think that I should follow a similar architecture model.

----------

Neo4j and Titan are leading graph databases.
Cypher is the query language for Neo4j.

Cypher is a fairly simple and intuitive language.
Cypher also is unable to support some more complex types of queries.
Gremlin and Titan are more complex language, but they also support more complex types of queries.

Querying to find paths from network data in typical databases (SQL) is complex and requires a lot of joins.

----------

Network Data Abstraction

In architecture of any system, try to maximize modularity.
For example, have the client in JavaScript pass only essential elements of query (start, end) to the intermediate platform (Flask Application) to assemble the query in cypher to pass to the database in Neo4j.
That way the client in JavaScript is not only useful for cypher language and database in Neo4j.
Then the interface is versatile.
It would only be necessary to change the intermediate platorm (Flask) in order to support different query languages or databases.

In general, graph databases (including Neo4j) are optimized to handle searches with restrictions by properties of nodes, not links.
It is much more efficient to query the graph database by properties of nodes than it is to query the graph database by properties of links.

In terms of data abstraction, it is helpful to represent the network optimally.
Represent nouns as nodes.
Represent verbs as links.

An example is a network between neurons with synapses.
Cells are nodes.
A cell can connect to multiple synapses.
It would be ideal to represent both cells and synapses as nodes since both have properties.

In the case of my current project, it is ideal to represent both metabolites and reactions as nodes.
In my current encoding, reactions have node properties.
Reactions consist of links between two nodes (in/out).

----------

--------------------------------------------------
9 November 2016

----------

Now make smaller subsets

http://www.jsoneditoronline.org/

http://www.genome.jp/kegg/pathway/eco/eco00020.html

Citrate Cycle
Genes Grouped By Reaction

1)
CS: b0720 (h_c, h2o_c, coa_c, cit_c, oaa_c, accoa_c)
ACONTa/b: b0118, b0771, b1276 (cit_c, h2o_c, acon_C_c, icit_c)
ICDHyr: b1136 (icit_c, nadph_c, co2_c, nadp_c, akg_c)

accoa_c
acon_C_c
akg_c
cit_c
coa_c
co2_c
h_c
h2o_c
icit_c
nadph_c
nadp_c
oaa_c

2)
AKGDH: b0726
b0727
SUCOAS: b0728, b0729

3)
FRD7: b0721, b0722, b0723, b0724, b4151, b4152, b4153, b4154
SUCDi: b0721, b0722, b0723, b0724
FUM: b1611, b1612, b4122
b2210
MDH: b3236

----------

Now that I have a subset of the model of the metabolic network, I need to define nodes and edges.

Reaction encoding of reactant and product metabolites:
Reactant metabolites have value -1.
Product metabolites have value 1.

Nodes
1) Metabolite
----Type specification ("metabolite")
----Need complete data for metabolite
----Just copy metabolites
2) Reaction_In
----Type specification ("reaction")
----Need reference to the reaction
3) Reaction_Out
----Type specification ("reaction")
----Need reference to the reaction

Links
1) Metabolite-To-Reaction_In/Out
----Type specification ("metabolite")
----Do not need any data, really
2) Reaction
----Type specification ("reaction")
----Need complete data for reaction
----Just copy reactions

Reactions With Metabolites

ACONTa_in
-cit_c
ACONTa_out
-h2o_c
-acon_C_c

ACONTb_in
-h2o_c
-acon_C_c
ACONTb_out
-icit_c

AKGDH_in
-nad_c
-akg_c
-coa_c
AKGDH_out
-succoa_c
-co2_c
-nadh_c

CS_in
-h2o_c
-oaa_c
-accoa_c
CS_out
-h_c
-coa_c
-cit_c

FRD7_in
-fum_c
-q8h2_c
FRD7_out
-succ_c
-q8_c

FUM_in
-fum_c
-h2o_c
FUM_out
-mal__L_c

ICDHyr_in
-icit_c
-nadp_c
ICDHyr_out
-nadph_c
-co2_c
-akg_c

MDH_in
-mal__L_c
-nad_c
MDH_out
-h_c
-nadh_c
-oaa_c

SUCDi_in
-succ_c
-q8_c
SUCDi_out
-fum_c
-q8h2_c

SUCOAS_in
-coa_c
-succ_c
-atp_c
SUCOAS_out
-adp_c
-succoa_c
-pi_c

----------

http://www.genome.jp/kegg/pathway/eco/eco00020.html
KEGG
Citrate Cycle (TCA Cycle)
Escherichia coli K-12 MG1655

JSON editor
http://www.jsoneditoronline.org/

Citrate Cycle
Reactions
citrate synthase (CS)
aconitase A (ACONTa)
aconitase B (ACONTb)
isocitrate dehydrogenase (ICDHyr)

succinyl-CoA synthetase (SUCOAS)
succinate dehydrogenase (SUCDi)
fumarase (FUM)
malate dehydrogenase (MDH)

genes (per KEGG)
aconitate hydratase 2 (acnB: b0118)
isocitrate dehydrogenase (icd: b1136)
2-oxoglutarate dehydrogenase E1 (sucA: b0726)
2-oxoglutarate dehydrogenase E2 (sucB: b0727)
succinyl-CoA synthetase beta (sucC: b0728)
succinate dehydrogenase (sdhC: b0721)
fumarate hydratase (fumC: b1611)
malate dehydrogenase (mqo: b2210)
malate dehydrogenase (mdh: b3236)
citrate synthase (gltA: b0720)

Citrate Cycle
Genes Grouped By Reaction
b0720
b0118, b0771, b1276
b1136
b0726
b0727
b0728, b0729
b0721, b0722, b0723, b0724, b4151, b4152, b4153, b4154
b0721, b0722, b0723, b0724
b1611, b1612, b4122
b2210
b3236

Genes Sequential
b0118.
b0720.
b0721.
b0722.
b0723.
b0724.
b0726.
b0727.
b0728.
b0729.
b1136.
b1276.
b1611.
b1612.
b3236.
b4122.
b4151.
b4152.
b4153.
b4154.

Missing
b0771 (compensatory)
b2210 (compensatory)

Metabolites
accoa_c.
acon_C_c.
adp_c.
akg_c.
atp_c.
cit_c.
coa_c.
co2_c.
fum_c.
h_c.
h2o_c.
icit_c.
mal__L_c.
nad_c.
nadh_c.
nadp_c.
nadph_c.
oaa_c.
pi_c.
succoa_c.
succ_c.
q8_c.
q8h2_c.

----------

Message date: 9 November 2016
Message from: T Cameron Waller (cameron.waller@biochem.utah.edu)
Message to: Neil Swainston (neil.swainston@manchester.ac.uk)

Hi Neil,

I am very interested in your current model of human metabolism, Recon 2.2 (https://www.ncbi.nlm.nih.gov/pubmed/27358602). Thank you very much for making this contribution to the scientific community! My team studies metabolism, and I would like to use your model to give general context to our experiments and data. My intention is to use Recon 2.2 as a (framework for a) general model of the metabolic network, representing properties of metabolites, proteins, transcripts, and genes and relations between them. I do not intend to use Recon 2.2 for computational simulations.

I accessed Recon 2.2 from the BioModels Database (http://www.ebi.ac.uk/biomodels-main/MODEL1603150001) with format in SBML Level 2 Version 4. When I tried to load the model into COBRApy (https://opencobra.github.io/cobrapy/) for general exploration and format conversion, I learned that Recon 2.2's version of SBML is apparently pre-FBC Version 2 and so is not the preferred format for use in COBRApy. I think I can resolve compatibility issues using LibSBML.

Before I proceed, I want to make sure to use the most current version of Recon 2.2 and the best strategy for compatibility. Do you have recommendations for using Recon 2.2 in COBRApy? Do you have a version of Recon 2.2 in a more current version of SBML?

Thank you,

T Cameron Waller

Department of Biochemistry
University of Utah

--------------------------------------------------
8 November 2016

----------

Mark Newman
"How Can You Tell What A Network Looks Like When It's Too Large To Look At?"
24 October 2016
Indiana University Network Science Institute

[00:03:43 - 00:04:25]
"The thing that all of these pictures have in common is that they're kind of cheating. They've all been cherry-picked to be beautiful, simple examples where you can make a nice picture of them where you see what's going on. Most networks are not like this. Most networks are like this. You try and make a picture of them, and I'm sure that this is a best effort, but you really can't see what's going on. Because it's just too dense, there's too many nodes, there's too many edges, and you just end up with this hairball. This one here, so this is a picture of a metabolic network, for example."

[00:04:46 - 00:05:10]
"It's not possible to make a good picture of this network. It's just too dense. So a large part of what we do, is we're interested in understanding what these networks look like when we can't actually make a picture of them because of this problem here. There's too large and complicated objects."

Two Strategies

Small-Scale Structure:
Look at properties of small subsets of the network.
Degrees, correlations, small subgraphs, centrality

Large-Scale Structure:
Mark's Focus for the remainder of his talk
Communities (topo-community structure), core-periphery structure, hierarchy, ranking, latent-space structure
Synthesize information from across the entire network.
Methods for quantifying large-scale structure:
Statistical Inference (Mark's focus)
Spectral Methods

Maximum likelihood

Mark describes statistical inference in the context of deriving an estimate for mean and standard deviation for a set of data with normal distribution.

[00:12:50]

Mark feel like analysis of community structure in networks has been "done to death".


--------------------------------------------------
7 November 2016

----------
Apparently Recon 2.2 (http://www.ebi.ac.uk/biomodels-main/MODEL1603150001) is in an SBML format prior to FBC 2.
As a result, COBRApy (https://opencobra.github.io/cobrapy/) cannot import it without LibSBML.
I have been unable to install and import LibSBML into my Python Interpreter.
Contact the author(s) of Recon 2.2 to request a version of Recon 2.2 that is in SBML format with FBC 2.

----------
http://cobrapy.readthedocs.io/en/stable/io.html?highlight=libsbml
I need libSBML to load the Recon 2.2 model in COBRA.
http://sbml.org/Software/libSBML

----------
Comparison to available technology helps me to get a clear idea of the contribution of this project.
A major distinguishing characteristic of this project is the emphasis on network topology.
A lot of tools (Escher, GeneMania) assign interactions or relatedness between metabolites or genes if they are in the same pathway.
Pathways are sets that rely on human annotation.
Pathways do not account for degree of relation.
Two metabolites in a pathway might relate via 1 reaction or via 10 reactions.
Those relationships (1 or 10) are not equal.
Additionally, any metabolite can participate in multiple pathways.
These problems exist in Gene Set Enrichment Analysis and Metabolite Set Enrichment Analysis.
Profondeur emphasizes network topology.
In order to do so, Profondeur will rely on methods for queries and dynamic layout of the network.

----------
I realized that multiple reactant metabolites and multiple product metabolites can participate in a single reaction.
Drawing distinct links between every reactant and product would cause visual clutter.
I would prefer to use super links between groups of reactants and products.


----------
Eventually, I would like to position nodes in groups by properties, such as cellular compartment.
I wonder if Mike Bostock's clustered force-directed layout would have some clues.
Basically I want to use a force directed layout within multiple separate regions (maybe circles).

----------
Network View
Hover on node: highlight node, highlight edges, display tool tip with details about node.

----------
Maybe the Navigation View could show information on the counts of nodes and links in a subset of the network.
Maybe this view could also show a histogram for the degrees of nodes in the subset of the network.
Options
Color nodes by degree.
Color nodes by compartment.
Position nodes (layout) by compartment.

----------
I have some ideas about the architecture of the tool, Profondeur.

Query View
A class contains properties and methods for this view of the interface.
This class provides methods to build and execute queries to select subsets of the network data.
Methods of this class actually modify the model for the network data (JSON file) to contain only the relevant parts of the network.
This class passes the subset network data as a JSON object to the Navigation View.

Navigation View
A class contains properties and methods for this view of the interface.
This class provides methods to narrow the subset of the network data further and to modify the visual representation of the network.
As soon as it receives data from the Query View, this class saves the original data and makes a copy for modification.
This class passes the subset network data as a JSON object directly to the Network View.
This class also passes newly annotated subsets of the network data as a JSON object to the Network View as the user interacts with options to modify the network subset or visual representation.

Network View
A class contains properties and methods for this view of the interface.
This class provides methods to visualize the subset of the network.

--------------------------------------------------
4 November 2016

I prepared a summary of the model for E coli core metabolism with single entries for metabolite, gene, and reaction.
The summary helps me to understand the information that the model includes and the format of these data.

The model gives basic information about the metabolic network itself.
The available information includes

Metabolites
Name
Identifiers in multiple databases
Chemical formulas
Charges
Subcellular compartment(s)

Reactions
Name
Metabolites that participate as reactants or products
Reversibility
Requisite gene products (such as protein enzymes)

Genes
Identifier
Name

There is very little information for the gene entry.
In addition to gene, I would like to have information for transcripts and proteins.
I could assemble information using a python script.
Maybe I could figure out an API query against UniProt to determine protein cofactors.



--------------------------------------------------
2 November 2016

----------
Try to accomodate pretty much any metabolic model of reasonable quality.

----------
Paths in graph theory
https://en.wikipedia.org/wiki/Path_(graph_theory)
Algorithms exist to identify sequences of edges that connect nodes.
Algorithms exist to do so with consideration for edge directionality.
Allow user to restrict or not to restrict directionality when appropriate.
Dijkstra's Algorithm
Bellman-Ford Algorithm
Floyd-Warshall Algorithm

What algorithm(s) did PathFinder use?

I want to find the shortest path(s) that connect a set of nodes or multiple nodes while considering properties of the nodes and edges in these paths.

I would like to support more intricate algorithms that consider properties of nodes and edges in detail.

https://www.cs.princeton.edu/~rs/talks/PathsInGraphs07.pdf

----------
I need tools to work with the metabolic network once I load it into JavaScript as a JSON.
I need to recognize nodes and edges and their properties.
I need to find paths between multiple nodes.

I need to format my network representations in custom ways.
I need to highlight nodes that match a selection criterion.
I need to position sets of nodes according to properties such as compartment.
I need to control the representation of nodes and edges for different types of nodes and edges.

Here are some tools.

SigmaJS
http://sigmajs.org/

CytoScape.js
http://js.cytoscape.org/

----------
COBRApy integrates well with Escher.
Indeed, it is possible to read a SBML metabolic model into COBRApy, test and modify it in COBRApy, export it to JSON, and import to Escher to build metabolic maps from it.

Here is an example script for Escher.
http://nbviewer.jupyter.org/github/zakandrewking/escher/blob/master/docs/notebooks/Generate%20JSON%20models%20in%20COBRApy.ipynb

"
import cobra
import cobra.io
import cobra.test

# Load a cobra model from anywhere you like
model = cobra.io.read_sbml_model(cobra.test.ecoli_sbml)
# generate a json file to load into Escher
cobra.io.save_json_model(model, 'E coli core.json')
"

Obviously Escher already has utility to read relevant information from the metabolic model in JSON format.

Escher does not support dynamic queries against a comprehensive network model to select subsets of interest.
Escher does not support dynamic layout of the subsets of interest.

----------

Maybe refer to Cytoscape or PathFinder to determine good algorithms to find paths between nodes in network database.

----------

Here is a potential architecture.

Data System
Implement in Python and maybe Caleydo.
Load metabolic model in SBML format using cobra Python package.
Maybe use Python program to enrich metabolic model with supplemental properties such as cofactors of proteins via curated database (UniProt, etc).
Save new database in appropriate format.
Pass database to User Interface.

User Interface
Load network database.
I thought it would be nice to handle queries against the database and just pass subsets to the User Interface.
However, if I want dynamic queries, it seems that I might need to handle queries in User Interface.
Find paths between nodes and according to conditions in query interface.
Draw network graph.
Allow user to modify network graph further, but store the original in order to revert.

----------

I need to interface with the SBML format or convert to a more convenient format.
I also want to select a subset of the metabolic network (such as Glycolysis or Citrate Cycle).

COBRApy is a useful package for Python that provides tools for working with models in SBML format.
This package has capability to convert models between SBML and JSON format.
http://cobrapy.readthedocs.io/en/latest/index.html
cobra.io.read_sbml_model(join(data_dir, "file_name.xml"))
cobra.io.load_json_model(join(data_dir, "file_name.json"))
cobra.io.save_json_model(textbook_model, "file_name.json"))

https://opencobra.github.io/
https://opencobra.github.io/cobrapy/

In terminal...
C:\Python27\Scripts\pip.exe install cobra

1) Install cobra python package
In terminal:
"pip install cobra"
Installation of cobra worked properly.
In Python script:
"import cobra"
"from cobra.test import test_all"
"test_all()"
I can now use cobra in Python.
Complete!

2) Load Recon 2.2 model from SBML into cobra
Or for now use a smaller, simpler model.
Complete!

3) Explore the model
Complete!

4) Figure out how to subset/query the model
Not Complete...

5) Save the model as a JSON
Complete!

6) Load the JSON into a JavaScript program and explore.

--------------------------------------------------
1 November 2016

Recon 2.2 is a model that includes the most current knowledge of human metabolism. If I can interface with it then I can benefit from the community's updates and curation. Models like Recon 2.2 in systems biology are a bit complex, and I'm working to understand it. I'll need to manage the structure and organization of these data so that I can use them in my project.

Recon 2.2 is available in the SBML format.
http://www.ebi.ac.uk/biomodels-main/MODEL1603150001

I need to learn how to work with the SBML format.
I also need to learn how to convert the SBML format into a useful format for JavaScript.

http://sbml.org/
http://sbml.org/Basic_Introduction_to_SBML

--------------------------------------------------
31 October 2016

I met with Sean P McKenna.
We discussed my use of his "Design Activity Framework" in my visual design project.
We also discussed my visual design project, and he offered feedback.

Sean encouraged me to consider alternative visual representations of the network than the node-link diagram.
An adjacency matrix or grid is a great option.

Force-Directed Node-Link Diagram
https://bl.ocks.org/mbostock/4062045

Adjacency Matrix
https://bost.ocks.org/mike/miserables/

Grouping is very important for a grid representation to be informative.

Think abstractly about what tasks the user needs to do.
Use this concept to prioritize alternative visual representations, such as the grid versus node-link diagram.

Dimensionality Reduction
Consider the types of nodes and links that are most important.
Limit the model to these priority nodes and links for simplicity.
For example, omit genes and transcripts from the node-link diagram.
Just include reference from a protein to its transcript and gene in order to accomodate those data.

--------------------------------------------------
28 October 2016

A common format for computational biological models is The Systems Biology Markup Language (SBML).
There is a website with more information on this format (http://sbml.org/).
This website gives information on the format and on how to work with the format.

I definitely neither want to construct my own metabolic model nor want to curate and maintain my own database or model.
It will definitely be best to interface with models and databases that the community curates and maintains.
Ready assemblies of metabolic models from the community are good options.
I want a model that includes lots of properties, including compartments, cofactors, regulation, etc.

When organizing the data for the network, distinguish between different kinds of relations.
The network is a multilayer network, or a network with multiple dimensions, multiple types of nodes and relations between them.
Also distinguish between direct relations and sets.
For example, all genes are a set.
All transcriptional regulators are a set.
All metabolic enzymes are a set.
All mitochondrial proteins are a set.
All proteins with a specific cofactor are a set.
All catabolic, anabolic, oxidative, or reductive reactions are a set.
Notice that cellular compartment is a set, not a direct relation.
There are very many possible sets.
Accomodate sets defined by any properties that multiple entities or relations share in common.
A set should be a collection of entities or relations that a query defines.

I think that genome-scale metabolic models are the best option for structured data.

I need to figure out how to pass this information to Caleydo and then convert it to a format that I can use (probably a JSON).

Query Interface
Some other strategies use complex Degree Of Interest (DOI) functions.
I read a report about a project that used those.
I prefer not to implement complex DOI functions.
I prefer to support thorough queries so the user can define her or his own interest set.
Maybe prioritize query results by some ranking criteria.
Maybe rank by trends in experimental data.
Maybe high-light the query nodes in the network view.
Maybe anchor these nodes.
Somehow help the user to establish and maintain a sense of context and reference points.

----------
Notes on the big-picture plan.

Here is the general plan.
The Data Visualization course is a great priority because it helps me to learn principles of data visualization as well as relevant tools and techniques.
The project for the Data Visualization course is a great opportunity to obtain some basic experience in visual design and software development.

Here is the plan for the project.
1) Learn from past and current technology.
Study the scientific literature to learn about the analysis and visualization of networks in social science, computer science, and biology.
The subject of multilayer networks, or networks with multiple dimensions, is especially relevant and interesting.
2) Learn from domain experts.
Fortunately, I am a domain expert and a potential user myself.
I also have ample opportunity to observe domain needs and state-of-the-art technology in presentations from the Rutter Team and the Metabolic Research Community at the University Of Utah.
Consultations with domain experts during the design and development process will also be helpful.
Entering consultations with some low-level prototypes (even sketches of design concepts) will help domain experts to recognize possibilities and open up to ideas.
3) Design and develop a prototype.
Use data from comprehensive-scale metabolic models.
Possibly develop methods to easily import additional information (cofactors, compartments) from external databases, such as UniProt).
Organize data using Caleydo in the back-end.
Develop interface using JavaScript and D3.
4) Evaluate and improve the prototype.
Compare prototype to existing tools.
Collect evaluations and feedback from domain experts.
Consider using formal surveys and evaluations.
Improve the prototype.


--------------------------------------------------
27 October 2016

I am trying to search the literature to learn more about the state-of-the-art of visualization and analysis of biological and nonbiological networks.

I especially want to learn about networks with multiple dimensions, multilayer networks.

I attended the Seminar In Metabolism.

The presenter was Kimberley Evason, MD, PhD.
Kimberley Evason, MD, PhD
Principal Investigator, Dept. of Oncological Sciences
Assistant Professor, Dept. of Pathology
Huntsman Cancer Institute
University of Utah

The title of her presentation was "Hepatocellular carcinoma, serotonin signaling, and lipid metabolism".

Kimberley has performed Transcriptomics analysis by microArray.
She has also performed lipidomics.
She also performed small-molecule metabolomics.
In all cases, the analysis of the -omics data was not within any context of the metabolic network.
It seemed to me that analysis of both transcriptomics and lipidomics could benefit by tools to consider the data in the context of the metabolic network.

Kimberley Evason is another potential user.

--------------------------------------------------
23 October 2016

Domain Tasks
Consider the ideas that I put into my presentation the Rutter Team on 14 October 2016.
Try to keep domain tasks/problems specific.
Consider the guidelines in 2012_Selmair_IEEE.
Then translate the domain tasks to abstract tasks/problems.


Interactive Elements
tool-tip
pop-over
modal-window

Sketching For The Design Process
http://52weeksofux.com/post/346650933/sketch-sketch-sketch
http://ui-patterns.com/blog/User-interface-sketching-tips-part-1
https://www.smashingmagazine.com/2011/12/the-messy-art-of-ux-sketching/
https://www.viget.com/articles/5-lessons-from-a-cartoonist-applied-to-the-website-creation-process
https://simplysecure.org/blog/2016-sketching-storyboards
http://www.inspireux.com/2010/06/28/50-sketching-resources-for-user-experience-designers/
Sketches organize and communicate ideas effectively.
It is important for sketches to be efficient.
Hence many references recommend sketching by hand rather than using computer tools.
It is also important for sketches to be neat.
There are arguments both for manual sketching and computational sketching.

Design Process Methodology
I have some feedback for Sean P McKenna from early-on in the design process. The material for Alexander Lex's data visualization course recommends using the "Five Design Sheet" (FDS) methodology (http://fds.design/). I did a brief study of this methodology after a similarly brief study of McKenna's "Design Activity Framework" (DAF).  My initial impression is that FDS starts too far into the design process, skipping prerequisites. In contrast DAF's "Understand" activity provides helpful guidance through a very important preliminary process. I will try to provide more feedback as I proceed further into the design process.

--------------------------------------------------
20 October 2016

Meeting with Alexander Lex

Alex advises me to progress on 2 goals.
1) Familiarize myself with the technological development tools.
These include Python, JavaScript, D3, and Caleydo.
2) Design visualization features to solve domain-specific problems.
Consider the needs or requirements of the domain of studying the biological metabolic network system.
Consult and interview domain experts.
Translate those domain-specific needs into abstract tasks (searches, queries, etc).
Develop features to solve domain-specific problems.

My project for the data visualization course will progress toward both of those goals.
I will familiarize myself with the technology by actually writing code.
For this purpose, whatever I develop does not have to be perfect.
It just needs to give me an opportunity to learn the tools.
I will also explore ways of visualizing the data.

Eventually I want to have advanced algorithms for searches and queries as well as analysis of experimental data in the context of the network.
I think that aspect of the project should come later.
For now I should focus on how to visualize the data.
Alex agrees.

Alex also recommends that I learn and interface with Caleydo from the beginning.



Start with a list of requirements and goals.
What are the needs in the domain?

Worry about features later.

Look at Miriah's Design Study Methodology paper.

Work with the tools to make some basic visualizations (force-directed layout).

Integrate with Caleydo early on.
Learn about Caleydo from the actual documentation.

What problems do I want to solve with my tool?
Use the domain terminology.
Then translate those needs to visualization abstract tasks.


----------

Feedback from biologists


Several biologists have demonstrated interest in the idea of improving methods to explore and analyze (including visually) metabolism and the biological system.
There has been interest in the idea of visualizing the network system using three spatial dimensions and virtual reality.
Indeed, Cascade (https://www.ncbi.nlm.nih.gov/pubmed/26810393) is a recent program that uses three spatial dimensions in its display.

Several biologists have demonstrated skepticism and concern about this project's real contribution.
What are my plan and strategy for the project?
How will I actually conduct the project?
Will I really be able to develop something useful and new?
Will I need to simplify my goal by focusing on a smaller (less comprehensive) aspect of the problem?
Will I really be able to obtain the necessary information about the network?
How will my project improve on previous and current efforts to visualize the biological network?


Plan
I need to review current technology in general network visualization and in biological network visualization.
I need to know what I will change and improve.
Early on, I think I should explore alternative ways to visualize the metabolic network interactively.
Later on, I think I should incorporate advanced queries and analytical algorithms for experimental data.

Current technologies probably do not really detract from the novelty of our project.
We are not worried about the competition.

Ideas

Using a web platform will improve accessibility and compatibility.

The metabolic network has multiple dimensions of entities and relationships.
Consider ways to enhance the two spatial dimensions of the display to represent multiple dimensions effectively.
1) Use two spatial dimensions on the display, but give a sense for a third, layered, spatial, depth dimension in a reference or context view (Arena3D, http://www.arena3d.org/).
The user could select or scroll between associated dimensions (adding a sort of temporal dimension) and could also collapse multiple dimensions into the same view.

Current Technology
Cytoscape
VisAnt
Arena3D
VisualGraphX

--------------------------------------------------
6 October 2016

I attended the Metabolism Seminar. The presenter used metabolomics and proteomics with broad coverage to characterize metabolic differences in heart failure.

 It was an interesting example of the state of the art. The presenter showed very many pathways and bar charts.

The presenter was
Junco Warren, PhD
Assistant Professor
Cardiovascular Research and Training Institute
Department of Internal Medicine
University of Utah

The title of her presentation was "A Novel Role of the Histone Methyltransferase Smyd1 in Cardiac Metabolism: A Multisystems Approach".

Junco Warren is a potential user of the network visualization and analysis tool.
She is familiar with the state of the art.

--------------------------------------------------
29 September 2016

Meeting with Janet Iwasa

Hypothesis
Define questions or problems, and design methods to solve.
Define specific scientific problems facing real research.


Balance between versatility and practical functionality.


The research design needs to consider both more applied and basic audiences.
Tune publications and presentations to audience, biology versus computer science.

How to bridge gap between computer science and biology.
Develop understanding of and focus on problems and hypotheses important to biology.
Talk with multiple biologists to appreciate real probelms in biology.


Talk With
Janet Lindsley (Communication, education perspective)
Orly Alter

--------------------------------------------------
23 September 2016

Goals

1) Learn in the Data Visualization course.

2) Establish design requirements by consultation with potential users.
-How methodical should this consultation be?
-Should I administer formal surveys?
-Should I ask prospective users to rank features?
-I will probably need to meet with people to explain concepts.

3) Comparison to available tools
-Should I consider available tools at this stage?

4) Familiarize Caleydo and PathFinder.

Ideas

Even a theoretical project to illustrate a concept (visualization of metabolic network) and the scope of possibility will be interesting to the metabolic community.
Give a concept demonstration prototype with some data analysis to demonstrate relevance and usefulness.

Query network to find paths between nodes.
Rank paths by topology (connectivity) and by attributes (experimental data).

In network visualization with dynamic layout, it is a challenge for the human user to maintain contextual reference.
Consider anchoring a particularly important node or nodes spatially as a reference point.

PathFinder simplifies queries for computational efficiency.
A new direction is to establish methods for heuristic queries of a large network database in order to evaluate the data more completely.

Use the best channel of visual perception (position) for the most important data.
Whenever possible, position should represent some absolute and important aspect of the information.
Do not use arbitrary geographic layout of the metabolic network, or at least be cautious.
Use color sparingly, mostly for highlighting.
Use definable queries and dynamic, interactive ranking to work with big data.
Try to interface with curated, maintained, current (up-to-date) databases.

Sashimi Plot
Miso Algorithm for cluster grouping

--------------------------------------------------
12 September 2016

Slide 1: Title, Metabolism Within The Biological System
-Title: "Visual Exploration and Analysis of the Metabolic Network."
-Script: "Thank you for attending my presentation. I am going to introduce my very new research project, about which I am very enthusiastic. Metabolism is a central and integral part of the biological system. A holistic perspective on this system is important to understand the often widespread changes to metabolism in human diseases such as cancer, diabetes, and obesity. Modern 'omics technologies provide broad data on the biological system, but analyzing these data is a challenge. There is a need for methods to study the vast complexity of the metabolic network."

Slide 2: Holistic Study Of Metabolism
-Data
--Data are available for broad, holistic study of metabolism.
-Analysis
--1) Consider all known connections in analysis and interpretation.
---Connections might be atypical, compensatory, or subtle
----Pyruvate metabolism
----Lysine degradation
---Two proteins might share a common kinase as a regulator.
---Two transcripts might share a common transcription factor as a regulator.
--2) Discover new connections.
---Some connections might be case specific.
---Maybe connections only become significant upon some disease or other perturbation of the network.
-Examples
--Metabolic Map
-Script: "I used to study the Mitochondrial Pyruvate Carrier (MPC) that transports pyruvate from the cytosol into the mitochondrion. Here is a metabolic map that I drew manually while working on that project. I drew this map specifically to represent relationships between metabolites that I could measure by metabolomics. This map conveys a lot of information, and drawing it was a lot of work. I searched through several databases to confirm reaction steps, enzymes, and enzyme locations in subcellular compartments. This map is pretty complex, right? Well, that is true, but this map is also a gross simplification of metabolism. Even worse is that it is an arbitrary misrepresentation of metabolism due to my own bias and selection. I will offer pyruvate as an example."

Slide 3: Metabolic Network - Entities, Attributes, Relevant Data
-Metabolic Network
--Entities:
---Genes: ~70000
---Transcripts: >70000 (splice variation)
---Proteins: ~30000
----Enzymes or Transporters: ~5000
----Many more types of proteins than enzymes and transporters have roles in metabolism.
---Metabolites: ~30000
--Entity Attributes:
---Abundance
---Cellular Compartment (Set/Super-Relation)
---Modifications (Mutants, Variants, Chromatin, Post-Translational Modifications)
---Cofactors
--Entity Relevant Data:
---Genomics, Transcriptomics, Proteomics, Metabolomics
-Script: "Metabolism is a vast and complex network of relationships between genes, transcripts, proteins, and metabolites."

Slide 4: Metabolic Network - Relations, Attributes, Relevant Data
-Metabolic Network
--Entities: genes, transcripts, proteins, metabolites
--Relations:
---Encoding: Biological Sequences, Genetic Code (gene-transcript-protein)
---Expression: Regulation of transcription and translation (metabolite-protein, protein-gene, protein-transcript)
---Regulation: Allosteric regulation (metabolite-protein), Post-translational modification of proteins (protein-protein)
---Transport: Metabolite transport (protein-metabolite)
---Catalysis: Enzymatic catalysis (protein-metabolite)
---Reaction: Chemical reactions (metabolite-metabolite)
--Relation Attributes:
---Metabolic Process Or Pathway (Set/Super-Relation)
---Catabolism Or Anabolism
---Oxidation Or Reduction
---Reaction Rate
--Relations Relevant Data:
---Encoding: Biological Sequences, Genetic Code
---Expression: Chromatin Immunoprecipitation, Ribosome Profiling
---Regulation: Hicks Allostery, Proteomics, Tandem Affinity Purification, Yeast Two-Hybrid
---Transport: Metabolic Characterization
---Catalysis: Metabolic Characterization
---Reaction: Metabolic Characterization
-Script: "These entities relate to each other in multiple ways even beyond the typical central biological dogma and enzymatic catalysis. For example, Kevin Hicks in the Rutter Lab is studying allosteric regulation between metabolites and various proteins."

Slide 5: Network Visualization: Node-Link Diagram
-Slide
--Show a simple example of a network
--Annotate it with details during explanation
-Node-Link Diagrams
--Node types: gene, transcript, protein, metabolite
--Link types: encoding, expression, transport, catalysis, reaction, regulation
--Sets of Nodes and Links: metabolic process/pathway, cellular compartment, catabolic or anabolic process, oxidative or reductive process, enzymatic cofactor
--Attributes of Nodes and Links: reaction rate, modification, abundance
-Script: "Now let us consider the information of the metabolic network in the context of a node-link diagram. ... Even a simple network with 31 nodes of a single type and edges of a single type become difficult to consider. Computers are excellent at handling this sort of data."

Slide 6: Network Visualization: Exploration and Analysis
-Useful operations:

Slide 6: Network Visualization, Example Hairball
-Example of Node-Link Diagram
--Force-Directed Layout of Large-Scale Network (Figure from Alex)
---Useless

Slide 5: Network Visualization, Example KEGG Atlas
-Examples of Node-Link Diagrams
--KEGG Atlas
---Map Layout
--Sigma Metabolic Atlas
---Map Layout
-Problems:
--Map layout artificially biases network by layout
---Distance between nodes does not correlate to degree of relation
---This distortion would obscure trends when visualizing experimental data on the network
---Map layout somewhat arbitrarily associates nodes with specific pathways even if they also function in others
--Network is not interactive in the sense of dynamically generating subsets according to interest
---There is no way to modify the network in order to visualize features of interest

Slide 7: Network Visualization, Query-Based Exploration
-Query Network
--Node-Link Diagram is a visual representation of data about the network.
--It is possible to query the network to facilitate exploration.
--PathFinder
---Introduce Alexander Lex at this point.
--Give some examples of how this could be useful.
--Give examples of types of queries that could be useful.

Slide 8: Network Analysis
-Relate to the concept of querying the network.
-Associate experimental data with the metabolic network.
--Potentially relate data from multiple -omics technologies.

Slide 9: Application Meta-Analysis



Slide _:Acknowledgement
-Courses:
--Computer Programming For Biomedical Informatics
---Brian E Chapman
---Python
--Data Visualization
---Alexander Lex
---HTML, CSS, JavaScript
-Mentors And Teams:
--Alexander Lex, Visual Design Team
--Jared Rutter
-Supervisory Committee:
--Former Members
--Current Members

--------------------------------------------------
9 September 2016

Plan for presentation to the Department of Biochemistry on 15 September 2016.

Introduce the metabolic network as part of the biological system.
Describe the complexity of the metabolic network.
Describe the need to consider metabolism holistically, especially in order to interpret data from modern -omics technologies.

Metabolism
-Central part of biological system
-Influential in disease
-Vast, intricate network of relationships

Holistic Study
-Modern "-omics" technologies
-Need to recognize and interpret trends
-Computational models and simulations

Interface
-Need for interface to communicate between computational models and human user

--------------------------------------------------
26 August 2016

Study the literature on visualization of biological networks.
We might even consider writing a review article.
The last major review article on the subject was from 2010 by Nils Gehlenborg.

We will plan to publish in computer science or bioinformatics journals.
We wil consider whether to publish once or twice.
The ideal situation would be to publish first a prototype with rich technical detail in a computer science journal.
Then we would publish a project with a stronger biological component in a bioinformatics journal.

March 31 2017 is the submission deadline for the 2017 IEEEVis.
InfoVis is a subconference of IEEEVis.
My goal should be to have a manuscript ready to submit for the 2017 IEEEVis.

Analysis of the types of biological networks.
Ecosystems are another type of biological networks.
We will probably focus on molecular networks and on the biological networks within a single organism.
Population-wide heterogeneity in the human genome has a network aspect.
We would acknowledge inter-organismal networks (social, phylogenetic, ecosystem, population) while focusing on individual organisms.

Alex prepares visualization graphics that represent data using SVG coding and D3.
He uses GUI-based tools (like InkScape) for illustrations that do not represent data.